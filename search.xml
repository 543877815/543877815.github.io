<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>调教stable diffusion修复手姿的原理、分析与实践</title>
    <url>/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>无论是在商用的midjourney V5，还是在基于开源的stable diffusion的text to image的AI生图中，一个难以绕过去的问题是，人物手部姿势的稳定生成。一个容易遇到的问题场景是，当用户使用精心设计的prompt和denoising parameter生成一副高分辨率的图片，从整体构图，到色彩、人物神情等都比较的满意的时候，却发现人物的手部姿势发生扭曲，最常见的是产生六指。如果此时通过调整参数如textural inversion、lora和controlNet等，又会改变生成图像的分布，达不到原来的生成效果。另外一种方案是使用inpainting的方式将畸形的手部区域进行重绘，但是如果没有合适的方法和技巧，仅仅靠不同的随机数搜索好的手姿的分布，其搜索范围将会很大，并且在设备有限的情况下比较耗时。如何设计一个高效的inpainting的工作流将是一个需要不断探索和实践的方向。</p>
<p>在这篇文章中，本人主要探索仅仅使用AI工具对手姿进行修复的工作流，不涉及其他如photoshop的工具的使用<del>（主要是没探索出来，用了效果一般）</del>。以下是我复现的效果。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Effect of Inpainting.png" alt="Effect of Inpainting"></p>
<span id="more"></span>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>从high-level insight来看stable diffusion的原理，本质上是从一个先验分布(如高斯分布)到数据分布的映射，在text-to-image的任务中，主要通过文本来控制如何进行映射；如果将其看成一个优化问题，则是通过text这种条件信息来约束解空间。</p>
<h2 id="SD-based-Inpainting的原理"><a href="#SD-based-Inpainting的原理" class="headerlink" title="SD-based Inpainting的原理"></a>SD-based Inpainting的原理</h2><p>与基于卷积使用临近区域进行inpainting机理不同，基于stable diffusion的inpainting方法更类似于使用GAN inversion在生成模型的隐空间搜索可行解。具体而言，<strong>stable diffuision通过denoising strength的参数控制图片的diffusion process的程度，并重新通过solver来搜索潜在解空间</strong>。其工作的原理是，如下图所示，加噪后的图片将作为图像条件信息约束解空间，denoising strength越大，则图像信号越小，solver的迭代次数也越多，那么解空间的范围越大。当solver的迭代次数为0的时候，通过mask将原图和inpainting的图片进行融合，另外边缘区域将通过gaussion blur等一些后处理使得拼接结果更加平滑。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Inpainting using stable diffusion with different denoising strength.png" alt="Inpainting using stable diffusion with different denoising strength"></p>
<p>与基于GAN inversion的方法不同，基于stable diffusion的方法更加灵活且具有可拓展性，原因在于，stable diffusion的模型设计使得其在denoising的过程中可以添加更多条件信息以约束解空间。</p>
<p>在修复坏手的场景下，只通过文本的信息是难以对手部实现更加精细化的控制的。根据之前翻阅的博客来看，目前处理坏手的主要有一下几种方法：Textural Inversion、LoRA、ControlNet，其原理主要通过在denoising model的不同组件中加入条件信息以在denoising process控制生成结果，以下将逐一简要介绍原理。另外也有结合photoshop的方法直接修改在原图上修改手部姿势，这相当于直接修改图像分布，通过stable diffusion对色彩、光影等分布进行调整，使之更好融入原图中，该方法不在本文中进行探讨。</p>
<h2 id="Textural-Inversion"><a href="#Textural-Inversion" class="headerlink" title="Textural Inversion"></a>Textural Inversion</h2><p>基于embedding方法(本质上是基于<a href="https://arxiv.org/abs/2208.01618">textural inversion</a>)，其主要思想通过在text encoder(如CLIP)的词表中注入新的概念(prompt) <script type="math/tex">S_*</script>，并通过对应的图片的来微调该概念对应的word embedding。与直觉有一点差异的是，在应用中，注入的新的概念不是好手，并通过好手的图片来微调；注入的新的概念往往是坏手，亦或者是坏的肢。个人感觉这样的做法是因为其一，模型并对于好手的概念是比较难学习到，其二，坏手的图片很容易在生成图片的过程中获得，因此数据量比较充足。因此，在使用的时候需要将坏手的概念假如到negative prompt中，也就是提供反向条件信息来约束解空间。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Textural inversion.png" alt="Textural inversion" width="75%"></p>
<p>这种方式的对于解空间的限制来自于文本，因此控制效果比较一般，只能控制手体面积占画面比重较大的图像，对于复杂手姿效果有限。</p>
<h2 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h2><p>基于<a href="https://arxiv.org/abs/2106.09685">LoRA</a>及其变种(如<a href="https://github.com/KohakuBlueleaf/LyCORIS">LyCORIS</a>)的方法，这类方法的主要思想是在diffusion model的U-net网络中，transformer模块的to_k、to_q、to_v的全连接层，加入一个可训练的bottlenet形状的全连接的indentity mapping。在应用中，往往需要额外分布的数据进行训练来微调整个diffusion model。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/LoRA.png" alt="LoRA"></p>
<p>本次实践中主要用到修手的LoRA是<a href="https://huggingface.co/casque/hipoly_3dcg_v7-epoch-000012">hipoly_3dcg_v7-epoch-000012</a>，LyCORIS是<a href="https://civitai.com/models/47085/envybetterhands-locon">GoodHands-beta2</a>，其中LyCORIS需要在stable diffuion中安装额外的插件<a href="https://github.com/KohakuBlueleaf/a1111-sd-webui-lycoris">a1111-sd-webui-lycoris</a>。</p>
<h2 id="ControlNet"><a href="#ControlNet" class="headerlink" title="ControlNet"></a>ControlNet</h2><p>基于<a href="https://arxiv.org/abs/2302.05543">ControlNet</a>的方法。与LoRA的思想类似也是添加额外的网络分支进行训练，而与LoRA不同的是，ControlNet可以输入额外的条件信息，如(depth map、edge、openpose)等，其次从参数量的角度来说，ControlNet的相对更大，因此控制力度更强。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/ControlNet.png" alt="ControlNet" width="75%"></p>
<p>上述讲述原理的论文有：</p>
<p>[1] Textural inversion: <a href="https://arxiv.org/abs/2208.01618">An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion</a></p>
<p>[2] LoRA: <a href="https://arxiv.org/abs/2106.09685">LoRA: Low-Rank Adaptation of Large Language Models</a></p>
<p>[3] ControlNet: <a href="https://arxiv.org/abs/2302.05543">Adding Conditional Control to Text-to-Image Diffusion Models</a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>以下这张图可以容易通过下面的参数生成，值得注意的是其中使用到的Stable Diffusion，LoRA，embedding需要在huggingface或者civitai上下载并放置到<code>/model</code>下对应模型类型的文件夹，可以看到该图右边的手是存在六指的：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">official</span> art,unity <span class="number">8</span>k wallpaper,ultra detailed,masterpiece,best quality,<span class="number">1</span> woman,(extremely detailed),dynamic angle,Mysterious expression,wind effect,fantasy background,rim lighting,side lighting,cinematic light,ultra high res,<span class="number">8</span>k uhd,film grain,best shadow,delicate,RAW,light particles,detailed skin texture,detailed armor texture,detailed face,intricate details,ultra detailed,bright,strong,&lt;lora:sxz-death-knight:<span class="number">0</span>.<span class="number">6</span>&gt;,(silver armor),holding spear,pauldrons,((yellow hair)),glowing blue eyes,bangs,blue cape,fantasy,(realistic),atmospheric,&lt;lora:hipoly_3dcg_v7-epoch:<span class="number">0</span>.<span class="number">3</span>&gt;,&lt;lora:add_detail:<span class="number">1</span>&gt;</span><br><span class="line"><span class="attribute">Negative</span> prompt: paintings,sketches,(worst quality:<span class="number">2</span>),(low quality:<span class="number">2</span>),(normal quality:<span class="number">2</span>),lowres,normal quality,((monochrome)),((grayscale)),skin spots,acnes,skin blemishes,age spot,(bad-image),(((EasyNegative))),lowres,((bad anatomy)),((bad hands)),text,missing finger,extra digits,fewer digits,blurry,((mutated hands and fingers)),(poorly drawn face),((mutation)),((deformed face)),(ugly),((bad proportions)),((extra limbs)),extra face,(double head),(extra head),((extra feet)),monster,logo,cropped,worst quality,jpeg,humpbacked,long body,long neck,((jpeg artifacts)),deleted,old,oldest,((censored)),((bad aesthetic)),(mosaic censoring, bar censor, blur censor),(muli view),(bad anatomy:<span class="number">1</span>.<span class="number">21</span>),(bad proportions:<span class="number">1</span>.<span class="number">331</span>),extra limbs,(disfigured:<span class="number">1</span>.<span class="number">331</span>),(more than <span class="number">2</span> nipples:<span class="number">0</span>.<span class="number">5</span>),(missing arms:<span class="number">1</span>.<span class="number">331</span>),(extra legs:<span class="number">1</span>.<span class="number">331</span>),(fused fingers:<span class="number">1</span>.<span class="number">61051</span>),(too many fingers:<span class="number">1</span>.<span class="number">61051</span>),(unclear eyes:<span class="number">1</span>.<span class="number">331</span>),badhandsv5-neg,badhandv4,EasyNegative,easynegative,ng_deepnegative_v1_75t,verybadimagenegative_v1.<span class="number">3</span>,</span><br><span class="line"><span class="attribute">Steps</span>: <span class="number">30</span>, Sampler: DPM++ <span class="number">2</span>M Karras, CFG scale: <span class="number">6</span>.<span class="number">5</span>, Seed: <span class="number">2860171206</span>, Size: <span class="number">512</span>x768, Model hash: bde6750eac, Model: majicmixFantasy_v20, Denoising strength: <span class="number">0</span>.<span class="number">5</span>, Hires upscale: <span class="number">2</span>, Hires steps: <span class="number">15</span>, Hires upscaler: <span class="number">4</span>x-UltraSharp, Lora hashes: <span class="string">&quot;sxz-death-knight: 0d2b6f72e9a0, hipoly_3dcg_v7-epoch: 28c410185e6b, add_detail: 7c6bad76eb54&quot;</span>, TI hashes: <span class="string">&quot;easynegative: c74b4e810b03, badhandsv5-neg: aa7651be154c, badhandv4: 5e40d722fc3d, ng_deepnegative_v1_75t: 54e7e4826d53, verybadimagenegative_v1.3: d70463f87042&quot;</span>, Version: v1.<span class="number">5</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Example.png" alt="Example" width="50%"></p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>根据参数和我在实验中的分步拆解text-to-image中的执行过程，这样图片的生成存在这样的pipeline：</p>
<ol>
<li>首先，是在大小为<script type="math/tex">512\times 768</script>的尺度上使用30的步长使用<strong>text-to-img</strong>方法生成图像内容。</li>
<li>其次，使用类ESRGAN的模型对图像进行超分辨率重建。</li>
<li>最后，使用0.5的denoising strength和15的步长进行<strong>img-to-img</strong>变换，相当于在高分辨率尺度上对图像进行refinement。</li>
</ol>
<p>可以看到从低分辨率图像开始人物的左手就存在六指问题，即使使用卷积网络进行超分辨率重建以及使用stable diffusion进行高分辨率重建也没有修复这个问题，其中后者的细节还增加了。</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Overall pipeline.png" alt="Overall pipeline"></p>
<p>由于，我认为这个参数设定下生成的人物神情恰好击中了我的审美，因此，如果在不大幅修改图像人物神情分布的情况下修复坏手是一件值得思考的问题。从前面的原理来看，可以通过Textural Inversion、LoRA和ControlNet等多种方式来约束stable diffusion的解空间。需要分析的是，<strong>在上述的pipeline的哪个部分添加怎么样的控制不会影响既定分布同时又能修复坏手问题？</strong>，为此做了以下实验。</p>
<h2 id="Text-to-img"><a href="#Text-to-img" class="headerlink" title="Text-to-img"></a>Text-to-img</h2><p>如果使用text-to-image的方法，首先需要排除排除Textural Inversion和LoRA，因为在原有基础的parameters的设定下，修改任意word和LoRA都会改变图像分布。那么是否可以使用ControlNet的方式进行控制，这里我主要尝试的方式是depth map的吗，为此需要下载<a href="https://github.com/jexom/sd-webui-depth-lib">sd-webui-depth-lib</a>插件以方便添加手部控制。当然这个插件自带的手部深度图比较有限，因此我在civitai上发现了一个更加丰富的手部深度图库：<a href="https://civitai.com/models/67174">900 Hands Library for Depth Library | ControlNet</a>。对比原图我使用了这样的手势，并摆放到对应位置以生成深度信息图：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Usage of depth library.png" alt="Usage of depth library"></p>
<p>并且我在text-to-image的配置ControlNet配置该条件信息输入网络中，如下所示：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Parameters of ControlNet.png" alt="Parameters of ControlNet" width="75%"></p>
<p>当然如果显存充足的情况下，可以使用不同的条件信息如canny和Openpose追加控制，见<a href="https://arxiv.org/abs/2302.08453">t2iadapter</a>和<a href="https://arxiv.org/abs/2302.09778">coadaper</a>介绍的方法，本人实践这两种方法在单一模型控制下效果不如ControlNet。然而，很不幸这种方法也会极大地修改图像的分布，同时手姿问题也没有很好地解决：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Text-to-Img using ControlNet.png" alt="Text-to-img using ControlNet" width="50%"></p>
<p>这里的提及论文是：</p>
<p>[4] T2I-Adapter: <a href="https://arxiv.org/abs/2302.08453">T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models</a></p>
<p>[5] Coadaper: <a href="https://arxiv.org/abs/2302.09778">Composer: Creative and Controllable Image Synthesis with Composable Conditions</a></p>
<h2 id="Img-to-img"><a href="#Img-to-img" class="headerlink" title="Img-to-img"></a>Img-to-img</h2><p>那么既然上述方法行不通，另外一种想法就是，在Refinement的过程中使用ControlNet的添加约束，以类似的设定进行实验。然而，这种方式也会修改图像的分布，同时面部细节也有会平滑塑料感：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Img-to-img using ControlNet.png" alt="Img-to-img using ControlNet" width="50%"></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>因此，更好的办法就是在<code>Example.png</code>的图片上进行区域重绘，然而实验中发现通过简单的mask和inpainting难以实现期望的效果，根据前面对SD-based inpainting原理的分析，需要思考的是，<strong>到底什么样参数设定会影响实现预期的inpainting</strong>。首先需要思考的是，这么多parameters哪些是可以是需要保留的，哪些是可以修改的。从原理上来说，prompt、negative prompt、sampling methods、steps这些大部分是不宜修改的，否则会影响最后生成图像的分布。但是值得思考的是否可以添加合适的条件输入，去处不合适的条件输入来更好地约束解空间，以下是一些思考和修改：</p>
<p><strong>LoRA：</strong></p>
<ul>
<li>通过开源社区发现，<a href="https://civitai.com/models/47085/envybetterhands-locon">GoodHand</a>对于整图的手部生成有较大的帮助，为此加入该LyCORIS可能对inpainting结果有帮助。</li>
<li><a href="https://civitai.com/models/58390">add_detail</a>，虽然该LoRA可以增加图像的细节信息，但是实践中发现，该LoRA的加入会助生多余的手指，因此在inpaiting的过程中讲起挪出。</li>
</ul>
<p><strong>ControlNet：</strong></p>
<ul>
<li>正如<a href="## Text-to-img">Text-to-img</a>章节中所分析，ControlNet能帮助约束解空间，因此类似于Text-to-img和img-to-img，ControlNet需要保留，并且可以适当修改ControlNet权重如<code>1.2</code>，以及设定<code>ControlNet is more important</code>。</li>
</ul>
<p><strong>Dynamic Denoising Strength：</strong></p>
<ul>
<li>前面说到，Denoising Strength越大，解空间的范围越大。因此当图像中需要inpainting的区域离期望分布较远时，需要使用较大Denoising Stength(如0.75)来修改原图的分布，当inpainting的区域离期望分布较接近时，该用较小的Denoising Strength(如0.5或以下)对原图的分布进行调整。</li>
</ul>
<p><strong>Adetailer:</strong></p>
<ul>
<li>使用<a href="https://github.com/Bing-su/adetailer">Adetailer</a>，其潜在原理是通过检测和分割的思路找到图像中手的位置，可以设定针对手的prompt进行重绘。这里我使用<code>hand_yolov8n.pt</code>网络结合<code>badhandsv5-neg,badhandv4,EasyNegative,easynegative,ng_deepnegative_v1_75t,verybadimagenegative_v1.3,</code>的negative prompt对手部进行优化。</li>
</ul>
<p><strong>batch count and Loop back:</strong></p>
<ul>
<li><p>两种方法一种像广度搜索解空间，一种像深度搜索解空间，可以结合两者使用。</p>
</li>
<li><p>一种是使用<code>batch count</code>，相当于在原来的seed上递增，通过不同的随机数搜索好手的分布。</p>
</li>
<li>另外一种是使用<code>Script</code>中的<code>Loop back</code>，以recurrent的方式迭代式将输出送到输入中。</li>
</ul>
<p>接下来就是概率抽奖环节，由于使用较大的denoising strength，所以在过程中生成出来的图像手部纹理具有较大差异，甚至可能不是手的纹理，我只能说：“淡定，骚年，这是正常滴”，或许可能调低denoising strength以获得更稳定的结果。</p>
<h2 id="实现案例"><a href="#实现案例" class="headerlink" title="实现案例"></a>实现案例</h2><p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/input__0.65__0.5__0.4__0.3.png" alt="input__0.65__0.5__0.4__0.3"></p>
<p>此处我以input为输入，设置denoising strength=0.65(注：由于暂时不清楚Loopback和Inpainting的执行工作流，所以上下两处的denoising strength均设为0.65)，执行30次Loop back，使用Aggressive的策略作为Denoising strength curve：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Parameters of Loopback.png" alt="Parameters of Loopback" width="75%"></p>
<p>随后执行denoising strength为0.5、0.4、0.3等，使用不同denoising noise调整解空间，如果发现手部增加莫名的细节可以关闭Adetailer，结果图如下：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/input_0.65_0.5__0.4__0.3.png" alt="input_0.65_0.5__0.4__0.3"></p>
<p>也可以使用<code>batch count</code>的方式搜索解空间，对比图如下：</p>
<p><img src="/2023/08/20/%E5%9C%A8stable-diffusion%E4%BF%AE%E5%A4%8D%E6%89%8B%E5%A7%BF%E7%9A%84%E5%8E%9F%E7%90%86%E3%80%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/Depth map comparision.gif" alt="Depth map comparision"></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>总体来说，inpainting的成功与否，较大一部分取决于期望手姿的复杂度：如果手部不同手指重合在一起，那么要让模型生成这样的分布是比较困难的，如果手指棱角分明的区分开，那么达到这样的重绘期望，是相对来说比较简单的，当然难以程度或多或少也取决于手部周围的背景。</p>
<p>优越性：现有方法虽然能实现仅仅通过AI方法完成较高质量的手部修复和重绘，同时在有限的显存(8GB)条件下也能进行。</p>
<p>局限性：现有方法自动化程度不高，需要人为设置的条件参数较多，同时随机搜索分布的过程比较耗时。</p>
<h1 id="Reference-and-resource"><a href="#Reference-and-resource" class="headerlink" title="Reference and resource"></a>Reference and resource</h1><p><strong>Paper</strong>:</p>
<p>[1] Textural inversion: <a href="https://arxiv.org/abs/2208.01618">An Image is Worth One Word: Personalizing Text-to-Image Generation using Textual Inversion</a></p>
<p>[2] LoRA: <a href="https://arxiv.org/abs/2106.09685">LoRA: Low-Rank Adaptation of Large Language Models</a></p>
<p>[3] ControlNet: <a href="https://arxiv.org/abs/2302.05543">Adding Conditional Control to Text-to-Image Diffusion Models</a></p>
<p>[4] T2I-Adapter: <a href="https://arxiv.org/abs/2302.08453">T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models</a></p>
<p>[5] Coadaper: <a href="https://arxiv.org/abs/2302.09778">Composer: Creative and Controllable Image Synthesis with Composable Conditions</a></p>
<p><strong>Denoising Model</strong>:</p>
<p>[1] <a href="https://civitai.com/models/41865?modelVersionId=49055">majicmixFantasy_v20</a></p>
<p><strong>Upscaler</strong>:</p>
<p>[1] <a href="https://civitai.com/models/116225/4x-ultrasharp">4x-UltrSharp</a> </p>
<p><strong>LoRA</strong>:</p>
<p>[1] <a href="https://civitai.com/models/58390">add_detail</a>，用来增加细节。</p>
<p>[2] <a href="https://huggingface.co/casque/hipoly_3dcg_v7-epoch-000012">hipoly_3dcg_v7-epoch</a>，修手的偏方。</p>
<p>[3] <a href="https://civitai.com/models/34855?modelVersionId=41111">sxz-death-knight</a>，魔兽世界的骑士风格。</p>
<p><strong>LyCORIS:</strong></p>
<p>[1] <a href="https://civitai.com/models/47085/envybetterhands-locon">GoodHand</a>，修手的模型。</p>
<p><strong>Textural Inversion</strong>(主要是用来减少坏手概率):</p>
<p>[1] <a href="https://civitai.com/models/4629?modelVersionId=126470">ng_deepnegative_v1_75t</a></p>
<p>[2] <a href="https://civitai.com/models/11772">verybadimagenegative_v1.3</a></p>
<p>[3] <a href="https://civitai.com/models/7808?modelVersionId=25820">easynegative</a></p>
<p>[4] <a href="https://civitai.com/models/16993">badhandv4</a></p>
<p>[5] <a href="https://civitai.com/models/116230">badhandsv5-neg</a></p>
<p><strong>Depth Map</strong>：</p>
<p>[1] <a href="https://civitai.com/models/67174">900 Hands Library for Depth Library | ControlNet</a></p>
]]></content>
      <categories>
        <category>stable diffusion</category>
      </categories>
      <tags>
        <tag>stable diffusion</tag>
      </tags>
  </entry>
  <entry>
    <title>在stable-diffusion-webui中愉快地玩耍</title>
    <url>/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/</url>
    <content><![CDATA[<p>抽空记录中，不研究内容prompt，目前在别人写的prompt下用不同工具调优。</p>
<p>目前的感觉是，场景物体细节越多的图，人物手和面容(眼睛、睫毛)的正常生成非常困难，即使有相关的Lora和negative prompt的进行加持，但基本上只在肢体离镜头比较近的时候才能正常work。既要保证场景内容丰富，又要保证肢体正常绘制，基本不可能一次正确生成，目前的策略是在喜欢的构图上进行肢体细节调优。</p>
<p>基于<code>stable-diffusion-webui 1.5.1</code>写的使用说明，版本时间是<code>20230806</code>。</p>
<p>预训练模型下载网站：</p>
<ol>
<li><a href="https://civitai.com/">https://civitai.com/</a></li>
<li><a href="https://www.liblibai.com/">https://www.liblibai.com/</a></li>
<li><a href="https://tusi.art/">https://tusi.art/</a></li>
</ol>
<span id="more"></span>
<h1 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h1><h2 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h2><p>项目地址：<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></p>
<p>windows 环境下用 <code>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui</code> 下载到本地，双击执行 <code>webui-user.bat</code> 以自动安装环境。</p>
<h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">- modules 				<span class="regexp">//</span> 网络定义</span><br><span class="line">- models  				<span class="regexp">//</span> 预训练模型存放位置</span><br><span class="line">	- Codeformer 		<span class="regexp">//</span> 人脸修复模型，包括检测和语义分割模型</span><br><span class="line">	- ControlNet 		<span class="regexp">//</span> ControlNet</span><br><span class="line">	- deepbooru  		<span class="regexp">//</span> TODO</span><br><span class="line">	- ESRGAN     		<span class="regexp">//</span> 通用图像超分模型</span><br><span class="line">	- GFPGAN     		<span class="regexp">//</span> 特定域图像超分模型</span><br><span class="line">	- hypernetworks		<span class="regexp">//</span> 超参数网络模型</span><br><span class="line">	- karlo				<span class="regexp">//</span> TODO</span><br><span class="line">	- LDSR				<span class="regexp">//</span> 利用LDM提高图像分辨率</span><br><span class="line">	- RealESRGAN    	<span class="regexp">//</span> 面相真实世界的通用图像超分模型</span><br><span class="line">	- Stable-Diffusion	<span class="regexp">//</span> stable-diffusion模型，包括Dreambooth</span><br><span class="line">	- SwinIR			<span class="regexp">//</span> 通用图像超分模型，基于Transformer</span><br><span class="line">	- VAE				<span class="regexp">//</span> VAE，用途如调整图像色彩分布</span><br><span class="line">	- VAE-aaprox		<span class="regexp">//</span> TO understanding</span><br><span class="line">- embeddings 			<span class="regexp">//</span> textual inversion权重存放位置</span><br><span class="line">- extensions 			<span class="regexp">//</span> 存放了从extensions中下载的其他功能的repository</span><br></pre></td></tr></table></figure>
<!--more--> 
<h2 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h2><p>只需要在 <code>PNG info</code> 中拖入图片就可以获取生成时使用的相关参数，这看起来是因为SD-webui会将参数信息植入到图像中进行保存，如果 <code>parameters</code> 返回 <code>None</code>，则说明该图片可能不由SD-webui生成，或许是由 <code>Midjourney</code> 生成。</p>
<p>使用相关参数大概率可以复现出该图，但需要注意的是需要自己下载 <code>positive prompt</code> 中的 <code>Lora</code> 模型以及 <code>negative prompt</code> 中的 <code>embedding</code>，即便确保无误也无法完全复现，则证明该图是经过本人多次处理如Inpainting、Outpainting得到的结果。</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/get parameters.png" alt="get parameters"></p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>一般有两种安装方法，一种是在 <code>Extensions/Avaliable</code> 中从 <code>https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui-extensions/master/index.json</code> 读取可安装的插件列表，想安装什么插件就搜索关键字然后找到 <code>stars</code> 最多的那个；另外一种是从 <code>Extensions/install from URL</code> 中从 <code>git repository</code> 中下载。</p>
<h3 id="Civitai-Helper"><a href="#Civitai-Helper" class="headerlink" title="Civitai Helper"></a><a href="https://civitai.com/models/16768">Civitai Helper</a></h3><p>该插件能扫描所有模型，从Civitai下载模型信息和预览图进行显示。</p>
<p>安装完成后，需要先在<code>tag</code>页面中进行扫描操作：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Civitai helper scan.png" alt="Civitai helper scan"></p>
<p>这个操作可以从civitai上下载匹配的模型对应的缩略图，需要等待一段时间（取决于下载模型的多少）：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Civitai helper download thumbnail.png" alt="Civitai helper download thumbnail"></p>
<p>扫描完成后，点击图标：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Show extra network.png" alt="Show extra network"></p>
<p>即可显示模型和对应的缩略图，更多使用方法请见 <a href="https://github.com/butaixianran/Stable-Diffusion-Webui-Civitai-Helper/blob/main/README.cn.md">github</a>：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Civitai Helper.png" alt="Civitai Helper"></p>
<p>注：没有缩略图显示部分需要在对应模型目录下补一个同名图片。</p>
<h3 id="提示词"><a href="#提示词" class="headerlink" title="提示词"></a>提示词</h3><h4 id="a1111-sd-webui-tagcomplete"><a href="#a1111-sd-webui-tagcomplete" class="headerlink" title="a1111-sd-webui-tagcomplete"></a><a href="https://github.com/DominikDoom/a1111-sd-webui-tagcomplete">a1111-sd-webui-tagcomplete</a></h4><p>一个prompt自动补全插件。可以在<a href="https://www.youtube.com/watch?v=zHTeZxzJ314">youtube</a>获取中文翻译。具体步骤如下：</p>
<ol>
<li>在<a href="ttps://drive.google.com/file/d/1tuJmli_xBz0Y2tQviHdbPuP9Q5UC_wKt/view">google drive</a>中下载<code>danbooru-SC.csv</code>简体中文翻译文件。</li>
<li>将<code>danbooru-SC.csv</code>放在<code>extensions\a1111-sd-webui-tagcomplete\tags</code>中。</li>
<li>于stable-diffusion-webui的配置中，<code>Settings\Tag Autocomplete</code>的<code>Tag filename</code>和<code>Translation filename</code>选项中分别设置<code>danbooru-SC.csv</code></li>
</ol>
<p>​    安装完成后可以在txt2img和img2img的prompt中看到相关选项：<img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/tagcomplete.png" alt="tagcomplete"></p>
<h4 id="sd-webui-prompt-all-in-one"><a href="#sd-webui-prompt-all-in-one" class="headerlink" title="sd-webui-prompt-all-in-one"></a><a href="https://github.com/Physton/sd-webui-prompt-all-in-one">sd-webui-prompt-all-in-one</a></h4><p>sd-webui-prompt-all-in-one旨在提高提示词/反向提示词输入框的使用体验。它拥有更直观、强大的输入界面功能，它提供了自动翻译、历史记录和收藏等功能。可以结合<a href="https://github.com/DominikDoom/a1111-sd-webui-tagcomplete">a1111-sd-webui-tagcomplete</a>使用。如果页面在sd-webui<strong>初次启动</strong>时没有正常显示该插件内容，可以 <code>F5</code> 刷新页面。</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/prompt all in one.png" alt="prompt all in one"></p>
<h3 id="分块扩散"><a href="#分块扩散" class="headerlink" title="分块扩散"></a>分块扩散</h3><h4 id="multidiffusion-upscaler-for-automatic1111"><a href="#multidiffusion-upscaler-for-automatic1111" class="headerlink" title="multidiffusion-upscaler-for-automatic1111"></a><a href="https://github.com/pkuliyi2015/multidiffusion-upscaler-for-automatic1111">multidiffusion-upscaler-for-automatic1111</a></h4><p>基于 <a href="https://github.com/albarji/mixture-of-diffusers">Mixture of Diffusers</a> 和 <a href="https://multidiffusion.github.io/">MultiDiffusion</a> 的分块扩散模型。</p>
<p>感觉 <code>Tile VAE</code> 部分可以正常使用，但是 <code>Tile Diffusion</code> 在 size 比较大的图像上容易导致内容重复绘制。</p>
<p>安装完成后可以在txt2img和img2img的选项卡中看到相关选项：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Tiled diffusion and tiled VAE.png" alt="Tiled diffusion and tiled VAE"></p>
<h3 id="ControlNet相关"><a href="#ControlNet相关" class="headerlink" title="ControlNet相关"></a>ControlNet相关</h3><h4 id="sd-webui-controlnet"><a href="#sd-webui-controlnet" class="headerlink" title="sd-webui-controlnet"></a><a href="https://github.com/Mikubill/sd-webui-controlnet">sd-webui-controlnet</a></h4><p>基于 <a href="https://github.com/lllyasviel/ControlNet">ControlNet</a> 的条件扩散模型。</p>
<p>安装完成后可以在txt2img和img2img的选项卡中看到相关选项：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/ControlNet.png" alt="ControlNet"></p>
<h4 id="sd-webui-depth-lib"><a href="#sd-webui-depth-lib" class="headerlink" title="sd-webui-depth-lib"></a><a href="https://github.com/jexom/sd-webui-depth-lib">sd-webui-depth-lib</a></h4><p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/sd-webui-depth-lib.png" alt="sd-webui-depth-lib"></p>
<p>可以在对应位置摆上和调整手势深度图作为controlNet的输入。</p>
<p>在 <a href="https://civitai.com/models/67174">900 Hands Library for Depth Library | ControlNet</a> 网站上可以下载更多的不同手势的深度图。</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/900 Hands Library for Depth Library  ControlNet.png" alt="900 Hands Library for Depth Library  ControlNet"></p>
<p>下载后的 <code>.zip</code> 文件解压后里面的图片和 <code>extensions/sd-webui-depth-lib/map</code> 的深度图手势进行融合。</p>
<h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3><h3 id="LyCORIS"><a href="#LyCORIS" class="headerlink" title="LyCORIS"></a>LyCORIS</h3><h4 id="a1111-sd-webui-lycoris"><a href="#a1111-sd-webui-lycoris" class="headerlink" title="a1111-sd-webui-lycoris"></a><a href="https://github.com/KohakuBlueleaf/a1111-sd-webui-lycoris">a1111-sd-webui-lycoris</a></h4><p>安装插件后，需要在 <code>model</code> 的目录下创建一个文件名为 <code>LyCoris</code> 的文件夹，然后将模型保存其中，调用模型需在 <code>prompt</code> 中写入 <code>&lt;lyco:model:1&gt;</code>的形式。</p>
<h3 id="基于SD的超分"><a href="#基于SD的超分" class="headerlink" title="基于SD的超分"></a>基于SD的超分</h3><h4 id="sd-webui-stablesr"><a href="#sd-webui-stablesr" class="headerlink" title="sd-webui-stablesr"></a><a href="https://github.com/pkuliyi2015/sd-webui-stablesr">sd-webui-stablesr</a></h4><p>基于<a href="https://github.com/IceClear/StableSR/">StableSR</a>的图像超分模型。</p>
<p>因为工作内容相关，所以对这个模型理解比较深入。</p>
<p>安装完成后可以在img2img的<code>Script</code>的选项卡中选择以看到相关选项：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/StableSR.png" alt="StableSR"></p>
<p>​    下载好的StableSR预训练模型需要放置在<code>extensions\sd-webui-stablesr\models</code>中</p>
<h2 id="界面设置"><a href="#界面设置" class="headerlink" title="界面设置"></a>界面设置</h2><h3 id="sd-vae显示"><a href="#sd-vae显示" class="headerlink" title="sd_vae显示"></a>sd_vae显示</h3><p>在<code>Setting-&gt;Show all pages</code>中找到<code>Quicksetting list</code>，在其中加上<code>sd_vae</code>，如下图所示：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/sd_vae.png" alt="sd_vae"></p>
<p>随后点击<code>Apply settings</code>之后<code>Reload UI</code>，可以看到页面上出现VAE的选项：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/sd_vae1.png" alt="sd_vae"></p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="Stable-Diffusion"><a href="#Stable-Diffusion" class="headerlink" title="Stable Diffusion"></a>Stable Diffusion</h3><ol>
<li><a href="https://www.liblibai.com/modelinfo/f1f4d04417044118a53c777ec00d1c98">SHMILY梦幻水彩</a>，水彩风图像。</li>
<li><a href="https://civitai.com/models/36520">ghostmix_v20Bakedvae</a>，类似攻壳机动队图像。</li>
<li><a href="https://civitai.com/models/47274">XXMix_9realistic</a>，景深风格人像居多。</li>
<li><p>majicMIX系列，如：</p>
<ol>
<li><a href="https://civitai.com/models/41865/majicmix-fantasy">majicMIX fantasy 麦橘幻想</a></li>
<li><a href="https://civitai.com/models/56967?modelVersionId=89855">majicMIX lux 麦橘奇幻</a></li>
<li><a href="https://civitai.com/models/43331?modelVersionId=48289">majicMIX realistic 麦橘写实</a></li>
</ol>
</li>
</ol>
<h3 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h3><p><code>vae-ft-mse-840000-ema-pruned-vae.pt</code>：该模型可以使生成的图片对比度更高，色彩更加丰富。</p>
<p>下面是例子：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/woVAE1__woVAE2__wVAE1__wVAE2.png" alt="woVAE1__woVAE2__wVAE1__wVAE2"></p>
<h3 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h3><ol>
<li><a href="https://civitai.com/models/58390">add_detail</a>，用以增加细节。</li>
<li><a href="https://civitai.com/models/82098">more_detail</a>，用来增加细节。</li>
<li><a href="https://civitai.com/models/106312?modelVersionId=114163">Jellyfish-noise</a>，用来生成水母森林。</li>
<li><a href="https://civitai.com/models/28182?modelVersionId=62833">loong2-000015</a>，用来生成中国龙。</li>
<li><a href="https://civitai.com/models/47909?modelVersionId=52506">NijiExpressive_v2</a>，用来生成忍者风格的人物。</li>
<li><p><a href="https://civitai.com/models/13941/epinoiseoffset">epi_noiseoffset</a>，提高暗场景下单的对比度。</p>
</li>
<li><p><a href="https://civitai.com/models/11722/iu">iu_v35</a>，画的是IU。</p>
</li>
<li><a href="https://civitai.com/models/53601/nwsjrealistic">BeautyNwsjMajic2-01</a>，画的是娜乌斯嘉。</li>
<li><a href="https://civitai.com/models/34855?modelVersionId=41111">sxz-death-knight</a>，魔兽世界的骑士风格。</li>
<li><a href="https://huggingface.co/casque/hipoly_3dcg_v7-epoch-000012">hipoly_3dcg_v7-epoch</a>，可以增加手部出图的稳定性。</li>
</ol>
<h3 id="LyCORIS-1"><a href="#LyCORIS-1" class="headerlink" title="LyCORIS"></a>LyCORIS</h3><ol>
<li><a href="https://civitai.com/models/47085/envybetterhands-locon">GoodHand</a>，用来增加手部稳定出图概率。</li>
</ol>
<h3 id="embedding"><a href="#embedding" class="headerlink" title="embedding"></a>embedding</h3><p>大部分是在做手，一部分在做肢体。</p>
<ol>
<li><a href="https://civitai.com/models/4629?modelVersionId=126470">ng_deepnegative_v1_75t</a></li>
<li><a href="https://civitai.com/models/11772">verybadimagenegative_v1.3</a></li>
<li><a href="https://civitai.com/models/7808?modelVersionId=25820">easynegative</a></li>
<li><a href="https://civitai.com/models/16993">badhandv4</a></li>
<li><a href="https://civitai.com/models/116230">badhandsv5-neg</a></li>
<li>Hires.fix</li>
</ol>
<p>上采样方法：</p>
<h4 id="4x-UltrSharp"><a href="#4x-UltrSharp" class="headerlink" title="4x-UltrSharp"></a>4x-UltrSharp</h4><p><a href="https://civitai.com/models/116225/4x-ultrasharp">4x-UltrSharp</a></p>
<h4 id="R-ESRGAN-4x-Anime6B"><a href="#R-ESRGAN-4x-Anime6B" class="headerlink" title="R-ESRGAN 4x+Anime6B"></a>R-ESRGAN 4x+Anime6B</h4><h4 id="8x-NMKD-Superscale-150000-G"><a href="#8x-NMKD-Superscale-150000-G" class="headerlink" title="8x_NMKD-Superscale_150000_G"></a>8x_NMKD-Superscale_150000_G</h4><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="Inpainting"><a href="#Inpainting" class="headerlink" title="Inpainting"></a>Inpainting</h3><p>尽量使用和 <code>text2img</code> 相同的 prompt、negative prompt 和 sampling method 等。</p>
<h3 id="Outpainting"><a href="#Outpainting" class="headerlink" title="Outpainting"></a>Outpainting</h3><p>一种使用场景是当相同的prompt无法在指定图像长宽比例生成对应的内容时，如 <code>1024X1024</code> 产生正常内容，而相同的prompt在 <code>1024x1536</code> 中可能产生多个主体，此时可以使用Outpainting进行在 <code>1024X1024</code> 的大小进行外拓展，以在期望图像比例达到类似的效果。</p>
<p>一种方法是在 <code>img2img</code> 的 tab 中使用 <code>script</code> 的 <code>Outpainting mk2</code>，如下图设置将 <code>1024X1024</code> 的图片展成 <code>1024X1536</code> 的图片：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Outpainting mk2.png" alt="Outpainting mk2"></p>
<p>结果图如下，当然我对其中不合理的倒影部分进行了 Inpainting ：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/after outpainting__before outpainting.png" alt="after outpainting__before outpainting"></p>
<p>Gif效果展示：</p>
<p><img src="/2023/08/04/%E5%9C%A8stable-diffusion-webui%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E7%8E%A9%E8%80%8D/Effect of outpainting.gif" width="50%"></p>
<h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><h3 id="prompt-matrix"><a href="#prompt-matrix" class="headerlink" title="prompt matrix"></a>prompt matrix</h3><p>貌似是使用在prompt中使用语法<code>|prompt1 | prompt2 | prompt3</code>，然后进行抽奖。</p>
<h2 id="手部调整"><a href="#手部调整" class="headerlink" title="手部调整"></a>手部调整</h2><p>参考：<a href="https://www.youtube.com/watch?v=f7zanMM2FEc">https://www.youtube.com/watch?v=f7zanMM2FEc</a></p>
<h3 id="embedding-textural-inversion"><a href="#embedding-textural-inversion" class="headerlink" title="embedding(textural inversion)"></a>embedding(textural inversion)</h3><p>有的是面向通用模型，有的只是针对特定模型，结合prompt matrix进行。</p>
<h3 id="LyCORIS-LORA"><a href="#LyCORIS-LORA" class="headerlink" title="LyCORIS/LORA"></a>LyCORIS/LORA</h3><p>基于LyCORIS或者LORA模型控制：</p>
<p>如：</p>
<ol>
<li><a href="https://civitai.com/models/47085/envybetterhands-locon">GoodHand</a>系列</li>
</ol>
<h3 id="My-Case"><a href="#My-Case" class="headerlink" title="My Case"></a>My Case</h3><p>[1] <a href="/2023/08/20/在stable-diffusion修复手姿的原理、分析与实践">在stable diffusion修复手姿的原理、分析与实践</a></p>
]]></content>
      <categories>
        <category>computer vision</category>
      </categories>
      <tags>
        <tag>stable diffusion</tag>
      </tags>
  </entry>
  <entry>
    <title>爱因斯坦求和约定的pytorch用法</title>
    <url>/2023/04/12/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E6%B1%82%E5%92%8C%E7%BA%A6%E5%AE%9A%E7%9A%84pytorch%E7%94%A8%E6%B3%95-torch-einsum/</url>
    <content><![CDATA[<p>Reference: </p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/361209187">https://zhuanlan.zhihu.com/p/361209187</a></li>
</ol>
<span id="more"></span>
<p>导入库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<h1 id="torch-einsum"><a href="#torch-einsum" class="headerlink" title="torch.einsum"></a>torch.einsum</h1><ol>
<li><strong>提取矩阵对角线元素</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ii-&gt;i&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">Out：</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],      -&gt;     tensor([<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>矩阵转置</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;ji&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">Out：</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],     -&gt;     tensor([[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])                   [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">                                      [<span class="number">2</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>permute 高维张量转置</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)      <span class="comment"># torch.Size([2, 3, 4])</span></span><br><span class="line">torch.einsum(<span class="string">&#x27;...ij-&gt;...ji&#x27;</span>, a)          <span class="comment"># torch.Size([2, 4, 3])</span></span><br><span class="line"></span><br><span class="line">Out：</span><br><span class="line">tensor([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],       -&gt;     tensor([[[ <span class="number">0</span>,  <span class="number">4</span>,  <span class="number">8</span>],</span><br><span class="line">         [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],                       [ <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">9</span>],</span><br><span class="line">         [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],						 [ <span class="number">2</span>,  <span class="number">6</span>, <span class="number">10</span>],</span><br><span class="line">        [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],                       [ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">11</span>]],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],                      [[<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">         [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])                     [<span class="number">13</span>, <span class="number">17</span>, <span class="number">21</span>],</span><br><span class="line">                                                 [<span class="number">14</span>, <span class="number">18</span>, <span class="number">22</span>],</span><br><span class="line">                                                 [<span class="number">15</span>, <span class="number">19</span>, <span class="number">23</span>]]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>reduce sum</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;&#x27;</span>, a)</span><br><span class="line"></span><br><span class="line">Out: </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],       -&gt;     tensor(<span class="number">15</span>)</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>矩阵按列/按行求和</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;j&#x27;</span>, a)  <span class="comment"># 行没了</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],      -&gt;     tensor([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij-&gt;i&#x27;</span>, a)  <span class="comment"># 列没了</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],      -&gt;    tensor([ <span class="number">3</span>, <span class="number">12</span>])</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>矩阵向量乘法</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ik, k-&gt;i&#x27;</span>, a, b)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ik, k&#x27;</span>, a, b)  <span class="comment"># 等价形式</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],     *    tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])   -&gt;     tensor([ <span class="number">5</span>, <span class="number">14</span>])</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]) </span><br></pre></td></tr></table></figure>
<ol>
<li><strong>矩阵乘法</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij, jk -&gt; ik&#x27;</span>, a,b)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij, jk&#x27;</span>, a, b)  <span class="comment"># 等价形式</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],   *  tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],  -&gt;   tensor([[<span class="number">20</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])             [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],               [<span class="number">56</span>, <span class="number">68</span>, <span class="number">80</span>, <span class="number">92</span>]])</span><br><span class="line">                                [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>向量内积</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;i, i-&gt;&#x27;</span>, a, b)</span><br><span class="line">torch.einsum(<span class="string">&#x27;i, i&#x27;</span>, a, b) <span class="comment"># 等价形式</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])  *  tensor([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  -&gt;  tensor(<span class="number">14</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>矩阵元素对应相乘并求reduce sum</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">6</span>, <span class="number">12</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij, ij-&gt;&#x27;</span>, a, b)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ij, ij&#x27;</span>, a, b) <span class="comment"># 等价形式</span></span><br><span class="line"></span><br><span class="line">Out:  </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],    *   tensor([[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],    -&gt;  tensor(<span class="number">145</span>)</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])               [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"></span><br><span class="line">torch.einsum(<span class="string">&#x27;ij, ij-&gt;ij&#x27;</span>, a, b)  <span class="comment"># 对应相乘</span></span><br><span class="line">Out:  </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],    *   tensor([[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],    -&gt;  tensor([[ <span class="number">0</span>,  <span class="number">7</span>, <span class="number">16</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])               [ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])               [<span class="number">27</span>, <span class="number">40</span>, <span class="number">55</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>向量外积</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>)</span><br><span class="line">b = torch.arange(<span class="number">3</span>,<span class="number">7</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;i, j-&gt;ij&#x27;</span>, a, b)</span><br><span class="line"></span><br><span class="line">Out: </span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])   *   tensor([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])   -&gt;  tensor([[ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">                                                           [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>],</span><br><span class="line">                                                           [ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>batch 矩阵乘法</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange(<span class="number">30</span>).view(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">b = torch.arange(<span class="number">40</span>).view(<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ijk, ikl-&gt;ijl&#x27;</span>, a, b)  <span class="comment"># torch.Size([2, 3, 4])</span></span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">a -&gt; tensor([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">              [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">              [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]],</span><br><span class="line">             [[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">              [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>],</span><br><span class="line">              [<span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>]]]) </span><br><span class="line"></span><br><span class="line">b -&gt; tensor([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">              [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">              [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">              [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">              [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]],</span><br><span class="line">             [[<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">              [<span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>],</span><br><span class="line">              [<span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">              [<span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>],</span><br><span class="line">              [<span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>]]])</span><br><span class="line"></span><br><span class="line">result -&gt; tensor([[[ <span class="number">120</span>,  <span class="number">130</span>,  <span class="number">140</span>,  <span class="number">150</span>],</span><br><span class="line">                   [ <span class="number">320</span>,  <span class="number">355</span>,  <span class="number">390</span>,  <span class="number">425</span>],</span><br><span class="line">                   [ <span class="number">520</span>,  <span class="number">580</span>,  <span class="number">640</span>,  <span class="number">700</span>]],</span><br><span class="line">                  [[<span class="number">2420</span>, <span class="number">2505</span>, <span class="number">2590</span>, <span class="number">2675</span>],</span><br><span class="line">                   [<span class="number">3120</span>, <span class="number">3230</span>, <span class="number">3340</span>, <span class="number">3450</span>],</span><br><span class="line">                   [<span class="number">3820</span>, <span class="number">3955</span>, <span class="number">4090</span>, <span class="number">4225</span>]]])</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>张量收缩</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">b = torch.randn(<span class="number">11</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">17</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 对 r q 所在维度进行reduce sum，调整其他维度</span></span><br><span class="line">torch.einsum(<span class="string">&#x27;pqrs,tuqvr-&gt;pstuv&#x27;</span>, a, b)  <span class="comment"># torch.Size([2, 7, 11, 13, 17])</span></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>二次变换 (bilinear transformation)</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b = torch.randn(<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>)</span><br><span class="line">c = torch.randn(<span class="number">2</span>,<span class="number">7</span>)</span><br><span class="line">torch.einsum(<span class="string">&#x27;ik, jkl, il-&gt;ij&#x27;</span>, a, b, c)  <span class="comment"># torch.Size([2, 5])</span></span><br></pre></td></tr></table></figure>
<h1 id="einops-rearrange"><a href="#einops-rearrange" class="headerlink" title="einops.rearrange"></a>einops.rearrange</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># suppose we have a set of 32 images in &quot;h w c&quot; format (height-width-channel)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>images = [np.random.randn(<span class="number">30</span>, <span class="number">40</span>, <span class="number">3</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"><span class="comment"># stack along first (batch) axis, output is a single array</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b h w c -&gt; b h w c&#x27;</span>).shape</span><br><span class="line">(<span class="number">32</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># concatenate images along height (vertical axis), 960 = 32 * 30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b h w c -&gt; (b h) w c&#x27;</span>).shape</span><br><span class="line">(<span class="number">960</span>, <span class="number">40</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># concatenated images along horizontal axis, 1280 = 32 * 40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b h w c -&gt; h (b w) c&#x27;</span>).shape</span><br><span class="line">(<span class="number">30</span>, <span class="number">1280</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># reordered axes to &quot;b c h w&quot; format for deep learning</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b h w c -&gt; b c h w&#x27;</span>).shape</span><br><span class="line">(<span class="number">32</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># flattened each image into a vector, 3600 = 30 * 40 * 3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b h w c -&gt; b (c h w)&#x27;</span>).shape</span><br><span class="line">(<span class="number">32</span>, <span class="number">3600</span>)</span><br><span class="line"><span class="comment"># split each image into 4 smaller (top-left, top-right, bottom-left, bottom-right), 128 = 32 * 2 * 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b (h1 h) (w1 w) c -&gt; (b h1 w1) h w c&#x27;</span>, h1=<span class="number">2</span>, w1=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">128</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># space-to-depth operation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rearrange(images, <span class="string">&#x27;b (h h1) (w w1) c -&gt; b h w (c h1 w1)&#x27;</span>, h1=<span class="number">2</span>, w1=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">32</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<h1 id="einops-repeat"><a href="#einops-repeat" class="headerlink" title="einops.repeat"></a>einops.repeat</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a grayscale image (of shape height x width)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = np.random.randn(<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># change it to RGB format by repeating in each channel</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repeat(image, <span class="string">&#x27;h w -&gt; h w c&#x27;</span>, c=<span class="number">3</span>).shape</span><br><span class="line">(<span class="number">30</span>, <span class="number">40</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># repeat image 2 times along height (vertical axis)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repeat(image, <span class="string">&#x27;h w -&gt; (repeat h) w&#x27;</span>, repeat=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">60</span>, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># repeat image 2 time along height and 3 times along width</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repeat(image, <span class="string">&#x27;h w -&gt; h (repeat w)&#x27;</span>, repeat=<span class="number">3</span>).shape</span><br><span class="line">(<span class="number">30</span>, <span class="number">120</span>)</span><br><span class="line"><span class="comment"># convert each pixel to a small square 2x2. Upsample image by 2x</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repeat(image, <span class="string">&#x27;h w -&gt; (h h2) (w w2)&#x27;</span>, h2=<span class="number">2</span>, w2=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">60</span>, <span class="number">80</span>)</span><br><span class="line"><span class="comment"># pixelate image first by downsampling by 2x, then upsampling</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>downsampled = reduce(image, <span class="string">&#x27;(h h2) (w w2) -&gt; h w&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>, h2=<span class="number">2</span>, w2=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repeat(downsampled, <span class="string">&#x27;h w -&gt; (h h2) (w w2)&#x27;</span>, h2=<span class="number">2</span>, w2=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure>
<h1 id="einops-reduce"><a href="#einops-reduce" class="headerlink" title="einops.reduce"></a>einops.reduce</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.random.randn(<span class="number">100</span>, <span class="number">32</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment"># perform max-reduction on the first axis</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = reduce(x, <span class="string">&#x27;t b c -&gt; b c&#x27;</span>, <span class="string">&#x27;max&#x27;</span>)</span><br><span class="line"><span class="comment"># same as previous, but with clearer axes meaning</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = reduce(x, <span class="string">&#x27;time batch channel -&gt; batch channel&#x27;</span>, <span class="string">&#x27;max&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.random.randn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># 2d max-pooling with kernel size = 2 * 2 for image processing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y1 = reduce(x, <span class="string">&#x27;b c (h1 h2) (w1 w2) -&gt; b c h1 w1&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, h2=<span class="number">2</span>, w2=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># if one wants to go back to the original height and width, depth-to-space trick can be applied</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y2 = rearrange(y1, <span class="string">&#x27;b (c h2 w2) h1 w1 -&gt; b c (h1 h2) (w1 w2)&#x27;</span>, h2=<span class="number">2</span>, w2=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> parse_shape(x, <span class="string">&#x27;b _ h w&#x27;</span>) == parse_shape(y2, <span class="string">&#x27;b _ h w&#x27;</span>)</span><br><span class="line"><span class="comment"># Adaptive 2d max-pooling to 3 * 4 grid</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(x, <span class="string">&#x27;b c (h1 h2) (w1 w2) -&gt; b c h1 w1&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, h1=<span class="number">3</span>, w1=<span class="number">4</span>).shape</span><br><span class="line">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># Global average pooling</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(x, <span class="string">&#x27;b c h w -&gt; b c&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>).shape</span><br><span class="line">(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># Subtracting mean over batch for each channel</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x - reduce(x, <span class="string">&#x27;b c h w -&gt; () c () ()&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line"><span class="comment"># Subtracting per-image mean for each channel</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x - reduce(x, <span class="string">&#x27;b c h w -&gt; b c () ()&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>yolo系列核心设计总结与思考</title>
    <url>/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>时间原因没有认真读论文和看代码，看了一下下Up主-<a href="https://space.bilibili.com/18161609"><strong>霹雳吧啦Wz</strong></a>的讲述，记录一下自己认为的yolo多次迭代版本的核心设计，以达到临阵磨枪，不快也光的目的。</p>
<p>论文：</p>
<ol>
<li>【Yolov1】You Only Look Once: Unified, Real-Time Object Detection (2016 CVPR)</li>
<li>【Yolov2】YOLO9000: Better, Faster, Stronger (2017 CVPR)</li>
<li>【Yolov3】YOLOv3: An Incremental Improvement</li>
<li>【Yolov4】Optimal Speed and Accuracy of Object Detection</li>
<li>【Yolov5】Github</li>
<li>【YolovX】YOLOX: Exceeding YOLO Series in 2021</li>
</ol>
<p>总结下来我认为该系列的核心设计有几个方面：</p>
<ol>
<li>数据增强方式</li>
<li>多尺度特征提取网络结构的设计、多尺度检测头</li>
<li>多尺度anchor（部分版本）</li>
<li>定位损失函数的设计</li>
</ol>
<span id="more"></span>
<h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>个人总结Yolo系列比较work的地方，包括</p>
<ul>
<li>数据增强：Mosaic，Copy-Paste、Random affine、Mixup、Albumentations、Augment HSV(Hue, Saturation, value)</li>
<li>网络结构：特征提取层（残差）、多尺度特征提取（SPP，SPPF）、多尺度检测头（通过聚类得到的anchor template）</li>
<li>损失函数：IoU、GIoU、DIoU、CIoU，Focus Loss.</li>
<li>定位纠正：Eliminate grid sensititive-使纠正区间在合理范围，IoU threhold-提高正样本数</li>
<li>训练策略：multi-scale training，</li>
</ul>
<h1 id="Yolov1"><a href="#Yolov1" class="headerlink" title="Yolov1"></a>Yolov1</h1><p>Yolov1系列的核心想法是将图像分成 <script type="math/tex">S\times S</script> 网格(实操中通过32倍下采样成 <script type="math/tex">S\times S</script> 的像素点的特征图)，在计算损失阶段，每个网格只计算中心点落在该网格的物体的定位和分类误差。</p>
<p>往往每个网格都要需要负责预测$B$个定位框，而对于每个框要预测5个参数，分别是bounding box的的位置(4个参数)，用对角线的两个点<script type="math/tex">(bx_1, by_1, bx_2, by_2)</script> 来表示或者用一个点加框的宽高来表示<script type="math/tex">(bx, by, width, height)</script>，还有1个参数是判断bounding box是否含物体的置信度（往往理解为预测的框和ground truth的IOU）。</p>
<p>除此之外每个网格还要负责预测这个网格中 <script type="math/tex">C</script> 个类别的概率，代表该网格中物体的分类结果，当然这样的设计也是Yolov1存在的缺陷，即每个网格中只能预测最多1个物体，同时每个网格预测的定位框是anchor-free的。</p>
<p>在Yolov1的实验中，$B$ 取 2，$C$ 取 20，如下图所示：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/2.png" alt="2"></p>
<p>Yolov1的backbone是全卷积网络加全连接检测头，没有考虑梯度消失和尺度的问题。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/1.png" alt="1"></p>
<p>从损失函数的设计上，是定位损失、置信度损失和分类损失的加权和，用的均是误差平方和，其中定位损失的w和h使用了开发的误差平方和是为了降低定位损失对大尺寸物体的敏感度(权重)，即在相同的偏置x，y的定位误差上，大物体的总体定位误差更小。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/3.png" alt="3"><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/4.png" alt="4"></p>
<h1 id="Yolov2"><a href="#Yolov2" class="headerlink" title="Yolov2"></a>Yolov2</h1><p>改进的点：</p>
<ul>
<li>Batch Normalization (代替dropout对模型进行正则化)</li>
<li>High Resolution Classifier (<script type="math/tex">224\times 224\rightarrow 448\times 448</script>)</li>
<li><strong>Convolutional With Anchor Boxes</strong></li>
<li><strong>Dimension Clusters</strong></li>
<li><strong>Direct location prediction</strong></li>
<li>Fine-Graied Features</li>
<li>Multi-Scale Training</li>
</ul>
<p>Yolov2的核心思想是：通过K-means聚类的方法获取数据集的目标的尺寸的先验信息作为anchor template（论文中K=5），于是通过聚类得以得到不同尺度大小的anchor template，下一步是要把anchor template应用到定位中，对于每个网格都有 K 个anchor template，其中心位于网格左上角，希望网络来学习anchor长和宽的调整，以及anchor中心位置的调整。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/5.png" alt="5"></p>
<p>而对于中心位置的调整，希望通过损失函数的设计使每个网格中anchor位置的偏移不超出网格的位置，这样的设计是为了让每个网格的anchor仅负责该网格的定位，其通过以下方式来实现，其中<script type="math/tex">(t_x, t_y, t_w, t_h)</script> 为网络的输出，而 <script type="math/tex">(b_x, b_y, b_w, b_h)</script> 为调整后用来计算定位损失的参数，<script type="math/tex">\sigma</script> 为sigmoid函数，将输入映射到 <script type="math/tex">0\sim1</script> 的范围，而<script type="math/tex">(c_x, c_y)</script> 表示当前网格左上角像素点较整个图像的左上角的偏移，如上图为例，<script type="math/tex">c_x, c_y</script>的范围是<script type="math/tex">[0,2]</script>。<script type="math/tex">(p_w, p_h)</script>表示为聚类得到的不同anchor的长宽，使用一个平滑的函数 <script type="math/tex">e^x</script> 进行微调（但是 <script type="math/tex">e^x</script> 的值域是不受限的，可能会出现无穷的情况，这在Yolov5中进行修改），同样分类损失结合IOU也通过sigmoid进行约束网络预测的 <script type="math/tex">t_o</script> 的范围。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/11.png" alt="11"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/6.png" width="50%"></p>
<p><strong>网络结构</strong>：采用了和ResNet类似的DarkNet作为backbone，对高尺度的信息做了PassThrough Layer特征重排降维，最后通过concatenation融合高低尺度特征。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/8.png" alt="8"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/7.png" alt="7"></p>
<h1 id="Yolov3"><a href="#Yolov3" class="headerlink" title="Yolov3"></a>Yolov3</h1><p>我认为Yolov3的核心是多尺度anchor template和多尺度检测头的提出，至于损失函数的修改并不是很重要。</p>
<p>网络结构：backbone去Maxpooling，多尺度检测头的引入，有大中小三个不同尺度的分类头，其中每个分类头又有3个不同anchor，所以K-means通过聚类得到9个不同尺度的anchor</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/9.png" alt="9"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/10.png" alt="10"></p>
<p>损失函数的设计</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/12.png" alt="12"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/13.png" alt="13"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/14.png" alt="14"></p>
<h1 id="Yolov3-SPP"><a href="#Yolov3-SPP" class="headerlink" title="Yolov3-SPP"></a>Yolov3-SPP</h1><p>Yolov3-SPP的核心修改是以Mosaic为主的数据增强方式和新的IoU定位损失函数。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/15.png" alt="15"></p>
<p>网络结构：SPP模块</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/16.png" alt="16"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/17.png" alt="17"></p>
<p>定位损失的演变：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/18.png" alt="18"><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/19.png" alt="19"></p>
<p>GIoU：下图<script type="math/tex">A_c</script> 表示中蓝筐的面积，$U$ 表示两个bounding box交集的面积；</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/20.png" alt="20"></p>
<p>当目标框水平或者竖直平行的时候，GIoU Loss退化为IoU Loss</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/21.png" width="50%"></p>
<p>DIoU: 在下图的case中IoU Loss和GIoU Loss不能很好地区分三种不同的定位结果</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/22.png" alt="22"></p>
<p>DIoU加上定位框的中心点的考虑，加快收敛速度。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/23.png" alt="23"></p>
<p>CIoU：提出一个优秀的回归定位损失应该考虑到3种几何参数：重叠面积（IoU）、中心店距离（第二项）、长宽比(第三项)。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/24.png" alt="24"></p>
<p><strong>Focal Loss</strong>用来解决检测中，正负样本数量极度不平衡的问题，其中 <script type="math/tex">\alpha</script> 是用来平衡正负样本权重的参数，<script type="math/tex">p_t</script> 是用来平衡难易样本权重的参数，对难分的样本给予更大的权重。</p>
<script type="math/tex; mode=display">
\text{FL}(p_t)=-\alpha_t(1-p_t)^\gamma \log(p_t).
\text{FL}(p)\\
\begin{cases}
-\alpha(1-p)^\gamma \log(p)\;\;\text{if }y=1 \\
-(1-\alpha)p^\gamma \log(1-p)\;\;\text{otherwise}
\end{cases}</script><p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/25.png" alt="25"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/26.png" alt="26"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/27.png" alt="27"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/28.png" alt="28"></p>
<h1 id="Yolov4"><a href="#Yolov4" class="headerlink" title="Yolov4"></a>Yolov4</h1><p><strong>核心修改：Eliminate grid sensititive</strong>，<strong>IoU threhold(match positive samples)</strong></p>
<p>Yolov4 网络结构：1. CSPDarknet53作为backbone。 2. SPP，PAN的模块。3. YOLOv3的检测头。</p>
<p>网络结构：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/30.png" alt="30"></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/31.png" alt="31"></p>
<p>模块：SPP模块</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/32.png" alt="32"></p>
<p>模块：Modified PAN模块，用concat融合</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/33.png" alt="33"></p>
<p><strong>优化策略：Eliminate grid sensitivity</strong></p>
<p>这个策略要解决的问题是，计算定位框中心点偏移的时候，通过sigmoid函数将偏移范围限定在sigmoid的值域<script type="math/tex">[0,1]</script>的范围，但是对于边界情况，需要网络输出的<script type="math/tex">(t_x, t_y)</script> 趋近于无穷才能使sigmoid后的输出趋近于1。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/34.png" alt="34"></p>
<p>为了解决这个问题，加入缩放因子scale使sigmoid值域扩充为<script type="math/tex">[-0.5,1.5]</script>的范围</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/35.png" alt="35"></p>
<p><strong>优化策略：IoU threhold(match positive samples)</strong></p>
<p>原来grouth truth的定位框只会分配给其中心点所在的网络的anchor template进行预测，但是通过上述策略调整了偏移的值域之后，可以将ground truth分配给更多网格的anchor tenmplate进行预测。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/36.png" alt="36"></p>
<p>基于上这样的策略，可以将ground truth的定位框分配给更多网格的anchor来进行预测，以此增加更多的正样本。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/37.png" alt="37"></p>
<h1 id="Yolov5"><a href="#Yolov5" class="headerlink" title="Yolov5"></a>Yolov5</h1><p>核心设计：模块SPP到SSPF的转变</p>
<p>网络结构：1. CSP-Darknet53作为backbone。2. SPPF，CSP-PAN作为框架。3. Yolov3的检测头</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/38.png" alt="38"></p>
<p>提速模块的设计：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/41.png" alt="41"></p>
<p>将模块SPP修改为SSPF：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/39.png" alt="39"></p>
<p>除了Mosaic数据增强还有<strong>Copy-paste</strong>数据增强策略：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/40.png" alt="40"></p>
<p>随机仿射变换<strong>Random affine</strong>（旋转、平移、错切）：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/42.png" alt="42"></p>
<p><strong>Mixup</strong>，将两幅图按照不同透明度合并</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/43.png" alt="43"></p>
<p><strong>Albumentations</strong>：通过滤波、直方图均衡化以及改变图像质量等等</p>
<p><strong>Augment HSV(Hue, Saturation, value)</strong>：色度、饱和度、对比度</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/44.png" alt="44"></p>
<p>随机水平翻转 Random horizontal flip</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/45.png" alt="45"></p>
<p>训练策略：</p>
<ul>
<li>Multi-scale training(0.5x-1.5x) 多尺度训练</li>
<li>AutoAnchor(For trainining custom data) 重新聚类得到新的anchor template</li>
<li>Warmup and Cosine LR scheduler</li>
<li>EMA(Exponential Moving Average)</li>
<li>Mixed precision 混合精度训练，加速和压缩</li>
<li>Evolve hyper-parameter </li>
</ul>
<p><strong>损失函数</strong></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/46.png" alt="46"></p>
<p><strong>平衡不同尺度损失</strong></p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/47.png" width="75%"></p>
<p><strong>消除Grid敏感度</strong></p>
<p>将激活函数转为sigmoid，防止 <script type="math/tex">e^{t_w}</script> 值域过大造成数值爆炸带来的损失危难、训练不稳定的问题。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/48.png" width="100%"></p>
<p><strong>匹配正样本</strong></p>
<p>如果<script type="math/tex">r^{max}\le \text{anchor}_t</script>，则匹配成功；否则匹配失败（如下图蓝框超过虚线）</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/49.png" width="100%"></p>
<h1 id="YoloX"><a href="#YoloX" class="headerlink" title="YoloX"></a>YoloX</h1><p>核心修改：Anchor free</p>
<p>网络结构：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/50.png" alt="50"></p>
<p>decoupled detection head</p>
<p>加速收敛，提升AP，参数不共享。所谓的解耦是指将检测头中定位、定位置信度和分类的功能进行解耦。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/51.png" alt="51"></p>
<p>Anchor-Free</p>
<p>每个网格设置几个锚点（没有template），每个锚点对定位框进行预测</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/52.png" alt="52"></p>
<p>损失函数：</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/53.png" alt="53"></p>
<p>正负样本匹配SimOTA《Optimal transport assignment for object detection》，目的是将匹配正负样本的过程看成一个最优传输问题。</p>
<p><img src="/2022/09/29/yolo%E7%B3%BB%E5%88%97%E6%A0%B8%E5%BF%83%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/54.png" alt="54"></p>
]]></content>
      <categories>
        <category>computer vision</category>
      </categories>
      <tags>
        <tag>image detection</tag>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>Study of optical flow</title>
    <url>/2022/07/14/Study-of-optical-flow/</url>
    <content><![CDATA[<p>记录几种常用的光流方法的原理和思想</p>
<p>参考了</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1q34y1B7f5?spm_id_from=333.337.search-card.all.click&amp;vd_source=b8e37940c9da27e6f97ee447c25575bf">光流法-Optical Flow</a></li>
<li><a href="https://www.bilibili.com/video/BV12b4y1m7CY?spm_id_from=333.337.search-card.all.click&amp;vd_source=b8e37940c9da27e6f97ee447c25575bf">光流估计概念及算法介绍</a></li>
<li><a href="https://blog.csdn.net/qq_41368247/article/details/82562165">计算机视觉—光流法(optical flow)简介</a></li>
<li><a href="https://blog.csdn.net/u011144940/article/details/53913312">Harris角点检测</a></li>
<li><a href="https://en.wikipedia.org/wiki/Horn%E2%80%93Schunck_method">Horn-Schunck_method</a></li>
<li><a href="https://blog.csdn.net/hhyh612/article/details/79216021">Horn-Schunck光流算法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/42537928">啥是TV-L1 OpticalFlow</a></li>
</ul>
<span id="more"></span>
<h2 id="Motion-field"><a href="#Motion-field" class="headerlink" title="Motion field"></a>Motion field</h2><p>考虑在某个场景下，物体朝着三维空间的某个方向上移动，我们通过相机将物体的运动投影到图像屏幕的平面上形成视频，我们会从视频看到物体的运动方向。当物体在相机前移动时，图像中会有相应的更改。 因此，如果对象上的点 <script type="math/tex">p_o</script> 以速度 <script type="math/tex">v_o</script> 移动，则可以将成像点 <script type="math/tex">p_i</script> 看成以速度 <script type="math/tex">v_i</script> 在图像平面上的运动。 所有这些三维空间运动速度投影在二维图像平面的向量的集合形成了运动场(motion field)。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/2.png" alt="1"></p>
<p><img src="/2022/07/14/Study-of-optical-flow/1.png" alt="3"></p>
<p>然而我们想通过物体在视频中的移动速度来推导物体在三维空间中的移动速度是不现实的。原因如下，在一个很短的时间段 <script type="math/tex">\delta t</script> 内，场景中物体的速度为 <script type="math/tex">v_0=\frac{dr_0}{dt}</script> 以及图像的速度 <script type="math/tex">v_i=\frac{dr_i}{dt}</script>，我们想要关联这两者的关系。根据位置关系我们能得到以下信息：</p>
<script type="math/tex; mode=display">
\frac{r_i}{f}=\frac{r_0}{r_0\cdot z}</script><p>其中 <script type="math/tex">r_0\cdot z</script> 表示 <script type="math/tex">r_0</script> 在 $z$ 轴上的投影。</p>
<p>图像(运动场)的速度为 (<a href="https://www.cse.psu.edu/~rtc12/CSE486/lecture22_6pp.pdf">https://www.cse.psu.edu/~rtc12/CSE486/lecture22_6pp.pdf</a> 有一些更详细的)：</p>
<script type="math/tex; mode=display">
v_i=\frac{dr_i}{dt}=\frac{\frac{f\cdot r_0}{r_0\cdot z}}{dt}=f\frac{(r_0\cdot z)v_0-(v_0\cdot z)r_0}{(r_0\cdot z)^2}=f\frac{(r_0\times v_0)\times z}{(r_0\cdot z)^2}</script><p>然而在绝大部分情况下，我们并不能直接通过上式来计算物体的运动场。退而求其次，我们只能通过计算视频光流（optical flow）对物体的运动场进行估计。在理想情况下，光流估计=运动场。然而，也有一些场景光流估计不等于运动场，比如下图中左图是一个单侧光源照射在一个表面质地相同的旋转的球体上，无论球体旋转到什么位置，其反射的光线在相机上成像都是相同的，此时物体的运动场存在，然而没有光流。下图右图中，存在一个围绕静止球体旋转的单侧光源，此时物体并没有旋转，而且其反射的光线在相机上的成像随着光源的旋转而改变，此时物体没有运动场存在，但是却有光流。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/3.png" alt="3"></p>
<p>又如下图中，旋转灯的运动方向是横向朝右的，而其呈现出来的光流方向却是纵向向下的</p>
<p><img src="/2022/07/14/Study-of-optical-flow/4.gif" alt="4"></p>
<p>同样，在下面两幅图中，图像的纹理并没有移动，而人眼却能观察到光流。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/5.png" alt="5"></p>
<p><img src="/2022/07/14/Study-of-optical-flow/6.png" alt="6"></p>
<h2 id="Optical-flow"><a href="#Optical-flow" class="headerlink" title="Optical flow"></a>Optical flow</h2><p>所谓的光流(optical flow)指的是物体或场景相对观测者（相机）运动引起的，往往将在连续帧图像上的特定坐标点上的亮度变化定义为该坐标点的光流矢量，对图像上每个坐标点都计算其光流矢量，则构成图像的光流场，我们希望用光流场来估计物体的运动场，计算光流的算法主要分为稀疏光流算法(sparse optical flow)和密集光流(dense optical flow)两类，常用的光流算法主要有以下几种：</p>
<ul>
<li>Lucas-Kanade(LK)光流法 (稀疏光流)</li>
<li>Horn-Schunck算法</li>
</ul>
<h3 id="重要假设"><a href="#重要假设" class="headerlink" title="重要假设"></a>重要假设</h3><p>基于光流的算法研究往往围绕着以下假设开始建模：</p>
<p><strong>1. 光强恒定假设</strong></p>
<p><strong>2. 瞬时移动假设</strong></p>
<p><img src="/2022/07/14/Study-of-optical-flow/7.png" alt="7"></p>
<p>考虑 <script type="math/tex">t</script> 时刻，图像某点在坐标 <script type="math/tex">(x, y)</script> 上的强度(intensity)为 <script type="math/tex">I(x,y,t)</script>，在一个很短的时间间隔 <script type="math/tex">\delta t</script> 后，该点移动到不远处坐标 <script type="math/tex">(x+\delta x, y+\delta y)</script>，其中 <script type="math/tex">\delta</script> 表示一个很小的值，其强度为 <script type="math/tex">I(x+\delta x, y +\delta y, t+\delta t)</script>，在该光强恒定假设中，该点在不同时刻的强度恒定不变：</p>
<script type="math/tex; mode=display">
I(x,y,t)=I(x+\delta x,y+\delta y,t+\delta t)</script><p>将右式进行一阶泰勒展开可得：</p>
<script type="math/tex; mode=display">
I(x+\delta x,y+\delta y,t+\delta t)=I(x,y,t)+\frac{\partial I}{\partial x}\delta x+\frac{\partial I}{\partial y}\delta y+\frac{\partial I}{\partial t}\delta t</script><p>PS：泰勒展开的原式为：</p>
<script type="math/tex; mode=display">
f(x)=\frac{x_0}{0!}+\frac{f'(x_0)}{1!}(x-x_0)+\frac{f''(x_0)}{2!}(x-x_0)^2+...+\frac{f^{n}(x_0)}{n!}(x-x_0)^n+o(x-x_0)</script><p>将一阶泰勒展开代入上式可以得到：</p>
<script type="math/tex; mode=display">
I(x,y,t)=I(x,y,t)+\frac{\partial I}{\partial x}\delta x+\frac{\partial I}{\partial y}\delta y+\frac{\partial I}{\partial t}\delta t\\

=> \,\,\frac{\partial I}{\partial x}\delta x+\frac{\partial I}{\partial y}\delta y+\frac{\partial I}{\partial t}\delta t=0\\

=>\,\,\frac{\partial I}{\partial x}\frac{\delta x}{\delta t}+\frac{\partial I}{\partial y}\frac{\delta y}{\delta t}+\frac{\partial I}{\partial t}\frac{\delta t}{\delta t}=0</script><p>令 <script type="math/tex">u=\frac{\delta x}{\delta t}, v=\frac{\delta y}{\delta t}</script> 分别表示光流分别为沿 $x$ 轴与 $y$ 轴的速度矢量，<script type="math/tex">I_x=\frac{\partial I}{\partial x}, I_y=\frac{\partial I}{\partial y}, I_t=\frac{\partial I}{\partial t}</script>分别表示为图像中像素点的灰度沿 $x, y, t$ 方向的偏导数。在具体操作中，<script type="math/tex">(I_x, I_y, I_t)</script>可以很容易的从连续的两帧图像中计算出来。如下图所示，图像中像素点的灰度沿着 $x$ 方向的偏导数 <script type="math/tex">I_x</script> 为右边四个方块减去左边四个方块的均值，同理 <script type="math/tex">I_y</script> 为上面四个方块减去下面四个方块的均值，<script type="math/tex">I_t</script> 为后面四个方块减去正面四个方块的均值。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/8.png" alt="8"></p>
<p>我们现在有了这样的约束方程：</p>
<script type="math/tex; mode=display">
I_xu+I_yv+I_t=0</script><p>如下图所示，由于 <script type="math/tex">I_x,I_y,I_t</script> 已知，而 <script type="math/tex">u,v</script> 未知，对于某点坐标的光流矢量 <script type="math/tex">\text{u}(u,v)</script> 我们有下图二维坐标的黄线的约束，当然我们可以将该矢量分解为垂直于约束直线方向和平行于约束直线的方向的两个矢量 <script type="math/tex">u_p</script> 和 <script type="math/tex">u_n</script>。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/9.png" alt="9"></p>
<p>当然我们也可以轻易计算出垂直于约束直线方向的矢量的方向和大小：</p>
<p><img src="/2022/07/14/Study-of-optical-flow/10.png" alt="10"></p>
<p>因此问题的难点在于我们无法计算平行于约束直线的光流分量 <script type="math/tex">u_p</script> 的大小，当然对于约束直线来说，存在一个方程和两个未知数，因此，仅有该约束，光流问题的求解是欠定的（under constrained），即该存在不同满足单一约束的解。从物理意义上，由于我们观察（假设）的是一个很小的区域的图像像素的灰度变化，如下图孔径问题（aperture problem）所示，在孔径中我们观察到的光流的方向是朝着右下角的方向，然而从整体观察来看，其物体实际运动可能是向下或者是向右的。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/11.gif" alt="11"></p>
<p>因此我们需要额外的约束来解决光流估计问题，也就是不同光流估计算法提出的出发点和需要解决的问题。</p>
<h2 id="Lucas-Kanade-LK-光流法"><a href="#Lucas-Kanade-LK-光流法" class="headerlink" title="Lucas-Kanade(LK)光流法"></a>Lucas-Kanade(LK)光流法</h2><p>LK光流法，进一步假设，图像中一个小的窗口中的每个像素，其运动场也就是光流是相同的。用数学的语言表达，在一个大小为 $n\times n$ 的窗口 $W$ 中的所有像素点 <script type="math/tex">(k, l)\in W</script>，其满足：</p>
<script type="math/tex; mode=display">
I_x(k,l)u+I_y(k,l)v+I_t(k,l)=0</script><p>使用矩阵的形式表达如下：</p>
<script type="math/tex; mode=display">
\left[
\begin{array}{1}
I_x(1,1) & I_y(1,1) \\
I_x(k,l) & I_y(k,l) \\
\;\;\;\;\;\vdots & \;\;\;\;\vdots \\
I_x(n,n) & I_y(n,n)
\end{array}
\right]

\left[
\begin{array}{2}
u \\
v
\end{array}
\right]

=

\left[
\begin{array}{3}
I_t(1,1) \\
I_t(k,l) \\
\;\;\;\;\;\vdots\\
I_t(n,n)
\end{array}
\right]
\\
Au=B</script><p>此时约束方程数(<script type="math/tex">n\times n</script>)大于未知数(2)，该问题会变成一个超定问题，解决该超定问题一种方式看成是解线性最小二乘拟合，使得偏差平方和最小。一种快速和简单的方法如下，将上式两边同时左乘上 $A$ 的转置 <script type="math/tex">A^T</script> 得：</p>
<script type="math/tex; mode=display">
\left[
\begin{array}{1}
\sum_WI_xI_x & \sum_WI_xI_y \\
\sum_WI_xI_y & \sum_WI_yI_y \\
\end{array}
\right]
\left[
\begin{array}{2}
u \\
v
\end{array}
\right]
=
\left[
\begin{array}{2}
-\sum_WI_xI_t \\
-\sum_WI_yI_t
\end{array}
\right]
\\
A^TAu=A^TB</script><p>可以解得：</p>
<script type="math/tex; mode=display">
u=(A^TA)^{-1}A^TB</script><p>其中，<script type="math/tex">A^TA</script> 是一个 <script type="math/tex">2\times2</script> 的矩阵，从拟合效果来说，上式成立存在两个条件：</p>
<ol>
<li><script type="math/tex; mode=display">A^TA$$ 必须是可逆的(invertible)，即其行列式 $$|A^TA|\not= 0</script></li>
<li><script type="math/tex; mode=display">A^TA$$ 必须是适定的(well-conditioned)，如果 $$\lambda_1$$ 和 $$\lambda_2$$ 是 $$A^TA$$ 的特征值，需要满足：
- $$\lambda_1 \gt \epsilon$$ 并且 $$\lambda_2 \gt \epsilon</script><ul>
<li><script type="math/tex; mode=display">\lambda_1 \ge \lambda_2$$ 并且 $$\lambda_1 \not\gg \lambda_2</script></li>
</ul>
</li>
</ol>
<p>如果 <script type="math/tex">\lambda_1</script> 和 <script type="math/tex">\lambda_2</script> 都很小，这说明矩阵的基向量的重要程度很低。如果其中一个特征值 <script type="math/tex">\lambda_1</script> 远大于另一个特征值 <script type="math/tex">\lambda_2</script>，则说明矩阵在一个方向上的基向量很重要，而另一个方向上的基向量重要程度很低。如果这两个条件之一不满足，其求解出来的光流是不准确的。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/12.png" alt="12"></p>
<p>从实际的物理意义来看，如果窗口定位在光滑区域上，由于光滑区域的各方向的梯度都很小，则其矩阵的 <script type="math/tex">\lambda_1</script> 和 <script type="math/tex">\lambda_2</script> 都很小，因此估计的光流是不可靠的。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/13.png" alt="13"></p>
<p>当另一个条件不满足时，其对应的实际物理意义是，窗口定位在边缘的区域上，则垂直于边的梯度很大，平行于边的梯度很小，这样会产生矩阵一个特征值 <script type="math/tex">\lambda_1</script> 远大于另一个特征值 <script type="math/tex">\lambda_2</script> 的结果，从上面的图可以得知，这样估计得到的光流也是不可靠的。<strong>说明了即使是适定问题，其任然有可能是个病态问题，体现在其输入端极小的误差，也可能导致输出值的巨大误差。</strong></p>
<p>那么什么样的区域对于光流的估计是更为准确的呢？结果是窗口定位在富含纹理的区域，这种区域各方向的梯度都比较大而且多样，得到的特征值都比较大，估计的光流较为准确。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/14.png" alt="14"></p>
<p>当然物理意义上也可以认为是Harris角点检测成立的条件，本质上是用 <script type="math/tex">A^TA</script> 的特征值 <script type="math/tex">\lambda_1、 \lambda_2</script> 来分类图像中平滑、边缘、角点的区域。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/15.png" alt="15"></p>
<p>因此LK算法在平滑和边缘的区域表现较差，而在角点或者梯度丰富的区域表现得较好。</p>
<h2 id="Horn-Schunck-HS-光流法"><a href="#Horn-Schunck-HS-光流法" class="headerlink" title="Horn-Schunck(HS)光流法"></a><strong>Horn-Schunck</strong>(HS)光流法</h2><p>More details: <a href="http://www.ipol.im/pub/art/2013/20/">http://www.ipol.im/pub/art/2013/20/</a></p>
<p>HS光流法是最早提出来估计光流的方法（之一？），他把光强恒定的假设写成需要优化的损失函数，并加上一个平滑约束，新的约束的出发点是运动场在图像上趋于平稳变化，即速度的变化率趋于零，在该假设下，相邻帧的图像中光流分别为沿 $x$ 轴与 $y$ 轴的速度矢量 $u$ 和 $v$ 随着像素点移动而发生的改变是缓慢的，如果变化过大则给于惩罚，<script type="math/tex">\lambda</script> 是一个用于权衡重要性的超参数：</p>
<script type="math/tex; mode=display">
L=\iint_{image}(I_xu+I_yv+I_t)^2+\lambda(u_x^2+u_y^2+v_x^2+v_y^2)dxdy\\
L=\iint_{image}E_{data}(u,v)+\lambda E_{smoothness}(u,v)dxdy</script><p>目标是为了最小化上述损失函数，其中 <script type="math/tex">u_x</script> 是速度矢量 $u$ 对 $x$ 的偏导 <script type="math/tex">\frac{\partial u}{\partial x}</script>，同理 <script type="math/tex">u_y=\frac{\partial u}{\partial v}, u_x=\frac{\partial v}{\partial x}, u_y=\frac{\partial u}{\partial y}</script>，由此看出HS光流法给出的是一个全局约束。</p>
<p>我们可以通过多维欧拉-拉格朗日方程</p>
<p><img src="/2022/07/14/Study-of-optical-flow/26.png" alt="26"></p>
<p>对其进行求解有：</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial u}-\frac{\partial}{\partial x}\frac{\partial L}{\partial u_x}-\frac{\partial}{\partial y}\frac{\partial L}{\partial u_y}=0  \\
\frac{\partial L}{\partial v}-\frac{\partial}{\partial x}\frac{\partial L}{\partial v_x}-\frac{\partial}{\partial y}\frac{\partial L}{\partial v_y}=0</script><p>其中 <script type="math/tex">L=(I_xu+I_yv+I_t)^2+\lambda(u_x^2+u_y^2+v_x^2+v_y^2)</script>，代入上式后得：</p>
<script type="math/tex; mode=display">
I_x(I_xu+I_yv+I_t)-\alpha^2\Delta u=0\\
I_y(I_xu+I_yv+I_t)-\alpha^2\Delta v=0</script><p>其中 <script type="math/tex">\Delta=\frac{\partial^2}{\partial x^2}+\frac{\partial ^2}{\partial y^2}</script> 是拉普拉斯算子，在实际中，拉普拉斯算子是用有限差分进行数值逼近的，常被写为 <script type="math/tex">\Delta u(x, y)=4(\overline u(x,y)-u(x,y))</script>，其中 <script type="math/tex">\overline u(x,y)</script> 是一个加权平均模板：</p>
<script type="math/tex; mode=display">
\frac{1}{12}
\left(
\begin{array}{1}
1 & 2 & 1\\
2 & -12 & 2\\
1 & 2 & 1
\end{array}
\right)</script><p>用该式替换上式后得：</p>
<script type="math/tex; mode=display">
(I_x^2+4\alpha ^2)u+I_xI_yv=4\alpha^2\overline u-I_xI_t\\
I_xI_yu+(I_y^2+4\alpha^2)v=4\alpha^2\overline v-I_yI_t</script><p>这是一个二元一次线性方程组，可以对图像中的每个像素求解。然而，由于解依赖于光流场的邻近值，所以一旦邻近值被更新，解就必须迭代更新，利用Cramer规则可以推导出一下迭代公式：</p>
<script type="math/tex; mode=display">
u^{k+1}=u^{-k}-\frac{I_x(I_xu^{-k}+I_yv^{-k}+I_t)}{4\alpha^2+I_x^2+I_y^2}\\
v^{k+1}=v^{-k}-\frac{I_y(I_xu^{-k}+I_yv^{-k}+I_t)}{4\alpha^2+I_x^2+I_y^2}\\</script><h2 id="Hierarchical-method-金字塔改进）"><a href="#Hierarchical-method-金字塔改进）" class="headerlink" title="Hierarchical method (金字塔改进）"></a>Hierarchical method (金字塔改进）</h2><p>上述的方法中存在的问题是：</p>
<ol>
<li><strong>鲁棒性较差</strong>，无法准确处理原本图象梯度较大的边界区域；</li>
<li><strong>并没有解决</strong>我们先前提出的针对<strong>变化幅度比较大</strong>情况下如何准确求解光流的问题。于是乎有了Coarse-to-Fine方法：</li>
</ol>
<p>针对光流估计的算法还提出了一个改进算法 (Coarse-to-Fine)，其要解决的问题是，当物体运动速度很快的时候，即连续两帧物体位置差异较大的情况，那么，在完整的分辨率下，光强恒定和瞬时移动的假设将不成立。这个改进方法的想法是，通过降分辨率的方式来使假设成立，因为在低分辨率情况下，物体运动的位置变化变小了，打个比方，物体在原始分辨率图像下运动4px的像素，在1/4分辨率大小的图像上只运动1px的像素，因此在分辨率降低的情况下可以使得原来的光强恒定和瞬时移动的假设成立。为了计算原始分辨率图像下的光流场，如下图所示，先在低分辨率情况下使用光流算法得到图像的光流场，使用仿射变换将光流场转换到中等分辨率的情况下，利用中等分辨率大小的光流场和前一帧的图像计算得到一个中间插值(interpolation)图像，利用插值帧和后一帧的图像计算中等分辨率下的光流场。以此类推，得到原始分辨率下的光流场 。</p>
<p><img src="/2022/07/14/Study-of-optical-flow/17.png" alt="17"></p>
<p>详参考：<a href="https://blog.csdn.net/App_12062011/article/details/51880258?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165854658816782391894059%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165854658816782391894059&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-51880258-null-null.185^v2^control&amp;utm_term=%E5%85%89%E6%B5%81&amp;spm=1018.2226.3001.4450">LK算法改进（金字塔LK）</a></p>
<p>然而，Coarse-to-Fine方法依然有 其局限性：</p>
<p>① 图象分层方法和插值方法的选择对结果有着极大的影响；</p>
<p>② 由于在Coarse的过程中，原本图象中较为精细结构被忽略了，故而导致对精细结构的估算也就不准确。</p>
<h2 id="Zach光流法-TV-L1-Optical-Flow"><a href="#Zach光流法-TV-L1-Optical-Flow" class="headerlink" title="Zach光流法(TV-L1 Optical Flow)"></a>Zach光流法(TV-L1 Optical Flow)</h2><p>More details：<a href="http://www.ipol.im/pub/art/2013/26/">http://www.ipol.im/pub/art/2013/26/</a></p>
<p>HS光流法存在的一个缺点在于其在用二范数惩罚光流矢量的变化率，因此其对于不连续图像序列有很大的惩罚，这使得约束过于强，仅在图像变化方向是连续的时候比较work。因此 TV-L1 光流法为处理连续的图像序列，将约束变成一范数。</p>
<h2 id="Brox光流法"><a href="#Brox光流法" class="headerlink" title="Brox光流法"></a>Brox光流法</h2><p>More details：<a href="http://www.ipol.im/pub/art/2013/21/article_lr.pdf">http://www.ipol.im/pub/art/2013/21/article_lr.pdf</a></p>
<p>加入了梯度恒定的假设即 <script type="math/tex">\nabla I(x+u, y+v, t+1)=\nabla I(x,y,t)</script>，损失函数写成</p>
<script type="math/tex; mode=display">
E_{data}=(I_2(x+u,y+v)-I_1(x,y))^2+\lambda(||\nabla I_2(x+u,y+v)-I_1(x,y)||^2)</script><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="/2022/07/14/Study-of-optical-flow/18.png" alt="18"></p>
<p><img src="/2022/07/14/Study-of-optical-flow/19.png" alt="19"></p>
<h2 id="Source-code-and-paper"><a href="#Source-code-and-paper" class="headerlink" title="Source code and paper"></a>Source code and paper</h2><ol>
<li><a href="http://www.ipol.im/pub/art/2013/20/">Horn and Schunck Optical Flow</a></li>
<li><a href="http://www.ipol.im/pub/art/2013/26/">TV-L1 Optical Flow</a></li>
<li><a href="http://www.ipol.im/pub/art/2013/21/">Robust Optical Flow</a></li>
</ol>
<h2 id="光流的应用"><a href="#光流的应用" class="headerlink" title="光流的应用"></a>光流的应用</h2><h3 id="Optical-Mouse"><a href="#Optical-Mouse" class="headerlink" title="Optical Mouse"></a>Optical Mouse</h3><p><img src="/2022/07/14/Study-of-optical-flow/20.png" alt="20"></p>
<h3 id="Traffic-Monitoring"><a href="#Traffic-Monitoring" class="headerlink" title="Traffic Monitoring"></a>Traffic Monitoring</h3><p><img src="/2022/07/14/Study-of-optical-flow/21.png" alt="21"></p>
<h3 id="Video-Retiming"><a href="#Video-Retiming" class="headerlink" title="Video Retiming"></a>Video Retiming</h3><p><img src="/2022/07/14/Study-of-optical-flow/22.png" alt="22"></p>
<h3 id="Image-Stabilization"><a href="#Image-Stabilization" class="headerlink" title="Image Stabilization"></a>Image Stabilization</h3><p><img src="/2022/07/14/Study-of-optical-flow/23.png" alt="23"></p>
<h3 id="Face-Tracking"><a href="#Face-Tracking" class="headerlink" title="Face Tracking"></a>Face Tracking</h3><p><img src="/2022/07/14/Study-of-optical-flow/24.png" alt="24"></p>
<h3 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h3><p><img src="/2022/07/14/Study-of-optical-flow/25.png" alt="25"></p>
]]></content>
      <categories>
        <category>computer vision</category>
      </categories>
      <tags>
        <tag>optical flow</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下编译opencv4的cuda版本，结合clion的食用方法</title>
    <url>/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>之前在学习cuda和使用opencv来加速图像处理，同时由于用惯了jetbrain系列，所以不想用vs来写代码，于是在配环境的时候看了很多网上的教程踩了很多坑，大概弄了3天才弄好，不过最近又手贱重装了cuda，所以之前编译的包不能用了，重新配置的时候感觉又忘了很多东西，于是决定写一篇博客来记录下之前操作，可能不是很全，重装电脑的时候再补充。</p>
<span id="more"></span>
<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><p>我主机使用的是操作系统x64，GPU是RTX 3080，有的环境太高了反而不好使，因此是如下环境：</p>
<ul>
<li>cuda-toolkit：11.4，下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></li>
<li>cudnn：8.4.1，下载地址：<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></li>
<li>opencv：4.5.5，下载地址：<a href="https://opencv.org/releases/，这里得下载源码">https://opencv.org/releases/，这里得下载源码</a> source</li>
<li>opencv_contrib：4.5.5，下载地址：<a href="https://github.com/opencv/opencv_contrib/tags，该版本要与opencv一致">https://github.com/opencv/opencv_contrib/tags，该版本要与opencv一致</a></li>
<li>cmake：3.19.1，下载地址：<a href="https://cmake.org/download/">https://cmake.org/download/</a></li>
<li>visual Studio build tool：2019，下载地址：<a href="https://visualstudio.microsoft.com/downloads/">https://visualstudio.microsoft.com/downloads/</a></li>
<li>clion：2022.1，下载地址：<a href="https://www.jetbrains.com/zh-cn/clion/download/#section=windows，该编译器要比较新才行，否则无法debug">https://www.jetbrains.com/zh-cn/clion/download/#section=windows，该编译器要比较新才行，否则无法debug</a></li>
</ul>
<h1 id="CUDA-toolkit-amp-amp-cudnn"><a href="#CUDA-toolkit-amp-amp-cudnn" class="headerlink" title="CUDA-toolkit &amp;&amp; cudnn"></a>CUDA-toolkit &amp;&amp; cudnn</h1><h2 id="CUDA安装配置"><a href="#CUDA安装配置" class="headerlink" title="CUDA安装配置"></a>CUDA安装配置</h2><p>CUDA下载安装包后正常安装，安装完毕后重启电脑，随后加一下系统变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\bin</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\libnvvp(不是必须，是解决bug后加的)</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\extras\CUPTI\lib64(不是必须，是解决bug后加的)</span><br></pre></td></tr></table></figure>
<p>能够使用<code>nvidia-smi</code>进行环境则证明安装成功</p>
<h2 id="CUDNN安装配置"><a href="#CUDNN安装配置" class="headerlink" title="CUDNN安装配置"></a>CUDNN安装配置</h2><p>将下载的文件如<code>cudnn-11.4-windows-x64-v8.1.1.33.zip</code>解压后将内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[path]<span class="regexp">/cudnn-windows-x86_64-8.4.1.50_cuda11.6-archive/</span>bin/</span><br><span class="line">[path]<span class="regexp">/cudnn-windows-x86_64-8.4.1.50_cuda11.6-archive/i</span>nclude/</span><br><span class="line">[path]<span class="regexp">/cudnn-windows-x86_64-8.4.1.50_cuda11.6-archive/</span>lib/</span><br></pre></td></tr></table></figure>
<p>分别复制于进行合并</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">C:<span class="string">\Program</span> Files<span class="string">\NVIDIA</span> GPU Computing Toolkit<span class="string">\CUDA\v11.4\bin</span></span><br><span class="line">C:<span class="string">\Program</span> Files<span class="string">\NVIDIA</span> GPU Computing Toolkit<span class="string">\CUDA\v11.4\include</span></span><br><span class="line">C:<span class="string">\Program</span> Files<span class="string">\NVIDIA</span> GPU Computing Toolkit<span class="string">\CUDA\v11.4\lib</span></span><br></pre></td></tr></table></figure>
<p>于 <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\extras\demo_suite</code> 中执行 <code>deviceQuery.exe</code> 若Result显示为PASS则证明安装成功：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/1.png" alt="1"></p>
<h1 id="opencv编译"><a href="#opencv编译" class="headerlink" title="opencv编译"></a>opencv编译</h1><p>可以把opencv_contrib的代码解压到opencv的源码中，并创建一个 <code>vs2019-cuda11-build</code>  文件夹用于存放编译后库，我的目录如下：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">opencv4.5.5</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">vs2019-cuda11-build</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">source</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">3rdparty</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">apps</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">cmake</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">data</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">doc</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">include</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">modules</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">opencv_contrib</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">platforms</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">samples</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">... (other files)</span></span><br></pre></td></tr></table></figure>
<h2 id="第一次configure"><a href="#第一次configure" class="headerlink" title="第一次configure"></a>第一次configure</h2><p>使用 <code>[cmake_path]\path\bin</code> 下的 <code>cmake-gui.exe</code> 的图形化界面进行编译配置，首先选择 <code>source code</code> 和 <code>Where to build the binaries</code> ：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/2.png" alt="2"></p>
<p>点击 <code>configure</code> 后弹出以下窗口，根据自己主机的环境配置进行选择：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/3.png"></p>
<p>点击 <code>Finish</code> 后，第一次 <code>configure</code> 完成之后，过程中会有很多文件大概率下载失败，比如：<code>opencv_videoio_ffmpeg.dll</code> ，窗口有红字提示。</p>
<p>打开 <code>D:/opencv4.5.5/vs2019-cuda11-build/CMakeDownloadLog.txt</code> 看里面的日志</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/4.png"></p>
<p>分析推断下载地址为：<a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg_64.dll，实验检验后，发现下载文件">https://raw.githubusercontent.com/opencv/opencv_3rdparty/4d348507d156ec797a88a887cfa7f9129a35afac/ffmpeg/opencv_videoio_ffmpeg_64.dll，实验检验后，发现下载文件</a> <code>opencv_videoio_ffmpeg_64.dll</code> 后不能直接放入<code>D:\opencv4.5.5\source\3rdparty\ffmpeg</code> 中，需要将其重命名为 <code>20deefbfe023c8b8d11a52e5a6527c6a-opencv_videoio_ffmpeg_64.dll</code> 并放入 <code>D:\opencv4.5.5\source\.cache\ffmpeg</code> 中，让编译程序检验 md5 和自动重命名拷贝。<strong>对后续下载失败的文件皆是如此操作，不再赘述。</strong></p>
<h2 id="第二次configure"><a href="#第二次configure" class="headerlink" title="第二次configure"></a>第二次configure</h2><p>添加 </p>
<p>下面要进行进一步的 <code>configure</code> 配置，在 search 中输入 <code>cuda</code> 并勾选相关选项以支持 cuda：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/5.png"></p>
<p><code>OPENCV_EXTRA_MODULES_PATH</code> 选择 <code>opencv_contrib\modules</code> 所在目录：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/6.png"></p>
<p><code>World</code> 勾选相关选项以支持包的集成。</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/7.png"></p>
<p>再次点击 <code>configure</code> 。</p>
<h2 id="第三次configure"><a href="#第三次configure" class="headerlink" title="第三次configure"></a>第三次configure</h2><p><code>fast</code> 勾选相关选项以支持快速数学运算</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/8.png"></p>
<p><code>CUDA_ARCH_BIN</code> 中可以删除无关的配置加快编译速度，可以从 <code>deviceQuery.exe</code> 的结果中查询到，本机的架构为 <code>8.6</code> 。更多请查看<a href="https://developer.nvidia.com/cuda-gpus#collapseOne">英伟达官网</a>的 <code>CUDA-Enabled GeForce and TITAN Products</code> 中配置详解。</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/9.png"></p>
<p>最后点击 <code>Generate</code> 。</p>
<h1 id="vs-构建"><a href="#vs-构建" class="headerlink" title="vs 构建"></a>vs 构建</h1><p>visual studio在安装时需要勾选 <code>使用c++的桌面开发</code>，安装结束后将 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64</code> 加入环境变量</p>
<h2 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h2><p>于 <code>D:/opencv4.5.5/vs2019-cuda11-build</code> 中用visual studio打开 <code>OpenCV.sln</code> ，于“解决方案资源管理器中”分别找到 <code>CMakeTargets\ALL_BUILD</code> 和 <code>CMakeTargets\INSTALL</code>，选择 <code>Release</code> 下的 <code>x64</code> 模式进行构建。构建成功后会在 <code>D:\opencv4.5.5\vs2019-cuda11-build\install\x64\vc16\bin</code> 下生成 <code>opencv_world455.dll</code> 等文件：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/10.png"></p>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>同样如果选择 <code>Debug</code> 下的 <code>x64</code> 模型进行构建。构建成功后会在 <code>D:\opencv4.5.5\vs2019-cuda11-build\install\x64\vc16\bin</code> 下生成 <code>opencv_world455d.dll</code> 等文件：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/11.png"></p>
<h1 id="Clion中使用"><a href="#Clion中使用" class="headerlink" title="Clion中使用"></a>Clion中使用</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Toolchains"><a href="#Toolchains" class="headerlink" title="Toolchains"></a>Toolchains</h3><p>创建新的 <code>Visual Studio</code> 的环境，<code>Toolset</code> 选择刚刚用于编译 opencv 的 Visual Studio 2019 的位置 <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community</code></p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/12.png"></p>
<h3 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h3><p>分别配置 <code>Release</code> 和 <code>Debug</code> 中的两种 build type：</p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/13.png"></p>
<p><img src="/2022/07/05/windows%E4%B8%8B%E7%BC%96%E8%AF%91opencv4%E7%9A%84cuda%E7%89%88%E6%9C%AC/14.png"></p>
<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><p>参考的 CMakeLists.txt 编写如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Project(CUDA_Freshman CXX C CUDA)</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.17 FATAL_ERROR)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CUDA_STANDARD 14)</span><br><span class="line">set(CUDA_NVCC_FLAGS -gencode arch=compute_86,code=sm_86;-G;-g)</span><br><span class="line">set(CMAKE_NVCC_FLAGS &quot;CMAKE_NVCC_FLAGS -std=c++11&quot;)</span><br><span class="line"></span><br><span class="line">set(OpenCV_DIR E:\\opencv4.5.5\\vs2019-cuda11-build)</span><br><span class="line">set(CUDA_DIR C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2)</span><br><span class="line"></span><br><span class="line">find_package(CUDA REQUIRED)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories(&quot;$&#123;CUDA_INCLUDE_DIRS&#125;&quot;)</span><br><span class="line">include_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)</span><br><span class="line"></span><br><span class="line">file(GLOB_RECURSE CURRENT_HEADERS *.h *.hpp *.cuh)</span><br><span class="line">file(GLOB CURRENT_SOURCES *.cpp *.cu)</span><br><span class="line"></span><br><span class="line">add_executable(matrix_mult $&#123;CURRENT_HEADERS&#125; $&#123;CURRENT_SOURCES&#125;)</span><br><span class="line"></span><br><span class="line">target_link_libraries(matrix_mult $&#123;CUDA_LIBRARIES&#125;)</span><br><span class="line">target_link_libraries(matrix_mult $&#123;OpenCV_LIBRARIES&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/cuda.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cuda;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printCudaDeviceInfo</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出以下信息则证明配置成功</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*** CUDA Device Query (Runtime API) version (CUDART static linking) ***</span><br><span class="line"></span><br><span class="line">Device count: 1</span><br><span class="line"></span><br><span class="line">Device 0: &quot;NVIDIA GeForce RTX 3080&quot;</span><br><span class="line">  CUDA Driver Version / Runtime Version          11.40 / 11.40</span><br><span class="line">  CUDA Capability Major/Minor version number:    8.6</span><br><span class="line">  Total amount of global memory:                 10240 MBytes (10737418240 bytes)</span><br><span class="line">  GPU Clock Speed:                               1.74 GHz</span><br><span class="line">  Max Texture Dimension Size (x,y,z)             1D=(131072), 2D=(131072,65536), 3D=(16384,16384,16384)</span><br><span class="line">  Max Layered Texture Size (dim) x layers        1D=(32768) x 2048, 2D=(32768,32768) x 2048</span><br><span class="line">  Total amount of constant memory:               65536 bytes</span><br><span class="line">  Total amount of shared memory per block:       49152 bytes</span><br><span class="line">  Total number of registers available per block: 65536</span><br><span class="line">  Warp size:                                     32</span><br><span class="line">  Maximum number of threads per block:           1024</span><br><span class="line">  Maximum sizes of each dimension of a block:    1024 x 1024 x 64</span><br><span class="line">  Maximum sizes of each dimension of a grid:     2147483647 x 65535 x 65535</span><br><span class="line">  Maximum memory pitch:                          2147483647 bytes</span><br><span class="line">  Texture alignment:                             512 bytes</span><br><span class="line">  Concurrent copy and execution:                 Yes with 5 copy engine(s)</span><br><span class="line">  Run time limit on kernels:                     Yes</span><br><span class="line">  Integrated GPU sharing Host Memory:            No</span><br><span class="line">  Support host page-locked memory mapping:       Yes</span><br><span class="line">  Concurrent kernel execution:                   Yes</span><br><span class="line">  Alignment requirement for Surfaces:            Yes</span><br><span class="line">  Device has ECC support enabled:                No</span><br><span class="line">  Device is using TCC driver mode:               No</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Device PCI Bus ID / PCI location ID:           1 / 0</span><br><span class="line">  Compute Mode:</span><br><span class="line">      Default (multiple host threads can use ::cudaSetDevice() with device simultaneously)</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version  = 11.40, CUDA Runtime Version = 11.40, NumDevs = 1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>clion</tag>
        <tag>opencv4</tag>
        <tag>cuda</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode的奇怪操作</title>
    <url>/2020/08/01/leetcode%E7%9A%84%E5%A5%87%E6%80%AA%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>写两个字收缩</p>
<span id="more"></span>
<h1 id="快速幂取余"><a href="#快速幂取余" class="headerlink" title="快速幂取余"></a>快速幂取余</h1><p>题目：<a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/">剑指 Offer 14- II. 剪绳子 II</a>、<a href="https://leetcode-cn.com/problems/powx-n/">50. Pow(x, n)</a></p>
<p>定理：</p>
<ul>
<li><script type="math/tex; mode=display">(a+b)\%p=(a\%p+b\%p)\%p</script></li>
<li><script type="math/tex; mode=display">(a-b)\%p=(a\%p-b\%p)\%p</script></li>
<li><script type="math/tex; mode=display">a^b\%c=(a \% c)^b\%c</script></li>
</ul>
<p>引理：<script type="math/tex">(a\times b)\%c =[(a\%c)\times(b\%c)]\%c</script></p>
<p>证明：</p>
<script type="math/tex; mode=display">
\text{假设}a\%c=d, \,b\%c = e; \\
\text{则有}a=t\times c+d,\,b=k\times c+e; \\

\begin{align}
(a\times b)\%c&=(t\times c+d)(k\times c+e) \%c \\
&=(t\times kc^2+(t\times e+d\times k)\times c+d\times e)\%c\\
&=(d\times e )\%c\\
&=[(a\% c)\times(b\% c)]\%c
\end{align}</script><p>结论：积的取余等于取余的积的取余。</p>
<p>可以推知：<script type="math/tex">a^b\%c=(a\%c)^b\%c</script>。</p>
<p><strong>快速幂取余</strong>：</p>
<p>根据求余运算性质可以推出：</p>
<script type="math/tex; mode=display">
a^b\%c=(a^2)^{\frac{b}{2}}\%c=(a^2\%c)^\frac{b}{2}\%c</script><p>当 <script type="math/tex">b</script> 为奇数时 <script type="math/tex">\frac{b}{2}</script> 不是整数，所以分为以下两种情况：</p>
<script type="math/tex; mode=display">
a^b\%c=
\begin{cases}
(a^2\%c)^\frac{b}{2}\%c,&b为偶数\\
[a(a^2\%c)^\frac{b}{2}]\%c,&b为奇数
\end{cases}</script><p>利用以上公式进行循环迭代，可以将时间复杂度降低至对数级别O(logn)，并且能够避免溢出。</p>
<p>C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求 a ^ b % c</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">powerMod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>)  res = (res * a) % c;</span><br><span class="line">        a = a * a % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考: </p>
<ul>
<li><a href="https://www.cnblogs.com/Dfkuaid-210/p/12115238.html">https://www.cnblogs.com/Dfkuaid-210/p/12115238.html</a></li>
<li><a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/">https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/</a></li>
</ul>
<script type="math/tex; mode=display">
E(e^{\frac{\lambda}{m}X_i}) \le e^{\frac{\lambda^2(b-a)^2}{8m^2}}</script><h1 id="Morris-中序遍历"><a href="#Morris-中序遍历" class="headerlink" title="Morris 中序遍历"></a>Morris 中序遍历</h1><p>题目：<a href="https://leetcode-cn.com/problems/recover-binary-search-tree/">99. Recover Binary Search Tree</a></p>
<h1 id="manacher-算法"><a href="#manacher-算法" class="headerlink" title="manacher 算法"></a>manacher 算法</h1><p>用于匹配回文串。</p>
<p>题目：<a href="https://leetcode-cn.com/problems/palindrome-pairs/">336. Palindrome Pairs</a></p>
<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>题目：用于匹配字符串。</p>
<p>推导：</p>
<ul>
<li><strong>当T[i] != P[j]时</strong></li>
<li><strong>有T[i-j ~ i-1] == P[0 ~ j-1]</strong></li>
<li><strong>由P[0 ~ k-1] == P[j-k ~ j-1]</strong></li>
<li><strong>必然：T[i-k ~ i-1] == P[0 ~ k-1]</strong></li>
</ul>
<p><a href="https://leetcode-cn.com/problems/implement-strstr/">28. Implement strStr()</a></p>
<p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. Repeated Substring Pattern</a></p>
<p><a href="https://leetcode-cn.com/problems/rotate-string/">796. Rotate String</a></p>
<p>KMP由两部分组成，第一部分是是构建next数组，第二部分是进行匹配。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// char:  a b a b a b c a</span></span><br><span class="line">    <span class="comment">// index: 0 1 2 3 4 5 6 7</span></span><br><span class="line">    <span class="comment">// pmt:   0 0 1 2 3 4 0 1   字符串前后缀中匹配最大长度</span></span><br><span class="line">    <span class="comment">// next: -1 0 0 1 2 3 4 0   pmt矩阵右移一位，值的含义，匹配失败时，重新开始匹配的索引。</span></span><br><span class="line">    <span class="comment">//                          其记录着上一段拥有相同序列特征的位置。</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> string &amp;query, <span class="type">const</span> string &amp;pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建next数组</span></span><br><span class="line">        <span class="type">int</span> n = query.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = pattern.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; m - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">-1</span> || pattern[j] == pattern[i])</span><br><span class="line">                next[++j] = ++i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i = next[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 匹配</span></span><br><span class="line">        i = <span class="number">0</span>;  <span class="comment">// 主串位置</span></span><br><span class="line">        j = <span class="number">0</span>;  <span class="comment">// 模式串位置</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">-1</span> || query[i] == pattern[j]) &#123; <span class="comment">// 当j为-1时，要移动的是i，当然j也要归零</span></span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j]; <span class="comment">// j回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (j == pattern.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Hierholzer-算法"><a href="#Hierholzer-算法" class="headerlink" title="Hierholzer 算法"></a>Hierholzer 算法</h1><p>用于寻找欧拉通路。</p>
<p>题目：<a href="https://leetcode-cn.com/problems/reconstruct-itinerary/">332. Reconstruct Itinerary</a></p>
<h1 id="Rabin-Karp-字符串哈希算法"><a href="#Rabin-Karp-字符串哈希算法" class="headerlink" title="Rabin-Karp 字符串哈希算法"></a>Rabin-Karp 字符串哈希算法</h1><p>用于匹配字符串。思路将字符串看成一个 <script type="math/tex">\textit{base}</script> 进制的数，它对应的十进制值就是哈希值。显然，两个字符串的哈希值相等，当且仅当这两个字符串本身相同。然而如果字符串本身很长，其对应的十进制值在大多数语言中无法使用内置的整数类型进行存储。因此，我们会将十进制值对一个大质数 <script type="math/tex">\textit{mod}</script> 进行取模。</p>
<p>题目：<a href="https://leetcode-cn.com/problems/shortest-palindrome/">214. Shortest Palindrome</a></p>
<h1 id="最大流之Ford-Fulkerson算法"><a href="#最大流之Ford-Fulkerson算法" class="headerlink" title="最大流之Ford-Fulkerson算法"></a>最大流之Ford-Fulkerson算法</h1><h1 id="bfptr找中位数算法"><a href="#bfptr找中位数算法" class="headerlink" title="bfptr找中位数算法"></a>bfptr找中位数算法</h1><h1 id="快速选择找中位数算法"><a href="#快速选择找中位数算法" class="headerlink" title="快速选择找中位数算法"></a>快速选择找中位数算法</h1><p>该算法与快速排序算法类似，在一次递归调用中，首先进行partition过程，即利用一个元素将原数组划分为两个子数组，然后将这一元素放在两个数组之间。两者区别在于快速排序接下来需要对左右两个子数组进行递归，而快速选择只需要对一侧子数组进行递归，所以快速选择的时间复杂度为O(n)。</p>
<p>在C++中，可以用STL的nth_element()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> midptr = nums.<span class="built_in">begin</span>() + nums.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">nth_element</span>(nums.<span class="built_in">begin</span>(), midptr, nums.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> mid = *midptr;</span><br></pre></td></tr></table></figure>
<h1 id="三向切分"><a href="#三向切分" class="headerlink" title="三向切分"></a>三向切分</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">    <span class="comment">// 如果大于中位数，则放在右边</span></span><br><span class="line">    <span class="keyword">if</span> (nums[j] &gt; mid) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(nums[j], nums[k]);</span><br><span class="line">        k--;</span><br><span class="line">    <span class="comment">// 如果小于中位数，则放在左边</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[j] &lt; mid) &#123;</span><br><span class="line">        <span class="comment">// 让中位数向中间靠拢</span></span><br><span class="line">    	<span class="built_in">swap</span>(nums[j], nums[i]);</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    <span class="comment">// 如果等于中位数，不处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><ol>
<li><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字</a></p>
</li>
<li><p><a href="https://leetcode-cn.com/problems/elimination-game/">390. 消除游戏</a></p>
</li>
</ol>
<p><code>n</code> 个数字排成一圈，从数字 <code>0</code> 开始，每次删除第 <code>m</code> 个数字，将问题的解记为<code>f(n, m)</code>，其表示<strong>N个人报数，每报到M时杀掉那个人，最终胜利者的编号</strong>，有以下递推公式：</p>
<script type="math/tex; mode=display">
\begin{align}
&f(n,m)=(f(n-1,m)+m)\%n  ,\;\;\;\;\;&n>1  \\
&f(1,m)=0 ,\;\;\;\;\;&n=0
\end{align}</script><h1 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h1><p>卡特兰数（Catalan number）是<strong>组合数学</strong>中一个常出现在各种<strong>计数问题</strong>中的<strong>数列</strong>。</p>
<p><a href="https://leetcode.cn/circle/article/lWYCzv/">https://leetcode.cn/circle/article/lWYCzv/</a></p>
<p><a href="https://blog.csdn.net/cz9797/article/details/105366774/">https://blog.csdn.net/cz9797/article/details/105366774/</a></p>
<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/93647900/">https://zhuanlan.zhihu.com/p/93647900/</a></p>
<p>初始化（按秩合并）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    fa.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    rank.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找（路径压缩）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = <span class="built_in">find</span>(fa[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>合并（按秩合并）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 秩：以当前结点为根节点的子树的高度(rank)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">find</span>(i), y = <span class="built_in">find</span>(j);    <span class="comment">//先找到两个根节点</span></span><br><span class="line">    <span class="keyword">if</span> (rank[x] &lt;= rank[y])</span><br><span class="line">        fa[x] = y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fa[y] = x;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y)</span><br><span class="line">        rank[y]++;                   <span class="comment">//如果深度相同且根节点不同，则新的根节点的深度+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秩：以当前结点为根节点的子树的结点总数(size)，leetcode 803</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="built_in">find</span>(i), y = <span class="built_in">find</span>(j);</span><br><span class="line">    <span class="keyword">if</span> (x == y)  <span class="keyword">return</span>;</span><br><span class="line">    fa[x] = y;</span><br><span class="line">    size[y] += size[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>其初衷是解决数据压缩里的累积频率（Cumulative Frequency）的计算问题，现多用于高效计算数列的前缀和， 区间和。</p>
<p>简单介绍：<a href="https://blog.csdn.net/qq_40941722/article/details/104406126">https://blog.csdn.net/qq_40941722/article/details/104406126</a></p>
<p>建立树状数组</p>
<h1 id="线状树"><a href="#线状树" class="headerlink" title="线状树"></a>线状树</h1><p>使用结构定义(待补充)：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> lo, hi;</span><br><span class="line">    SegNode* lchild, *rchild;</span><br><span class="line">    <span class="built_in">SegNode</span>(<span class="type">int</span> left, <span class="type">int</span> right): <span class="built_in">lo</span>(left), <span class="built_in">hi</span>(right), <span class="built_in">add</span>(<span class="number">0</span>), <span class="built_in">lchild</span>(<span class="literal">nullptr</span>), <span class="built_in">rchild</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">SegNode* <span class="title">build</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    SegNode* node = <span class="keyword">new</span> <span class="built_in">SegNode</span>(left, right);</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    node-&gt;lchild = <span class="built_in">build</span>(left, mid);</span><br><span class="line">    node-&gt;rchild = <span class="built_in">build</span>(mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(SegNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lo == root-&gt;hi) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (root-&gt;lo + root-&gt;hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (val &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;lchild, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(root-&gt;rchild, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用数组定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">segmenTree</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> left, <span class="type">int</span> right, vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        segmenTree[node] = nums[left];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, left, mid, nums);</span><br><span class="line">    <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, right, nums);</span><br><span class="line">    segmenTree[node] = segmenTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmenTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val, <span class="type">int</span> node, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        segmenTree[node] = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= mid) <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">1</span>, left, mid);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">    segmenTree[node] = segmenTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmenTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">range</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == start &amp;&amp; right == end) &#123;</span><br><span class="line">    	<span class="keyword">return</span> segmenTree[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">    <span class="keyword">if</span> (end &lt;= mid) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, end, left, mid);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start &gt; mid) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, start, end, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, mid, left, mid) + <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sum型线状树：<a href="https://leetcode.cn/problems/range-sum-query-mutable/">307. 区域和检索 - 数组可修改</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线状树</span></span><br><span class="line"><span class="comment">// 时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; segmenTree;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> left, <span class="type">int</span> right, vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segmenTree[node] = nums[left];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, left, mid, nums);</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, right, nums);</span><br><span class="line">        segmenTree[node] = segmenTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmenTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val, <span class="type">int</span> node, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segmenTree[node] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid) <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">1</span>, left, mid);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">change</span>(index, val, node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">        segmenTree[node] = segmenTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmenTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">range</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == start &amp;&amp; right == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> segmenTree[node];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (end &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, end, left, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start &gt; mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, start, end, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, mid, left, mid) + <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt; &amp;nums) : <span class="built_in">n</span>(nums.<span class="built_in">size</span>()), <span class="built_in">segmenTree</span>(nums.<span class="built_in">size</span>() * <span class="number">4</span>) &#123;  <span class="comment">// 极端情况下，要开4倍</span></span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">change</span>(index, val, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">range</span>(<span class="number">0</span>, start, end, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray* obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * obj-&gt;update(index,val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;sumRange(left,right);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>max型线状树：</p>
<p><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线段树</span></span><br><span class="line"><span class="comment">// 时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; segmentTree;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> left, <span class="type">int</span> right, vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segmentTree[node] = nums[left];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">1</span>, left, mid, nums);</span><br><span class="line">        <span class="built_in">build</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, right, nums);</span><br><span class="line">        segmentTree[node] = <span class="built_in">max</span>(segmentTree[node * <span class="number">2</span> + <span class="number">1</span>], segmentTree[node * <span class="number">2</span> + <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">range</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == start &amp;&amp; right == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> segmentTree[node];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (end &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, end, left, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start &gt; mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, start, end, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">1</span>, start, mid, left, mid), <span class="built_in">range</span>(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end, mid + <span class="number">1</span>, right));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        n = nums.<span class="built_in">size</span>();</span><br><span class="line">        segmentTree = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span> * n);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, nums);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - k; i++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="built_in">range</span>(<span class="number">0</span>, i, i + k - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>原码、补码、反码的概念：<a href="https://blog.csdn.net/weixin_30940783/article/details/96858629">https://blog.csdn.net/weixin_30940783/article/details/96858629</a></p>
<p>常见规则： </p>
<ul>
<li>相同的数异或相抵，如果 $x_1\oplus x_2=0$，则$x_1==x_2$</li>
<li>$x_1 \&amp; -x_1$ 可以取出 $x$ 的二进制表示中最低位的那个 1。例子：12的二进制表示为 0000 1100，-12的二进制表示为12的反码+1为 1111 0011+1 = 1111 0100，使用上述公式得到最低位为 0000 0100。如果 $x_1==INT_MIN=-2147483648$会强制赋结果为<script type="math/tex">INT\_MIN</script></li>
</ul>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>ASCII: 97~122小写字母，ASCII: 65~90大写字母</p>
<p>大写变小写、小写变大写 : 字符 ^= 32;<br>大写变小写、小写变小写 : 字符 |= 32;<br>小写变大写、大写变大写 : 字符 &amp;= -33;</p>
<pre><code>string toChangeCase(string str) &#123;
    for (int i = 0; i &lt; str.size(); i++)
    &#123;
        //大转小
        if (str[i] &gt;= 65 &amp;&amp; str[i] &lt;= 90)
        &#123;
            str[i]=tolower(str[i]);
        &#125;
        //小转大
        else if (str[i] &gt;= 97 &amp;&amp; str[i] &lt;= 122)
        &#123;
            str[i]=toupper(str[i]);
        &#125;
    &#125;
    return str;
&#125;
</code></pre><p><script type="math/tex">n \& n-1</script>会让最低位变成0，通过下列代码可以获得二进制的个数，类似__builtin_popcount(int n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __builtin_popcount(<span class="type">int</span> num) &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        n &amp;= (n<span class="number">-1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><script type="math/tex">m \&-m</script> 可以取出最低位 1，如13的二进制表示为1101，那么-13的二进制表示为0010 + 0001 = 0011，那么1101 &amp; 0011 = 0001，二进制末尾1的位置是<script type="math/tex">2^0</script>：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> m &amp; -m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>__builtin_ctz、__builtin_ctzl、__builtin_ctzll 返回输入数二进制表示从最低位开始(右起)的连续的0的个数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __builtin_ctzl(<span class="type">unsigned</span> <span class="type">long</span> x) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != <span class="number">64</span>; ++i)</span><br><span class="line">    	<span class="keyword">if</span> (x &gt;&gt; i &amp; <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地撰写中文（毕业）论文——word使用技巧</title>
    <url>/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>本人在写毕设论文的时候踩了很多坑，让我重新学习了了如何高效使用word进行编辑。当然下面的顺序并不是依照我踩坑的顺序续写的，而是我写完论文之后进行了总结：如果重头开始写论文应该怎么做才是高效且容易管理的，仅记录一些能够免去搬砖的使用技巧，个人感觉套模板是没用滴，学之以渔才是正确路线。注：用到的word是window10的版本。</p>
<span id="more"></span>
<h1 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h1><p>简单介绍一下你电本科毕设论文检测系统的一些基本格式：</p>
<ul>
<li>标题一，中文字体为黑体，西文字体Times New Roman，字号小三。段前间距24磅，段后间距18磅，行距固定值20磅。居中显示。</li>
<li>标题二，中文字体黑体，西文字体Times New Roman，字号四号。若上接标题一，段前间距0磅，段后间距6磅，行距固定值20磅。若衔接正文，段前间距18磅，段后间距6磅，行距固定值20磅。</li>
<li>标题三，中文字体黑体，西文字体Times New Roman，字号为四号。若上接标题二，段前间距0磅，段后间距6磅，行距固定值20磅。若衔接正文，段前间距12磅，段后间距6磅，行距固定值20磅。</li>
<li><p>正文，中文字体宋体，西文字体Times New Roman，字号为小四。首行缩进2字符，行距固定值20磅。</p>
</li>
<li><p>图表题注，中文字体宋体，西文字体Times New Roman，字号五号，行距固定值20磅。图片题注图片上面，段前间距6磅，段后间距12磅。表格题注段前间距12磅，段后间距6磅。</p>
</li>
</ul>
<p>这些基本格式可以在<code>开始-&gt;样式</code>中进行修改，其中图片和表格题注的格式一般需要自己创建新样式。标题二和标题三如何区分上接高一级的标题还是正文来设置格式，这个我也没有找到很好的解决方案，我是根据哪个用的比较多来设置统一样式，之后再进行微调。如果有大神懂的话可以在评论区补充一下哦。以标题一为例，设置完结果如下：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1.png" alt="1"></p>
<h1 id="多级列表"><a href="#多级列表" class="headerlink" title="多级列表"></a>多级列表</h1><p>多级列表的设置是公式、图标题注关联章节的核心，当然也可以包括目录。于<code>开始-&gt;段落</code>中找到<code>多级列表</code>，定义新的多级列表，先把<code>更多</code>点出来</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2.png" alt="2"></p>
<p>将<code>此级别的编号格式</code>设置为<code>一、二、三</code>，然后在编号的格式左右加字使之成为<code>第一章</code>，并设置好字体，在更多弹出来的项中<code>将级别链接到格式</code>设置为·标题一·，对于标题一一半设置<code>标号对其方式</code>为<code>居中</code>，<code>编号之后</code>为<code>空格</code>，同时多级标号的字体字号应该与标题一致。</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/3.png" alt="3"></p>
<p>以此类推，依次设置好第二级、第三级多次列表：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/4.png" alt="4"></p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/5.png" alt="5"></p>
<p>最后可实现结果如下：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/22.png" alt="22"></p>
<h1 id="word”自定义”快捷键"><a href="#word”自定义”快捷键" class="headerlink" title="word”自定义”快捷键"></a>word”自定义”快捷键</h1><p>word其实没有所谓的自定义快捷键啦，但是它有一个<code>快速访问工具栏</code>，在<code>文件-&gt;选项-&gt;快速访问工具栏</code>中可以进行定义，如图我将用的比较多距离比较远的“插入新公式“、”插入交叉引用”以及“自动图文集”加入到快速访问工具栏中。</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/6.png" alt="6"></p>
<p>确定之后就可以分别通过<code>Alt+4</code>、<code>Alt+5</code>、<code>Alt+6</code>进行访问了。</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/7.png" alt="7"></p>
<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><p>现在使用<code>Alt+4</code>就可以打开<code>设计</code>栏进行公式编辑，这个版本的word有个自带的<code>LaTeX</code>能够以与markdown的mathjax相似的语法插入公式，用起来非常方便比如，输入<code>\epsilon</code>并单击空格就可以解析为$\epsilon$了，可以快速编辑公式和符号。</p>
<p>对于公式编号的设置一直是一个很头疼的东西，我开始做时候也不会，网上主要有两种做法，一种是表格法，还有一种是制表符法。表格法的思想就是创建一个1x3的表格，中间格键入公式并居中，右边格键入公式的编号并居右，最后见该表格的框线去除即可，这种方法的优势就是简单，劣势就是不能自动管理编号，不利于大量公式的管理。</p>
<p>而使用制表符法虽然初始设置比较麻烦，但是其能补表格法之短。使用该方法首先需要确定两个制表符的位置，一个是公式居中，一个是编号居右，通过<code>布局-&gt;页面设置</code>的<code>页边距</code>栏和<code>纸张</code>栏分别找到页边距的左右距离以及纸张的宽度：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/8.png" width="48%"><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/9.png" width="48%"></p>
<p>通过计算得到第一个制表符的位置为<script type="math/tex">(21-3.17*2)/2=7.32cm</script>，第二个指标符的位置为<script type="math/tex">21-3.71=17.82cm</script>，新开一个空行，键入公式及编号，此时该公式及编号将居左排列，光标置于该行，于<code>开始-&gt;段落-&gt;制表位</code>中设置第一个制表符，并居中对齐：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/11.png" alt="11"></p>
<p>点击确定后设置第二个制表符，右对齐：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/12.png" alt="12"></p>
<p>分别在公式前和编号前键入<code>Tab</code>，就能使公式居中，编号居右显示，如下图所示：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/10.png" alt="10"></p>
<p>如果不太care自动编号，可以在样式中新建<code>公式</code>的样式，然后按照上述的方式使公式居中，编号居右，样式图示：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/13.png" alt="13"></p>
<h2 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h2><p>在括号中使用<code>Ctrl+F9</code>插入域代码，输入<code>&#123;seq list&#125;</code>以生成序列编号，注意<code>Seq</code>与<code>list</code>之间存在空格，完成后选中使用<code>F9</code>更新域生成编号<code>(1)</code>。</p>
<p>如果需要输入包含章节信息的公式，需要使用更加复杂的域代码，我具体没有实战到论文中，就是看了一下demo，一个案例如下：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">第一章</span><span class="template-variable">&#123;seq chapter \h&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">1.1(</span><span class="template-variable">&#123;seq chapter \c&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;seq list \s 1&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">1.2(</span><span class="template-variable">&#123;seq chapter \c&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;seq list \s 1&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">第二章</span><span class="template-variable">&#123;seq chapter \h&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">2.1(</span><span class="template-variable">&#123;seq chapter \c&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;seq list \s 1&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">2.2(</span><span class="template-variable">&#123;seq chapter \c&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;seq list \s 1&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">2.2.1(</span><span class="template-variable">&#123;seq chapter \c&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;seq list \s 1&#125;</span><span class="language-xml">)</span></span><br></pre></td></tr></table></figure>
<p>解读一下上面代码的意思吧（其实我也不太懂）,<code>seq</code>是序列的定义，后面<code>chapter</code>跟的是一个变量名称，<code>\h</code>表示hidden，生成了一个隐藏的…占位符，<code>\c</code>表示const，表示这里的序列号不变，<code>\s</code>可以理解为set（大概？），后面的数值<code>1</code>表示在指定标题级别下开始排序，即如果一级标题改变则重新计算编号。结果如下，可以从复选中看到添加的域代码部分：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/17.png" alt="17"></p>
<p>如何复用？需要将序列编号添加至自动图文集，拿不包含章节信息的情况而言，选中<code>(1)</code>，于<code>插入-&gt;文档部件-&gt;将所选内容保存到文档部件库</code>中：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/14.png" alt="14"></p>
<p>使用的时候只需要调用<code>插入-&gt;文档部件</code>中调用（或使用之前定义的快捷键<code>Alt+6</code>）即可：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/15.png" alt="15"></p>
<p>效果如下图，可以从复选中看到递增的部分：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/16.png" alt="16"></p>
<h1 id="图表题注"><a href="#图表题注" class="headerlink" title="图表题注"></a>图表题注</h1><p>其实图标题注不包含章节信息还是比较简单的，如果包含章节信息也可以像上述公式的方法进行设置，这样可以达到高度的定制化。实际上图标题注的可以比上述部分更加简单，即只需要在插入题注中于<code>编号</code>中将包含章节号选中即可。</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/18.png" alt="18"></p>
<p>但是仍然有一个问题就是如果一级标题列表设置的是汉字形式，那么题注的将会显示为<code>图表 二-1</code>，如下图所示，非常恼火。</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/19.png" alt="18"></p>
<p>一个技巧就是先右选其中一个多级列表，选择<code>调整列表缩进</code>：</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/20.png" alt="20"></p>
<p>将一级标题的编号设置为数字的形式，然后在插入图表题注</p>
<p><img src="/2020/05/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%92%B0%E5%86%99%E4%B8%AD%E6%96%87%EF%BC%88%E6%AF%95%E4%B8%9A%EF%BC%89%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94word%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/21.png" alt="21"></p>
<p>这样生成的图表题注就是数字形式，之后再将一级标题的编号调回汉字，当然有个需要注意的地方就是后续不能对图表标注更新域，否则编号又会变成汉字形式。</p>
<hr>
<p>目前大概用到和了解到的word编写管理技巧就是这些，对于写一篇毕业设计中文论文应该是够用的了，参考，整理和总结了下面的博客：</p>
<ul>
<li>公式排版：<a href="https://blog.csdn.net/zaishuiyifangxym/article/details/81709319">https://blog.csdn.net/zaishuiyifangxym/article/details/81709319</a></li>
<li><p>公式自动编号：<a href="https://blog.csdn.net/ljp1919/article/details/42168081">https://blog.csdn.net/ljp1919/article/details/42168081</a></p>
</li>
<li><p>域代码：<a href="https://blog.csdn.net/songchuwang1868/article/details/104816016">https://blog.csdn.net/songchuwang1868/article/details/104816016</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>【论文笔记】 Towards Evaluating the Robustness of Neural Networks</title>
    <url>/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/</url>
    <content><![CDATA[<p>今天读了一下 <a href="https://arxiv.org/abs/1608.04644v2">Towards Evaluating the Robustness of Neural Networks</a>，这是关于对抗样本(Adversarial Example)的paper，主要贡献是提出了Carlini &amp; Wagner Attack神经网络有目标攻击算法，打破了最近提出的神经网络防御性蒸馏(Defensive Distillation)，证明防御性蒸馏不会显著提高神经网络的鲁棒性，论文的信息量还是比较大的。</p>
<p>可能需要阅读的论文以获取前置知识：</p>
<p>关于蒸馏网络：</p>
<p>[1] <a href="https://arxiv.org/abs/1312.6184">Do Deep Nets Really Need to be Deep?</a></p>
<p>[2] <a href="https://arxiv.org/abs/1503.02531">Distilling the Knowledge in a Neural Network</a></p>
<p>[3] <a href="https://arxiv.org/abs/1511.04508">Distillation as a Defense to Adversarial Perturbations against Deep Neural Networks</a></p>
<p>关于对抗样本：</p>
<p>[4] <a href="https://arxiv.org/abs/1312.6199">Intriguing properties of neural networks</a>（L-BFGS Attack）</p>
<p>[5] <a href="https://arxiv.org/abs/1510.05328">Exploring the Space of Adversarial Images</a>（FGSM）</p>
<p>[6] <a href="https://arxiv.org/pdf/1706.06083.pdf">Towards Deep Learning Models Resistant to Adversarial Attacks</a>（PGD, I-FGSM）</p>
<p>[7] <a href="https://arxiv.org/abs/1511.07528">The Limitations of Deep Learning in Adversarial Settings</a> (JSMA)</p>
<p>[8] <a href="https://arxiv.org/abs/1511.04599">DeepFool: a simple and accurate method to fool deep neural networks</a>（DeepFool）</p>
<p>关于论文源码：</p>
<p><a href="https://github.com/carlini/nn_robust_attacks">carlini/nn_robust_attacks</a></p>
<span id="more"></span>
<h1 id="对抗样本-Adversarial-Example"><a href="#对抗样本-Adversarial-Example" class="headerlink" title="对抗样本 (Adversarial Example)"></a>对抗样本 (Adversarial Example)</h1><h2 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h2><p>通过故意对数据集中输入样例添加难以察觉的摄动使模型以高置信度给出一个错误的输出。即只需要在一张图片上做微小的扰动，(神经网络)分类器以很高的置信度将图片错误分类，甚至被分类成一个指定的标签（不是图片正确所属的标签）。<img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/1.png" alt="A demonstration of fast adversarial example generation applied to GoogLeNet (Szegedy et al., 2014a) on ImageNet. By adding an imperceptibly small vector whose elements are equal to the sign of the elements of the gradient of the cost function with respect to the input, we can change GoogLeNet’s classification of the image. Here our epsilon of .007 corresponds to the magnitude of the smallest bit of an 8 bit image encoding after GoogLeNet’s conversion to real numbers."></p>
<p>这类问题可以表述为一个约束最小化问题：</p>
<script type="math/tex; mode=display">
\text{minimize}\;\;D(x,x+\delta)\\
\begin{align}
\text{such that}\;\ & C(x+\delta)=t\\
&x+\delta\in[0,1]^m
\end{align}</script><p>其中：</p>
<ul>
<li>$x\in R^m$ 是干净图片向量。</li>
<li>$\delta \in R^m$ 是被加入到图片的扰动。</li>
<li>$D(.)$ 是距离度量。</li>
<li>$t$ 是攻击的目标标签。</li>
<li>$C(.)$是深度神经网络分类器。</li>
<li><script type="math/tex">[0,1]^m</script> 用于限制扰动后值的范围。</li>
</ul>
<p>对于距离度量而言，<script type="math/tex">L_p</script> 距离常常被写作<script type="math/tex">||x-x'||_p</script>，其 $p$ 范数被定义为：</p>
<script type="math/tex; mode=display">
||v||_p=(\sum_{i=1}^n|v_i|^p)^{\frac{1}{p}}</script><p>具体而言：</p>
<ul>
<li><script type="math/tex">L_0</script> 距离度量的是 <script type="math/tex">x_i\ne x_i'</script> 的坐标 $i$ 的数量，其对应的是图像中被改变的像素的数量。</li>
<li><script type="math/tex">L_2</script> 距离度量的是 <script type="math/tex">x_i</script> 和 <script type="math/tex">x_i'</script> 之间的欧式距离，当许多像素发生小变化时，<script type="math/tex">L_2</script> 依据可以保持较小。</li>
<li><script type="math/tex">L_\infty</script> 距离度量的是 <script type="math/tex">x_i</script> 和 <script type="math/tex">x_i'</script> 之间最大的绝对距离即<script type="math/tex">||x-x'||\infty=max(|x_1-x_1'|,...,|x_n-x_n’|)</script>，每个像素可以被改变到这个极限。</li>
</ul>
<h3 id="Objective-Function"><a href="#Objective-Function" class="headerlink" title="Objective Function"></a>Objective Function</h3><p>由于该目标函数一个高度非线性的函数，现有算法很难直接求解上述公式，往往通过将其表述为一个适当的优化公式来解决，而这个优化公式可以通过现有的优化算法来解决。论文定义了新的目标函数$f$，使得  <script type="math/tex">f(x+\delta)\le0</script> 当且仅当 <script type="math/tex">C(x+\delta)=t</script> 成立，论文探索了公式的空间，并根据经验确定哪些公式可以导致最有效的攻击，提出了七个目标函数，公式如下（附上个人理解，所有的目标函数似乎都有大于等于0的约束）：</p>
<ul>
<li><script type="math/tex">f_1(x')=-loss_{F,t}(x')+1</script>，对目标标签的损失函数进行优化，这个目标函数和 L-BFGS Attack 相类似。</li>
<li><script type="math/tex">f_2(x')=(\max_{i\ne t}(F(x')_i)-F(x')_t)^+</script>，对目标标签的置信度进行优化，希望其成为最后预测值。</li>
<li><script type="math/tex">f_3(x')=\text{softplus}(\max_{i\ne t}(F(x')_i)-F(x')_t)-log(2)</script>， 也是对目标标签的置信度进行优化，形式不同。</li>
<li><script type="math/tex">f_4(x')=(0.5-F(x')_t)^+</script>，也是对目标标签的置信度进行优化，希望其成为最大可能类。</li>
<li><script type="math/tex">f_5(x')=-log(2F(x')_t-2)</script>，同  <script type="math/tex">f_4</script>。</li>
<li><script type="math/tex">f_6(x')=(\max_{i\ne t}(Z(x')_i)-Z(x')_t)^+</script>，对目标标签的 logit 值进行优化。同 <script type="math/tex">f_2</script>.</li>
<li><script type="math/tex">f_7(x')=\text{softplus}(\max_{i\ne t}(Z(x')_i)-Z(x')_t)-log(2)</script>，也对目标标签的 logit 值进行优化，同 <script type="math/tex">f_3</script>.</li>
</ul>
<p>其中：</p>
<p>$s$ 是正确的分类，<script type="math/tex">(e)^+</script> 是 <script type="math/tex">\max(e,0)</script> 的缩写，<script type="math/tex">\text{suftplus}(x) = \text{log}(1+\text{exp}(x))</script>，<script type="math/tex">loss_{F,s}(x)</script>是关于$x$的交叉熵损失，<script type="math/tex">Z||.||</script> 是最后一个隐藏层的输出，即 logit 层，<script type="math/tex">F||.||</script> 是经过 softmax 后的输出，如图示：</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/2.png" alt="Overview of a DNN architecture: This architecture, suitable for classification tasks thanks to its softmax output layer, is used throughout the paper along with its notations."></p>
<p>现在把原始问题表述为：</p>
<script type="math/tex; mode=display">
\begin{cases}
\text{minimize}\;\;&D(x,x+\delta)\\
\text{such that}\;
&C(x+\delta)=t\\
&x+\delta\in[0,1]^m
\end{cases}
\Rightarrow 

\begin{cases}
\text{minimize}\;\;&D(x,x+\delta)+c \,·\,f(x+\delta) \\
\text{such that}\;
&x+\delta\in[0,1]^m \\

\end{cases}</script><p>其中 $c\gt0$ 是一个惩罚因子，用于权衡目标和约束的重要性，有点像正则化，论文通过<strong>二分查找法</strong>来选择合适的 $c$，下图是 $c$ 的敏感度，可以看出在 <script type="math/tex">L_2</script> 约束和 <script type="math/tex">f_6</script> 目标函数的前提下，当 <script type="math/tex">c\lt 1</script>，攻击成功率很低。在 <script type="math/tex">c \gt 1</script> 之后，攻击效果提升不大，但成功率很高。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/4.png" alt></p>
<h3 id="Box-constraints"><a href="#Box-constraints" class="headerlink" title="Box constraints"></a>Box constraints</h3><p>为了确保生成有效的图片，对于像素点的扰动 $\delta$ 存在着约束 <script type="math/tex">0\le x_i+\delta_i\le1</script>，在优化问题中，这个被称为“盒约束”。该论文研究了三种不同方法来解决这个问题：</p>
<p>第一个方法是<strong>Projected gradient descent</strong>，在每次迭代中，执行一个单步标准梯度下降后，将所有坐标约束到 $[0,1]$ 的范围内，这个方法的性能不佳，原因在于它将剪辑后的图片作为下一次迭代的输入。（这个方法的具体表述不是很清楚，需要看看源码）</p>
<p>第二个方法是<strong>Clipped gradient descent</strong>，上述方法存在一个问题就是算法可能会卡在一个平坦的点上，即当像素增加了一个比允许的最大值大得多的分量的时候，再将其约束到 1，那么偏导数就会变成 0。所以这个方法将盒约束整合到目标函数中，即目标函数从 <script type="math/tex">f(x+\delta)</script> 转化为 <script type="math/tex">f(\min{(\max{(x+\delta,0)},1)})</script>。</p>
<p>第三个方式是<strong>Change of variables</strong>，该方法引入一个新的变量 $\omega$，将上述优化 $\delta$ 的问题转化为优化 $\omega$，通过定义：</p>
<script type="math/tex; mode=display">
\delta_i=\frac{1}{2}(tanh(\omega_i)+1)-x_i</script><p>因为<script type="math/tex">-1\le tanh(\omega_i) \le1</script>，所以<script type="math/tex">0\le x_i+\delta_i\le1</script> 是成立的，这样的转化允许我们使用其他不支持盒约束的算法进行优化，论文尝试了三种求解方法：标准梯度下降法、动量梯度下降法以及Adam算法，并且发现这三种算法都得到相同质量的解，然而<strong>Adam算法</strong>的收敛速度最快。</p>
<h3 id="Evaluation-of-approach"><a href="#Evaluation-of-approach" class="headerlink" title="Evaluation of approach"></a>Evaluation of approach</h3><p>由于这是有目标攻击：论文考虑了三种不同的策略来选择目标类，分别是：</p>
<ul>
<li><strong>Average Case</strong>: 在不正确的标签中随机均匀地选择目标类。</li>
<li><strong>Best Case</strong>: 对所有不正确的类执行攻击，并报告最易攻击的目标类。</li>
<li><strong>Worst Case</strong>: 对所有不正确的类执行攻击，并报告最难攻击的目标类。</li>
</ul>
<p>下图图示为在不同目标类选择策略中，三个不同盒约束中，七个可能目标函数的前提下，<script type="math/tex">L_2</script> 的平均距离、标准偏差(where?)和攻击成功概率。另外，当攻击成功率不是100%时，平均距离仅计算了攻击成功的部分。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/3.png" alt></p>
<p>从中可以发现看出<strong>Projected gradient descent</strong>在处理盒约束成功率是优于另外两种策略，而<strong>Change of variables</strong>往往能找到更小的扰动，对于目标函数而言，<script type="math/tex">f_6</script>表现的比其他的好，扰动最小，成功率最高。为什么有些损失函数比其他函数更好？论文认为原因在于当 $c=0$ 的时候，梯度下降法不会改变原始图像，但是如果 $c$ 较大的时候往往会导致梯度下降的初始步骤过于贪婪，只沿着最容易降低 $f$ 的方向移动，而忽略了 $D$ 的损失，从而导致梯度下降找到次优解。论文认为 <script type="math/tex">f_1</script> 和 <script type="math/tex">f_4</script> 的表现相对较差，找不到一个合适的 $c$，因为 $c$ 权衡了距离约束项和损失函数项的重要性，如果要找到一个固定的常数 $c$，那么这两项的值应该保持相对一致。对于 <script type="math/tex">f_4</script>，论文做了一个实验就是将 $x$ 和 $x’$ 进行线性组合构造 <script type="math/tex">y=\alpha x+(1-\alpha) x'\;，\alpha\in[0,1]'</script>，事实发现从干净样本到对抗样本（$\alpha$ 从 0 到 1）， <script type="math/tex">Z(.)_t</script>的值基本是线性的，因此 <script type="math/tex">F(.)_t</script> 应该是一个logistic函数，论文实验验证结果的皮尔斯相关系数 <script type="math/tex">r\gt 0.9</script> 证明<script type="math/tex">F(.)_t</script>服从该分布。那么，对于 <script type="math/tex">f_4(x')=(0.5-F(x')_t)^+</script>，其图像应该为</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/5.jpg" alt="5"></p>
<p>为了使梯度下降攻击在一开始发生变化，常数 $c$ 必须足够大</p>
<script type="math/tex; mode=display">
\epsilon\lt c(f_1(x+\epsilon)-f_1(x))</script><p>或者当攻击快结束时，即 <script type="math/tex">\epsilon \rightarrow 0</script>，有</p>
<script type="math/tex; mode=display">
\frac{1}{c}\lt|\nabla f_1(x)|</script><p>意味着 $c$ 一定要比梯度的倒数更大。</p>
<p>以下为个人对论文的理解：对于 <script type="math/tex">f_1</script> 而言，交叉熵损失函数长得很像 softmax，所以攻击开始的时候呢，它的梯度很小，意味着 $c$ 非常的大，但是，当它逐渐增加的时候，梯度以指数的速度增加，这时候使得数值非常大且固定的 $c$ 表现得过度贪婪，即过度优化 <script type="math/tex">f_1</script> 而忽略了 $D$，最终导致优化效果不好，<script type="math/tex">f_4</script> 同理。那么对于 <script type="math/tex">f_6</script>，由于<script type="math/tex">Z(.)_t</script>的值基本是线性的，所以 <script type="math/tex">|\nabla f_6|</script> 是一个常数，所以可以很好的找到一个固定的 $c$，所以不难解释为什么 <script type="math/tex">f_6</script> 表现的比其他的好。</p>
<h3 id="Discretization"><a href="#Discretization" class="headerlink" title="Discretization"></a>Discretization</h3><p>对于有的图片，其像素数值是整数，则需要对攻击后的图像数据取整，即进行离散化，论文用的是<strong>贪心网格搜索</strong>。</p>
<h2 id="Three-Attacks"><a href="#Three-Attacks" class="headerlink" title="Three Attacks"></a>Three Attacks</h2><p>最后论文对<script type="math/tex">L_2</script>、<script type="math/tex">L_0</script>、<script type="math/tex">L_\infty</script>三种约束提出了三种攻击方法。</p>
<h3 id="L-2-Attack"><a href="#L-2-Attack" class="headerlink" title="L_2 Attack"></a><script type="math/tex">L_2</script> Attack</h3><script type="math/tex; mode=display">
\text{minimize}\;||\frac{1}{2}(tanh(\omega)+1)-x||^2_2+c\,·\,f(\frac{1}{2}(tanh(\omega)+1)\\
f(x')=\text{max}(\max{\{Z(x')_i:i\ne t\}-Z(x')_t,-κ})</script><p>$f(x’)$ 这个函数用所有非目标标签的logit中最大值减去目标标签的logit，意味着，如果 $x’$ 被识别到目标标签，那么 <script type="math/tex">\max\{Z(x')_i:i\ne t\}-Z(x')_t</script> 是负的，假如 $κ=0$，则<script type="math/tex">f(x')=0</script>，意味着该函数将不会被惩罚，否则如果 $x’$ 被识别到非目标标签，该函数将会受到惩罚。通过改变 $κ$ 值可以得到设想的置信度。</p>
<p><strong>多起点梯度下降</strong>。梯度下降算法的主要问题是贪心搜索不能保证找到最优解，陷入局部极小值。为了弥补这一点，论文选择多个随机起点接近原始图像和运行梯度下降从每个点为固定次数的迭代。论文从半径为 $r$ 的球上均匀地随机采样点，其中 $r$ 是迄今为止发现的最接近的反例。从多个起点开始降低了梯度下降陷入一个糟糕的局部最小值的可能性。同时这也意味着 <script type="math/tex">L_2</script> attack 可以并行化，从而可以提高攻击的速度。</p>
<h3 id="L-0-Attack"><a href="#L-0-Attack" class="headerlink" title="L_0 Attack"></a><script type="math/tex">L_0</script> Attack</h3><p>由于 <script type="math/tex">L_0</script> 距离度量是不能微分的，所以不能用标准梯度下降方进行求解。所以，论文使用迭代算法，在每次迭代中，识别出一些对分类器输出没有太大影响的像素，然后修复这些像素，因此它们的值永远不会改变。固定像素集在每次迭代中增长，直到通过消除过程确定了像素的最小子集(但可能不是最小子集)，可以修改该子集以生成对抗性示例。在每次迭代中，使用 <script type="math/tex">L_2</script> attack 来识别哪些像素不重要。</p>
<p>具体来说，在每次迭代中，先调用 <script type="math/tex">L_2</script> attack，只修改允许集中的像素，得到一个对抗样本，然后计算目标函数的梯度<script type="math/tex">g=\nabla f(x+\delta)</script>，选择这样的像素 <script type="math/tex">i=arg\,min_ig_i·\delta</script>，把它从允许集中剔除，原因是计算 <script type="math/tex">g_i·\delta_i</script> 可以让我们知道通过扰动损失函数减少了多少，直到 <script type="math/tex">L_2</script> attack 找不到对抗样本为止。</p>
<p>另一个细节就是 $c$ 的选取，最初将 $c$ 设为一个非常低的值(例如，$10^{−4}$)。然后用这个 $c$ 值来产生对抗样本。如果失败了，则将 $c$ 加倍，然后再试一次，直到成功为止。如果 $c$ 超过一个固定的阈值(例如，$10^{10}$)，则中止搜索。</p>
<p>整个算法与 <strong>JSMA</strong> 算法有些相似，<strong>JSMA</strong>增加了一组允许更改的像素(最初为空)，并设置像素以使总损失最大化。相反，<script type="math/tex">L_0</script> attack 缩小了允许更改的像素集(最初包含每个像素)。论文提到，在每次迭代中，其不是从初始图像开始梯度下降，而是从上一个迭代中找到的解决方案开始梯度下降，这相当于“暖启动”，这极大地减少了每次迭代所需的梯度下降轮数，因为 $k$ 像素保持不变的解决方案通常与 $k + 1$ 像素保持不变的解决方案非常相似。</p>
<h3 id="L-infty-Attack"><a href="#L-infty-Attack" class="headerlink" title="L_{\infty} Attack"></a><script type="math/tex">L_{\infty}</script> Attack</h3><p>同样由于 <script type="math/tex">L_{\infty}</script> 距离度量是不能微分的，所以不能用标准梯度下降方进行求解。论文一开始直接对下式进行优化：</p>
<script type="math/tex; mode=display">
\text{minimize}\;c\,·\,f(x+\delta)+||\delta||_\infty</script><p>但是实验结果表明 <script type="math/tex">||\delta||_\infty</script> 项只对扰动最大的像素点进行惩罚，而对其他像素点没有影响。论文使用迭代攻击来解决这个问题，通过引入一个递减的阈值 <script type="math/tex">\tau</script>，如果扰动 <script type="math/tex">\delta_i</script> 大于该值则目标函数将会被惩罚，直到所有扰动都小于该阈值为止：</p>
<script type="math/tex; mode=display">
\text{minimize}\;c\,·\,f(x+\delta)+\sum_i[(\delta_i-\tau)^+]</script><p>在每次迭代中使用“暖启动”来进行梯度下降，该算法的速度大约与<script type="math/tex">L_2</script> attack算法一样快(只有一个起始点的时候)。另外 $c$ 值选取的策略和 <script type="math/tex">L_0</script> attack 一致。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/6.png" alt></p>
<p>可以看到三种攻击方法的性能比前面做的还是有很大的提升。</p>
<h2 id="Evaluating-Defensive-Distillation"><a href="#Evaluating-Defensive-Distillation" class="headerlink" title="Evaluating Defensive Distillation"></a>Evaluating Defensive Distillation</h2><p>蒸馏网络原来是神经网络压缩的一种方法，蒸馏网络的直觉是基于这样的一个事实，即在训练过程中DNN获得的知识不仅被编码为DNN学习的权重参数，而且还被编码为网络产生的概率向量。使用类别概率代替硬标签的好处是直观的，因为概率除了简单提供样本的正确类别外，还会编码有关每个类别的其他信息，可以从这个额外的熵推导出有关类的相对信息。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/10.jpg" alt></p>
<p>蒸馏网络的训练步骤：</p>
<ol>
<li>训练大型模型：首先训练具有硬目标即正常标签(单标签)的大型模型。</li>
<li>计算软目标：使用训练有素的大型模型来计算软目标。 也就是说，大型模型“软化”后，将通过softmax的输出。</li>
<li>训练小模型，在小模型的基础上添加附加的软目标损失函数，并通过 $\lambda$ 调整两个损失函数的比例。</li>
<li>进行预测时，以常规方式使用训练好的小模型（右图）。</li>
</ol>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/5.png" alt></p>
<p>训练防御性蒸馏网络步骤如下：</p>
<ol>
<li><p>在硬标签的监督下训练教师模型。</p>
</li>
<li><p>训练完后，使用教师模型来计算得到软标签，具体而言：</p>
<script type="math/tex; mode=display">
q_i=\frac{exp(z_i/T)}{\sum_jexp(z_i/T)}</script></li>
<li><p>在软标签的监督下训练学生模型，这个学生模型与教师模型有着相同的形状。</p>
</li>
<li><p>进行预测的时候，学生模型以常规方式进行预测，即 $T=1$。</p>
</li>
</ol>
<p>两种训练的主要区别我认为一个是学生模型的规模，另一个是 $\lambda$ 的设置是否。</p>
<p>在软标签的计算中，参数 $T$ 是一个超参数，$T$ 越大，曲线越平滑，这意味着教师模型以较大的 $T$ 来训练网络可以产生分布更加均匀的软标签，随后学生模型以同样的 $T$ 进行学习，可以更加容易学习到类之间的相对信息。在最终预测中，重新设置 $T=1$，这有利于正确类别以高置信度胜出，而错误类别输出的置信度很低，此时 softmax 层本质上输出了一个硬标签。<img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/10.png" alt></p>
<p>这篇论文提到，事实上，在大多数情况下错误类别输出的置信度太小，以至于32位浮点值四舍五入为0。出于类似的原因，梯度非常小，当用32位浮点值表示时，梯度就变成了0。这导致了依赖于以错误类别梯度进行攻击的算法（FGSM）和依赖梯度进行优化（L-BFGS）或迭代（JSMA-F）的攻击算法由于梯度消失而失效。（JSMA-Z）也会失效是因为改变目标分类所需要相对的差异在 $T= 1$  很大，比如当 logit 从 -100 到 -90，输出仍然是原来的分类，而当 logit 从 10 到 0，输出却变成了另一个类别。</p>
<p>论文评估了本文提出的三种攻击在防御性蒸馏网络效果，如下图，可以看出成功率都为100%。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/7.png" alt></p>
<p>另外在以往的工作中，提高蒸馏网络的温度 $T$ 会降低攻击的成功率，而实验显示，<script type="math/tex">L_2</script> attack 成功率与 $T$ 是不相关的，这意味着攻击方法是鲁棒的。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/8.png" alt></p>
<p>一个模型的对抗样本往往也能对另一个模型攻击成功，即使它们在不同的训练数据集上训练，即使它们使用完全不同的算法(神经网络上的对抗样本攻击随机森林），这称为对抗样本攻击迁移性，论文分别在非蒸馏网络和防御性蒸馏网络中评估攻击的迁移性能。</p>
<p><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/9.png" width="40%"><img src="/2020/03/14/%E3%80%90%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%E3%80%91-Towards-Evaluating-the-Robustness-of-Neural-Networks/11.png" width="42%"></p>
<p>在 <script type="math/tex">L_2</script> attack 中，<script type="math/tex">f(x')=\text{max}(\max{\{Z(x')_i:i\ne t\}-Z(x')_t,-κ})</script>，其中 $κ$ 值用于控制对抗样本的强度， $κ$ 值越大，对抗样本的置信度越高。从图中看出，高置信度的对抗样本迁移性越强。当然使用了防御性蒸馏的网络在一定程度上可以抵御对抗样本的迁移攻击。因此作者认为通过使更强的攻击算法和迁移攻击的成功率来评估神经网络防御的鲁棒性。</p>
<p>[参考资料]</p>
<ol>
<li><a href="https://blog.csdn.net/paper_reader/article/details/81080857">https://blog.csdn.net/paper_reader/article/details/81080857</a></li>
<li><a href="https://blog.csdn.net/nature553863/article/details/80568658">https://blog.csdn.net/nature553863/article/details/80568658</a></li>
<li><a href="https://www.bilibili.com/read/cv4009730">https://www.bilibili.com/read/cv4009730</a></li>
<li><a href="https://blog.csdn.net/jmh1996/article/details/101635216">https://blog.csdn.net/jmh1996/article/details/101635216</a></li>
<li><a href="https://www.bilibili.com/video/av66382805/">https://www.bilibili.com/video/av66382805/</a></li>
<li><a href="https://blog.csdn.net/kearney1995/article/details/79904095">https://blog.csdn.net/kearney1995/article/details/79904095</a></li>
</ol>
]]></content>
      <categories>
        <category>paper record</category>
      </categories>
      <tags>
        <tag>Adversarial Example</tag>
      </tags>
  </entry>
  <entry>
    <title>Ensemble Learning</title>
    <url>/2019/12/02/Ensemble-Learning/</url>
    <content><![CDATA[<p>Adaboost、GBDT、xgboost的个人理解</p>
<span id="more"></span>
<h1 id="前向分布算法"><a href="#前向分布算法" class="headerlink" title="前向分布算法"></a>前向分布算法</h1><p><img src="/2019/12/02/Ensemble-Learning/5.png" alt="1"></p>
<h1 id="Adaboost"><a href="#Adaboost" class="headerlink" title="Adaboost"></a>Adaboost</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p><strong>Adaboost</strong> 算法的基本原理就是将多个弱分类器进行结合，最终成为一个强分类器。与 bagging 不同的是，这个弱分类器的训练不是并行化的，而是采用一种迭代的方式。其基本步骤就是：</p>
<ul>
<li>每次训练只训练一个弱分类器，训练好的弱分类器将参与到下一次迭代，也就是说第 <strong>N</strong> 次迭代中会有 <strong>N-1</strong> 个分类器是之前就训练好的，在其他参数不变的情况下训练第 <strong>N</strong> 个分类器。</li>
<li>该第 <strong>N</strong> 个分类器训练的时候，要找到一组新的训练数据，让前面 <strong>N-1</strong> 个分类器在其上的表现很差，然后让第 <strong>N</strong> 个分类器这组数据上训练。怎么找到这组新的训练数据，其实就是权重的调整，其思想就是第 <strong>N</strong> 个分类器将着重关注前面 <strong>N-1</strong> 个分类器中分错的样本，即通过重采样的方法给予这些数据更高的权重，也相当于改变样本的概率分布，这将使得前 <strong>N-1</strong> 个分类器在该样本上表现不佳，而只要第 <strong>N</strong> 个分类器在该样本上正确分类即能获得很高的性能。</li>
<li>最终，在此基础上，对所有 <strong>N</strong> 个弱分类器采用加权投票的方法来对测试样本进行预测，这 <strong>N</strong> 个弱分类器的权重将由其分类正确率来决定，正确率越高的弱分类器在强分类器中拥有更大的权重。</li>
</ul>
<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>自己总结的计算具体流程：</p>
<ul>
<li><p>假设有$N$个训练样本<script type="math/tex">\{(x_1,y_1),...(x_N,y_N)\},y_i\in\{-1,+1\}</script>，第 1 次迭代每个样本的权重初始化为：</p>
<script type="math/tex; mode=display">
w_{1i}=\frac{1}{N},i=1,2,...N</script></li>
<li><p>第 <strong>k</strong> 次迭代中的分类器 $C$ 的样本加权错误率为（分母为权重归一化）：</p>
</li>
</ul>
<script type="math/tex; mode=display">
\epsilon_k=\frac{\sum_{i=1}^Nw_{ki}C(f_k(x_i)\ne(\hat y_i))}{\sum_{i=1}^Nw_{ki}}</script><ul>
<li><p>对于错误分类的样本，其第 <strong>k+1</strong> 次迭代的权重将被调整为：</p>
<script type="math/tex; mode=display">
w_{(k+1)i}=w_{ki}*d_k</script><p>对于正确分类的样本，其第 <strong>k+1</strong> 次迭代的权重将被调整为：</p>
<script type="math/tex; mode=display">
w_{(k+1)}i=\frac{w_{ki}}{d_k}</script><p>其中<script type="math/tex">d_k=\sqrt\frac{1-\epsilon_k}{\epsilon_k}</script>，由于错误率（二分类问题）是一个小于 0.5 的数，所以<script type="math/tex">d_k</script>是一个大于 1 的数，权重调整目的是使错误样本的权重更高，在下一轮迭代中有更高的概率被选中，降低正确样本的选中概率。</p>
</li>
<li><p>为了统一描述权重的更新往往用<script type="math/tex">a_k=\frac{1}{2}ln(\sqrt\frac{1-\epsilon_k}{\epsilon_k})</script>来替代<script type="math/tex">d_k</script>，这样权重的更新可以描述为：</p>
<script type="math/tex; mode=display">
w_{(k+1)i}=w_{ki}*\exp{(-\hat y^if_k(x^i)a_t)}</script><p>同时权重更新完之后需要对权重进行归一化使得<script type="math/tex">\sum_{i=1}^N w_ki=1</script>（其实就是上面第二步分母做的事情，主要是保证加权误差率的正确）。</p>
</li>
<li><p>另外，新训练好的弱分类器将加入到集成模型中：</p>
<script type="math/tex; mode=display">
F_k(x)=F_{k-1}(x)+a_kf_k(x)</script></li>
<li><p>最后，强分类器将表达为 <script type="math/tex">k</script> 次迭代的 <script type="math/tex">k</script> 个弱分类器的权重和：</p>
<script type="math/tex; mode=display">
F_k(x)=sign(\sum_{i=i}^ka_if_i(x))</script></li>
</ul>
<h2 id="运算案例"><a href="#运算案例" class="headerlink" title="运算案例"></a>运算案例</h2><p>下面是一个李宏毅老师深度学习的例子以帮助理解：</p>
<ul>
<li><img src="/2019/12/02/Ensemble-Learning/1.png" alt="1"></li>
</ul>
<p>初始一共有10个样本，并且每个样本的权重是一致的，假如有这么一个弱分类器<script type="math/tex">f_1(x)</script>，其产生的决策边界如图黑线所示，其中蓝色区域为其分类的正样本，红色区域为其分类的负样本，那么一共有三个被红色圈中的样本分类错误，所以第一次迭代的错误率<script type="math/tex">\epsilon_1=0.30</script>，那么<script type="math/tex">d_1=\sqrt\frac{1-\epsilon_1}{\epsilon_1}=\sqrt\frac{1-0.3}{0.3}\approx1.53</script>，那么分类正确的样本权重将调整为<script type="math/tex">w_{2i}=\frac{w_{1i}}{d_1}=0.65</script>，分类错误的样本权重将调整为<script type="math/tex">w_{2i}=w_{1i}*d_i=1.53</script>，第 1 个弱分类器的权重<script type="math/tex">a_1=ln(d_1)=0.42</script>，这个例子讲的时候<script type="math/tex">a_k</script>没有乘<script type="math/tex">\frac{1}{2}</script>。</p>
<ul>
<li><img src="/2019/12/02/Ensemble-Learning/2.png" alt="2"></li>
</ul>
<p>这是第 2 次迭代。</p>
<ul>
<li><img src="/2019/12/02/Ensemble-Learning/3.png" alt="3"></li>
</ul>
<p>这是第 3 次迭代。</p>
<p><img src="/2019/12/02/Ensemble-Learning/4.png" alt="4"></p>
<p>最终所有弱分类器的加权组合将会得到一个强分类器，这个强分类器将会正确分类这个实例的所有样本。</p>
<p>看了很多例子，这个例子对我来说最形象生动，但是注意这个例子的权重调整没有进行归一化。</p>
<h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><h3 id="证明：为什么a-k-frac-1-2-ln-sqrt-frac-1-epsilon-k-epsilon-k-？"><a href="#证明：为什么a-k-frac-1-2-ln-sqrt-frac-1-epsilon-k-epsilon-k-？" class="headerlink" title="证明：为什么a_k=\frac{1}{2}ln(\sqrt\frac{1-\epsilon_k}{\epsilon_k})？"></a>证明：为什么<script type="math/tex">a_k=\frac{1}{2}ln(\sqrt\frac{1-\epsilon_k}{\epsilon_k})</script>？</h3><ul>
<li><p>假如有一个训练集<script type="math/tex">\{(x_1,y_1), (x_2,y_2),...,(x_N,y_N)\}, y_i\in\{-1,1\}</script>，在第 <strong>m-1</strong> 次迭代后已经有一个多种弱分类器组合而成的线性分类器：</p>
<script type="math/tex; mode=display">
C_{(m-1)}(x_i)=a_1k_1(x_i)+...+a_{(m-1)}k_{(k-1)}(x_i)</script></li>
<li><p>在第 <strong>m</strong> 次迭代将要训练第 <strong>m</strong> 个弱分类器<script type="math/tex">k_m</script>，它的权重是<script type="math/tex">a_m</script>，使之成为一个更强的分类器：</p>
<script type="math/tex; mode=display">
C_m(x_i)=C_{(m-1)}(x_i)+a_mk_m(x_i)</script></li>
<li><p>所以仍然需要确定弱分类器<script type="math/tex">k_m</script>及其权重<script type="math/tex">a_m</script>，因此定义强分类器<script type="math/tex">C_m</script>总指数误差为：</p>
<script type="math/tex; mode=display">
E=\sum_{i=1}^Ne^{-y_iC_m(c_i)}=\sum_{i=1}^Ne^{-y_iC_{m-1}(x_i)}e^{-y_ia_mk_m(x_i)}</script><p>注：指数误差通常用在boosting中，指数误差始终大于 0，但是确保越接近正确的结果误差越小，反之越大。</p>
</li>
<li><p>令 <script type="math/tex">w_i^{(1)}=1</script> 以及 <script type="math/tex">w_i^{(m)}=e^{-y_iC_{m-1}(x_i)},m>1</script>，可以将上式简化为</p>
<script type="math/tex; mode=display">
E=\sum_{i=1}^Nw_i^{(m)}e^{-y_ia_mk_m(x_i)}</script></li>
<li><p>我们可以将上式写成下面这种形式（即将错误分类和正确分类的误差进行求和）：</p>
<script type="math/tex; mode=display">
E=\sum_{y_i=k_m(x_i)}w_i^{(m)}e^{-a_m}+\sum_{y_i\ne k_m(x_i)}w_i^{(m)}e^{a_m}</script><p>这意味着总误差是所有正确分类和错误分类的加权误差和。</p>
</li>
<li><p>由于<script type="math/tex">w_i</script>是一个常数，为了找到一个新的弱分类器权重<script type="math/tex">a_m</script>能够最小化误差$E$，则对$E$进行求导：</p>
<script type="math/tex; mode=display">
\frac{dE}{da_m}=\frac{d(\sum_{y=k_m(x_i)}w_i^{(m)}e^{-a_m}+\sum_{y\ne k_m(x_i)}w_i^{(m)}e^{a_m})}{da_m}</script></li>
<li><p>令上述公式为 0 可以求得</p>
<div><div class="fold_hider"><div class="close hider_title">detail</div></div><div class="fold">
<script type="math/tex; mode=display">
\begin{align}&\frac{dE}{da_m}=-\sum_{y_i=k_m(x_i)}w_i^{(m)}e^{-a_m}+\sum_{y_i\ne k_m(x_i)}w_i^{(m)}e^{-a_m}=0\\\text{because }&e^{-a_m}\text{ does not depend on }i\\&\sum_{y_i=k_m(x_i)}w_i^{(m)}e^{-a_m} = \sum_{y_i\ne k_m(x_i)}w_i^{(m)}e^{-a_m}\\&-a_m+log(\sum_{y_i=k_m(x_i)}w_i^{(m)})=a_m+log(\sum_{y_i\ne k_m(x_i)}x_i^{(m)})\\&-2a_m=log(\frac{\sum_{y_i\ne k_m(x_i)}w_i^{(m)}}{\sum_{y_i=k_m(x_i)}w_i^{(m)}})\\&a_m=-\frac{1}{2}log(\frac{\sum_{y_i\ne k_m(x_i)}w_i^{(m)}}{\sum_{y_i=k_m(x_i)}w_i^{(m)}})\\&a_m=\frac{1}{2}log(\frac{\sum_{y_i=k_m(x_i)}w_i^{(m)}}{\sum_{y_i\ne k_m(x_i)}w_i^{(m)}})\\\end{align}</script>
</div></div>
<script type="math/tex; mode=display">
a_m=\frac{1}{2}ln(\frac{\sum_{y_i=k_m(x_i)}w_i^{(m)}}{\sum_{y_i\ne k_m(x_i)}w_i^{(m)}})=\frac{1}{2}ln(\frac{1-\epsilon_m}{\epsilon_m})</script><p>其中<script type="math/tex">\epsilon_m=\frac{\sum_{y_i\ne k_m(x_i)}w_i^{(m)}}{\sum_{i=1}^Nw_i^{(m)}}</script>。</p>
</li>
</ul>
<h3 id="证明：Adaboost随着迭代次数增加，误差率会越来越小。"><a href="#证明：Adaboost随着迭代次数增加，误差率会越来越小。" class="headerlink" title="证明：Adaboost随着迭代次数增加，误差率会越来越小。"></a>证明：Adaboost随着迭代次数增加，误差率会越来越小。</h3><p><img src="/2019/12/02/Ensemble-Learning/5.png" alt="5"></p>
<p>结合上图，误差函数将被定义为</p>
<script type="math/tex; mode=display">
\delta(x)=
\begin{cases}
0,\hat y^ng(x^n) > 0\\
1,\hat y^ng(x^n) < 0\\
\end{cases}\\
其中，g(x)=\sum^{T}_{t=1}a_tf_t(x)</script><p>从图中可直观的感受到其小于等于一个上界函数<script type="math/tex">\sum_n e^{-\hat y^ng(x^n)}</script>。这个式子实际上等于第 <strong>T</strong> 次迭代的样本权重和<script type="math/tex">Z_{T+1}=\sum_n w_n^{(T+1)}</script>。证明如下：</p>
<p>根据</p>
<script type="math/tex; mode=display">
\begin{align}
\begin{cases}
&w_n^{(1)}=1 \\
&w^{(t+1)}_n=w_t^n*e^{-\hat y^nf_t(x^n)a_t}
\end{cases}
\Rightarrow 
w^{(T+1)}_n=\prod_{t=1}^{T}e^{-\hat y^nf_t(x^n)a_t}
\end{align}</script><p>则</p>
<script type="math/tex; mode=display">
\begin{align}
Z_{T+1}&=\sum_nw_n^{(T+1)}\\
&=\sum_n\prod_{t=1}^{T}e^{-\hat y^nf_t(x^n)a_t}\\
&=\sum_ne^{-\hat y^n\sum_{t=1}^Tf_t(x^n)a_t}\\
&=\sum_ne^{-\hat y^ng(x^n)}\\
\end{align}</script><p>下面要证明该上界函数将越来越小:</p>
<p>根据</p>
<script type="math/tex; mode=display">
\begin{align}
Z_1&=N\\
Z_t&=Z_{t-1}\epsilon_te^{a_t}+Z_{t-1}(1-\epsilon_t)e^{-a_t} \\
&\text{ (上式左部表示错误分类的样本，右部表示正确分类的样本)}\\ 
&=Z_{t-1}\epsilon_t\sqrt\frac{1-\epsilon_t}{\epsilon_t}+Z_{t-1}(1-\epsilon_t)\sqrt\frac{\epsilon_t}{1-\epsilon_t}\\
&=Z_{t-1}*2\sqrt {\epsilon_t(1-\epsilon_t)}
\end{align}</script><p>如果使用递推的方式则有</p>
<script type="math/tex; mode=display">
Z_{T+1}=N\prod_{t=1}^T2\sqrt{\epsilon_t(1-\epsilon_t)}</script><p>结合上述证明，结论是：</p>
<script type="math/tex; mode=display">
\delta(x)\le\prod_{t=1}^T2\sqrt{\epsilon_t(1-\epsilon_t)}</script><p>由于<script type="math/tex">\epsilon_t<0.5</script>，所以训练数据的错误率会随着迭代次数的增加而越来越小。</p>
<p>令 <script type="math/tex">\gamma_m=\frac{1}{2}-\epsilon_t</script>，则 <script type="math/tex">\gamma\gt0</script>，有</p>
<script type="math/tex; mode=display">
\prod_{t=1}^T2\sqrt{\epsilon_t(1-\epsilon_t)}=\prod_{t=1}^T\sqrt{1-4\gamma_m^2}\le e^{-2\sum_{t=1}^T\gamma_m^2}</script><p>证明如下（自<a href="https://www.jianshu.com/u/c5df9e229a67">文哥的学习日记</a>）：</p>
<p>要证：</p>
<script type="math/tex; mode=display">
\prod_{t=1}^T\sqrt{1-4\gamma_m^2}\le e^{-2\sum_{t=1}^T\gamma_m^2}</script><p>即证：</p>
<script type="math/tex; mode=display">
\sqrt{1-4\gamma^2_m}\le e^{-2\gamma^2_m} \\
1-4\gamma_m^2\le e^{-4\gamma_m^2} \\</script><p>令 <script type="math/tex">x=4\gamma_m^2</script>，因为<script type="math/tex">\gamma_m=\frac{1}{2}-e_m,e_m\in[0,1]</script>，所以 <script type="math/tex">\gamma_m\in[-\frac{1}{2},\frac{1}{2}]</script>，所以 <script type="math/tex">x\in[0,1]</script>，令：</p>
<script type="math/tex; mode=display">
f(x)=e^{-x}+x-1</script><p>则：</p>
<script type="math/tex; mode=display">
f'(x)=-e^{-x}+1\ge0</script><p>所以 <script type="math/tex">f(x)</script> 递增，又因为 <script type="math/tex">f(0)=0</script>，所以 <script type="math/tex">f(x)\ge 0</script> 在 <script type="math/tex">x\in[0,1]</script> 上成立，故原式得证。</p>
<p><strong>推论</strong>：如果存在 <script type="math/tex">\gamma\gt0</script>，对所有 $m$ 有<script type="math/tex">\gamma_m\ge\gamma</script>，则</p>
<script type="math/tex; mode=display">
\frac{1}{T}\sum_{i=1}^TI(G(x_i)\ne y_i)\le e^{-2T\gamma^2}</script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>paper: <a href="http://www.inf.fu-berlin.de/inst/ag-ki/adaboost4.pdf">AdaBoost and the Super Bowl of Classifiers A Tutorial Introduction to Adaptive Boosting</a></p>
<p>李宏毅深度学习：<a href="https://datawhalechina.github.io/leeml-notes/#/chapter38/chapter38?id=adaboost">https://datawhalechina.github.io/leeml-notes/#/chapter38/chapter38?id=adaboost</a></p>
<p>wikipedia.org: <a href="https://en.wikipedia.org/wiki/AdaBoost">https://en.wikipedia.org/wiki/AdaBoost</a></p>
<p>李航：统计学习方法第二版</p>
<p>网站：<a href="https://www.jianshu.com/u/c5df9e229a67">https://www.jianshu.com/u/c5df9e229a67</a></p>
<p>实现：参考@<a href="https://nbviewer.jupyter.org/github/ljpzzz/machinelearning/blob/master/ensemble-learning/adaboost-classifier.ipynb">ljpzzz</a></p>
<h1 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h1><p>使用前向分布算法构建提升树：</p>
<script type="math/tex; mode=display">
\begin{align}
&f_0(x)=0\\
&f_m(x)=f_{m-1}(x)+T(x;\Theta_m),\;\;m=1,2,...,M\\
&f_M(x)=\sum_{m=1}^MT(x;\Theta_m)
\end{align}</script><p>需要求解最小化损失函数的参数$\Theta$：</p>
<script type="math/tex; mode=display">
\hat\Theta=\arg\;\min_{\Theta_m}\sum_{i=1}^NL(y_i,f_{m-1}(x_i)+T(x_i;\Theta_m))</script><p>当采用平方误差损失函数时：</p>
<script type="math/tex; mode=display">
\begin{align}
L(y,f(x))&=(y-f(x))^2\\
L(y,f_{m-1}(x)+T(x;\Theta_m))&=[y-f_{m-1}(x)-T(x;\Theta_m)]^2\\
&=[r-T(x;\Theta)]^2
\end{align}</script><p>这里 $r$ 是当前模型拟合数据的误差 <script type="math/tex">r=y-f_{m-1}(x)</script></p>
<p>算例：</p>
<p><img src="/2019/12/02/Ensemble-Learning/8.png" width="45%"></p>
<p><img src="/2019/12/02/Ensemble-Learning/9.png" alt="9"></p>
<p><img src="/2019/12/02/Ensemble-Learning/10.png" alt="10"></p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/pinard/p/6140514.html">梯度提升树(GBDT)原理小结</a>[</p>
<p><a href="https://www.cnblogs.com/pinard/p/6143927.html">scikit-learn 梯度提升树(GBDT)调参小结</a></p>
<p>李航：统计学习方法第二版</p>
<h1 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h1><p><a href="https://www.cnblogs.com/pinard/p/10979808.html">XGBoost算法原理小结</a></p>
<p><a href="https://www.cnblogs.com/pinard/p/11114748.html">XGBoost类库使用小结</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Recognize Deeplearning.ai</title>
    <url>/2019/10/03/Recognize-Deeplearning.ai/</url>
    <content><![CDATA[<p>这篇文章是我在网易云上学习吴恩达深度学习做的一些总结，我是先看了一遍视频才来做的总结，所以很多参考了黄广海博士的翻译和笔记，另外有的知识点与之前吴恩达机器学习上的有所重复，就记录得比较简单，可见<a href="/2019/09/18/Re-recognizing-machine-learning/#神经网络">这里</a>，还有一篇<a href="https://zhuanlan.zhihu.com/p/58787190">笔记</a>也我觉得也记得很好。</p>
<span id="more"></span>
<h1 id="深度学习符号"><a href="#深度学习符号" class="headerlink" title="深度学习符号"></a>深度学习符号</h1><p><em>此笔记中使用的数学符号参考自《深度学习》和 Deep learning specialization</em></p>
<h2 id="常用的定义"><a href="#常用的定义" class="headerlink" title="常用的定义"></a>常用的定义</h2><ul>
<li>原版符号定义中，$x^{(i)}$ 与 $x_i$ 存在混用的情况，请注意识别</li>
</ul>
<h3 id="数据标记与上下标"><a href="#数据标记与上下标" class="headerlink" title="数据标记与上下标"></a>数据标记与上下标</h3><ul>
<li>上标 $^{(i)}$ 代表第 $i$ 个训练样本</li>
<li>上标 $^{[l]}$ 代表第 $l$ 层</li>
<li>$m$ 数据集的样本数</li>
<li>下标 $_x$ 输入数据</li>
<li>下标 $_y$ 输出数据</li>
<li>$n_x$ 输入大小</li>
<li>$n_y$ 输出大小 (或者类别数)</li>
<li>$n_h^{[l]}$ 第 $l$ 层的隐藏单元数</li>
<li>$L$ 神经网络的层数</li>
<li>在循环中<ul>
<li>$n_x = n_h^{[0]}$</li>
<li>$n_y = n_h^{[L + 1]}$</li>
</ul>
</li>
</ul>
<h3 id="神经网络模型"><a href="#神经网络模型" class="headerlink" title="神经网络模型"></a>神经网络模型</h3><ul>
<li>$X \in \mathbb{R}^{n_x \times m}$ 代表输入的矩阵</li>
<li>$x^{(i)} \in \mathbb{R}^{n_x}$ 代表第 $i$ 个样本的列向量</li>
<li>$Y \in \mathbb{R}^{n_y \times m}$ 是标记矩阵</li>
<li>$y^{(i)} \in \mathbb{R}^{n_y}$ 是第 $i$样本的输出标签</li>
<li>$W^{[l]} \in \mathbb{R}^{l \times (l-1)}$ 代表第 $[l]$ 层的权重矩阵</li>
<li>$b^{[l]} \in \mathbb{R}^{l}$ 代表第 $[l]$ 层的偏差矩阵</li>
<li>$\hat{y} \in \mathbb{R}^{n_y}$ 是预测输出向量<ul>
<li>也可以用 $a^{[L]}$ 表示</li>
</ul>
</li>
</ul>
<h4 id="正向传播方程示例"><a href="#正向传播方程示例" class="headerlink" title="正向传播方程示例"></a>正向传播方程示例</h4><ul>
<li><script type="math/tex">a = g^{[l]}(W_x x^{(i)}_ + b_1) = g^{[l]}(z_1)</script>. <ul>
<li>其中， $g^{[l]}$ 代表第 $l$ 层的激活函数</li>
</ul>
</li>
<li>$\hat{y} = softmax(W_h h + b_2)$</li>
</ul>
<h4 id="通用激活公式"><a href="#通用激活公式" class="headerlink" title="通用激活公式"></a>通用激活公式</h4><ul>
<li><script type="math/tex">a_j^{[l]} = g^{[l]}(z_j^{[l]}) = g^{[l]}(\sum_k w_{jk}^{[l]}a_k^{[l-1]} + b_j^{[l]})</script>.<ul>
<li>$j$ 当前层的维度</li>
<li>$k$ 上一层的维度</li>
</ul>
</li>
</ul>
<h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><ul>
<li>$J(x, W, b, y)$ 或者 $J(\hat{y}, y)$</li>
<li>常见损失函数示例<ul>
<li><script type="math/tex">J_{CE}(\hat{y}, y) = -\sum_{i=0}^m y^{(i)}log\hat{y}^{(i)}</script>.</li>
<li><script type="math/tex">J_1(\hat{y}, y) = -\sum_{i=0}^m |y^{(i)} - \hat{y}^{(i)}|</script>.</li>
</ul>
</li>
</ul>
<h2 id="深度学习图示"><a href="#深度学习图示" class="headerlink" title="深度学习图示"></a>深度学习图示</h2><ul>
<li>节点：代表输入、激活或者输出</li>
<li>边：代表权重或者误差</li>
</ul>
<p>提供两种等效的示意图</p>
<h3 id="详细的网络"><a href="#详细的网络" class="headerlink" title="详细的网络"></a>详细的网络</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/5.png" alt="5"></p>
<p>常用于神经网络的表示,为了更好的审美，我们省略了一些在边上的参数的细节(如<script type="math/tex">w_{ij}^{[l]}</script> 和$b_{i}^{[l]}$等)。</p>
<h3 id="简化网络"><a href="#简化网络" class="headerlink" title="简化网络"></a>简化网络</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/6.png" alt="6"></p>
<p>两层神经网络的更简单的表示。</p>
<h1 id="神经网络和深度学习"><a href="#神经网络和深度学习" class="headerlink" title="神经网络和深度学习"></a>神经网络和深度学习</h1><h2 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h2><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>为什么神经网络需要非线性激活函数？为了产生非线性映射关系拟合更加丰富的函数。</p>
<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>传统使用的激活函数是<strong>sigmoid</strong>，与<strong>tanh</strong>一样可以将值映射到-1到+1之间。结果表明在隐藏层上使用<strong>tanh</strong>函数效果上往往比<strong>sigmoid</strong>要好，因为<strong>tanh</strong>的均值更接近于0而不是0.5。事实上，可以将<strong>tanh</strong>看作是<strong>sigmoid</strong>函数向下平移和伸缩后的结果。<strong>sigmoid</strong>函数和<strong>tanh</strong>函数两者共同的缺点是，在$z$特别大或者特别小的情况下，导数的梯度或者函数的斜率会变得特别小，最后就会接近于0，导致梯度消失。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/1.png" alt="1" style="zoom:80%;"></p>
<p>后来衍生出了另一个激活函数<strong>ReLU(Rectified Linear Unit)</strong>，以及另一个版本<strong>Leaky ReLU</strong>，这个函数通常比<strong>ReLU</strong>激活效果要好，因为<strong>Relu</strong>进入负半区的时候，梯度为0，神经元此时不会训练，产生所谓的稀疏性，而<strong>Leaky ReLu</strong>不会有这问题。但是在实际中<strong>Leaky ReLu</strong>用的并不多，虽然它的训练效果比较好，但是同样的它会增加计算量。</p>
<p>这两者相比<strong>sigmoid</strong>和<strong>tanh</strong>的优点在于：</p>
<ul>
<li>在$z$的区间变动很大的情况下，激活函数的导数或者激活函数的斜率都会远大于0，另外使用<strong>ReLu</strong>激活函数神经网络通常会比使用<strong>sigmoid</strong>或者<strong>tanh</strong>激活函数学习的更快。</li>
<li><strong>sigmoid</strong>和<strong>tanh</strong>函数的导数在正负饱和区的梯度都会接近于0，这会造成梯度消失，而<strong>Relu</strong>和<strong>Leaky ReLu</strong>函数大于0部分都为常数，不会产生梯度消失现象。</li>
</ul>
<p>选择激活函数的一些经验法则：</p>
<ul>
<li>对于<strong>sigmoid</strong>如果输出是0、1值（二分类问题），则输出层选择<strong>sigmoid</strong>函数，然后其它的所有单元都选择<strong>Relu</strong>函数。</li>
<li><strong>tanh</strong>激活函数：<strong>tanh</strong>是非常优秀的，几乎适合所有场合。</li>
<li><strong>ReLu</strong>激活函数：最常用的默认函数，，如果不确定用哪个激活函数，就使用<strong>ReLu</strong>或者<strong>Leaky ReLu</strong>。</li>
</ul>
<h4 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h4><p><strong>sigmoid</strong> </p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/2.png" alt="2"></p>
<script type="math/tex; mode=display">
\frac{d}{dz}g(z) = \frac{1}{1 + e^{-z}} (1-\frac{1}{1 + e^{-z}})=g(z)(1-g(z))</script><p>注：</p>
<ul>
<li><p>当$z$ = 10或$z= -10$ ; $\frac{d}{dz}g(z)\approx 0$</p>
</li>
<li><p>当$z $= 0 , $\frac{d}{dz}g(z)=g(z)(1-g(z))=\frac{1}{4}$</p>
</li>
</ul>
<p><strong>tanh</strong></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/3.png" alt="3"></p>
<script type="math/tex; mode=display">
g(z) = tanh(z) = \frac{e^{z} - e^{-z}}{e^{z} + e^{-z}} \\
\frac{d}{dz}g(z) = 1 - (tanh(z))^{2}</script><p>注：</p>
<ul>
<li><p>当$z$ = 10或$z= -10$  $\frac{d}{dz}g(z)\approx 0$</p>
</li>
<li><p>当$z$ = 0,  $\frac{d}{dz}g(z)=1-0=1$</p>
</li>
</ul>
<p><strong>ReLU</strong></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/4.png" alt="4"></p>
<script type="math/tex; mode=display">
g(z) =max (0,z)\\
g(z)^{'}=
  \begin{cases}
  0&    \text{if z < 0}\\
  1&    \text{if z > 0}\\
undefined&    \text{if z = 0}
\end{cases}</script><p>注：</p>
<ul>
<li>通常在$z = 0$的时候给定其导数</li>
</ul>
<h3 id="权重初始化"><a href="#权重初始化" class="headerlink" title="权重初始化"></a>权重初始化</h3><p>随机初始化：防止相同常数项对称问题（<strong>symmetry breaking problem</strong>）</p>
<h3 id="前向传播和反向传播"><a href="#前向传播和反向传播" class="headerlink" title="前向传播和反向传播"></a>前向传播和反向传播</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/7.png" style="zoom:80%;"></p>
<h4 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h4><p>步骤：</p>
<script type="math/tex; mode=display">
\begin{align}
&z^{[l]}=W^{[l]}\cdot a^{[l-1]}+b^{[l]}\\
&a^{[l]}=g^{[l]}\left( z^{[l]}\right)
\end{align}</script><p>向量化：</p>
<script type="math/tex; mode=display">
\begin{align}
&z^{[l]}=W^{[l]}\cdot A^{[l-1]}+b^{[l]}\\
&A^{[l]}=g^{[l]}(Z^{[l]})\\
\end{align}</script><h4 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h4><p>步骤：</p>
<script type="math/tex; mode=display">
\begin{align}
&dz^{[l]}=da^{[l]}*{g^{[l]}}'(z^{[l]})\\
&dw^{[l]}=dz^{[l]}\cdot a^{[l-1]}\\
&db^{[l]}=dz^{[l]}\\
&da^{[l-1]}=w^{\left[ l \right]T}\cdot dz^{[l]}\\
&dz^{[l]}=w^{[l+1]T}dz^{[l+1]}\cdot{g^{[l]}}'( z^{[l]})~
\end{align}</script><p>向量化：</p>
<script type="math/tex; mode=display">
\begin{align}
&dZ^{[l]}=dA^{[l]}*{g^{\left[ l \right]}}'\left(Z^{[l]} \right)~~\\
&dW^{[l]}=\frac{1}{m}dZ^{[l]}\cdot A^{\left[ l-1 \right]T}\\
&db^{[l]}=\frac{1}{m}np.sum(dz^{[l]},axis=1,keepdims=True)\\
&dA^{[l-1]}=W^{\left[ l \right]T}.dZ^{[l]}
\end{align}</script><h1 id="改善深层神经网络：超参数调试、正则化以及优化"><a href="#改善深层神经网络：超参数调试、正则化以及优化" class="headerlink" title="改善深层神经网络：超参数调试、正则化以及优化"></a>改善深层神经网络：超参数调试、正则化以及优化</h1><h2 id="深度学习的实践层面"><a href="#深度学习的实践层面" class="headerlink" title="深度学习的实践层面"></a>深度学习的实践层面</h2><h3 id="训练，验证，测试集"><a href="#训练，验证，测试集" class="headerlink" title="训练，验证，测试集"></a>训练，验证，测试集</h3><p>在机器学习发展的小数据量时代，常见做法是将所有数据三七分，就是人们常说的70%训练集，30%测试集。如果明确设置了验证集，也可以按照60%训练集，20%验证集和20%测试集来划分。</p>
<p>但是在大数据时代，我们现在的数据量可能是百万级别，那么验证集和测试集占数据总量的比例会趋向于变得更小。因为验证集的目的就是验证不同的算法，检验哪种算法更有效，因此，验证集只要足够大到能评估不同的算法。</p>
<p>假设我们有100万条数据，其中1万条作为验证集，1万条作为测试集，100万里取1万，比例是1%，即：训练集占98%，验证集和测试集各占1%。对于数据量过百万的应用，训练集可以占到99.5%，验证和测试集各占0.25%，或者验证集占0.4%，测试集占0.1%。</p>
<p>就算没有测试集也不要紧，测试集的目的是对最终所选定的神经网络系统做出无偏估计，如果不需要无偏估计，也可以不设置测试集。搭建训练验证集和测试集能够加速神经网络的集成，也可以更有效地衡量算法地偏差和方差，从而帮助我们更高效地选择合适方法来优化算法。</p>
<h3 id="偏差，方差"><a href="#偏差，方差" class="headerlink" title="偏差，方差"></a>偏差，方差</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/9.png" alt="9"></p>
<p>假设这就是数据集，如果给这个数据集拟合一条直线，可能得到一个逻辑回归拟合，但它并不能很好地拟合该数据，这是高偏差（<strong>high bias</strong>）的情况，我们称为“欠拟合”（<strong>underfitting</strong>）。</p>
<p>相反的如果我们拟合一个非常复杂的分类器，比如深度神经网络或含有隐藏单元的神经网络，可能就非常适用于这个数据集，但是这看起来也不是一种很好的拟合方式分类器方差较高（<strong>high variance</strong>），数据过度拟合（<strong>overfitting</strong>）。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/8.png" alt="8"></p>
<p>高方差、高偏差示意如上图。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/10.png" width="75%"></p>
<p>高偏差和高方差见上图的紫线，首先它是高偏差的，因为他几乎是线性的；其次它也是高方差的，因为这条曲线中间部分灵活性非常高，它过度拟合了这两个样本。</p>
<p>需要注意的地方：</p>
<p>高偏差和高方差是两种不同的情况，我们后续要尝试的方法也可能完全不同，我通常会用训练验证集来诊断算法是否存在偏差或方差问题，然后根据结果选择尝试部分方法。举个例子，如果算法存在高偏差问题，准备更多训练数据其实也没什么用处，至少这不是更有效的方法，所以大家要清楚存在的问题是偏差还是方差，还是两者都有问题，明确这一点有助于我们选择出最有效的方法。</p>
<p>在机器学习的初期阶段，关于所谓的偏差方差权衡的讨论屡见不鲜，原因是我们能尝试的方法有很多。可以增加偏差，减少方差，也可以减少偏差，增加方差，但是在深度学习的早期阶段，我们没有太多工具可以做到只减少偏差或方差却不影响到另一方。但在当前的深度学习和大数据时代，只要持续训练一个更大的网络，只要准备了更多数据，只要正则适度，通常构建一个更大的网络便可以，在不影响方差的同时减少偏差，而采用更多数据通常可以在不过多影响偏差的同时减少方差。</p>
<h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h4><p>在损失函数中加入L2正则项，最小化该损失函数，让参数变得稀疏，用于削弱某些值较小的隐藏单元的影响，从而使模型变得更加简单，以达到防止过拟合的目的。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/11.png" alt="11" style="zoom:80%;"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/12.png" alt="12" style="zoom:80%;"></p>
<h4 id="dropout-正则化"><a href="#dropout-正则化" class="headerlink" title="dropout 正则化"></a>dropout 正则化</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/13.png" alt="13"></p>
<p><strong>keep-prob</strong>：保留某个隐藏单元的概率</p>
<p><strong>inverted dropout</strong>（反向随机失活）方法通过除以<strong>keep-prob</strong>，确保输出的期望值不变</p>
<h4 id="其他正则化方法"><a href="#其他正则化方法" class="headerlink" title="其他正则化方法"></a>其他正则化方法</h4><h4 id="data-augmentation"><a href="#data-augmentation" class="headerlink" title="data augmentation"></a>data augmentation</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/14.png" alt="14"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/56.png" alt="14"></p>
<p>包括：翻转、裁剪、扭曲、旋转、颜色失真(PCA)</p>
<h4 id="early-stopping"><a href="#early-stopping" class="headerlink" title="early stopping"></a>early stopping</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/15.png" alt="15"></p>
<p><strong>early stopping</strong>代表提早停止训练神经网络。其优点是，只运行一次梯度下降，你可以找出$w$的较小值，中间值和较大值，而无需尝试$L2$正则化超级参数$\lambda$的很多值。 其缺点是，很难再减少方差和预防过拟合之间进行权衡取舍，因为考虑的东西变得更多了。</p>
<h3 id="归一化输入"><a href="#归一化输入" class="headerlink" title="归一化输入"></a>归一化输入</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/16.png" alt="16"></p>
<p>第一步是零均值化，$\mu = \frac{1}{m}\sum_{i =1}^{m}x^{(i)}$，它是一个向量，$x$等于每个训练数据 $x$减去$\mu$，意思是移动训练集，直到它完成零均值化。</p>
<p>第二步是归一化方差，注意特征<script type="math/tex">x_{1}</script>的方差比特征<script type="math/tex">x_{2}</script>的方差要大得多，我们要做的是给$\sigma$赋值，<script type="math/tex">\sigma^{2}= \frac{1}{m}\sum_{i =1}^{m}{({x^{(i)})}^{2}}</script>，这是节点$y$ 的平方，$\sigma^{2}$是一个向量，它的每个特征都有方差，注意，我们已经完成零值均化，$({x^{(i)})}^{2}$元素$y^{2}$就是方差，我们把所有数据除 以向量$\sigma^{2}$，最后变成上图形式。</p>
<p>归一化可以使得特征的范围映射到相似的范围内，这样有助于提升优化速度。</p>
<h3 id="梯度消失-爆炸"><a href="#梯度消失-爆炸" class="headerlink" title="梯度消失/爆炸"></a>梯度消失/爆炸</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/17.png" alt="16" style="zoom:67%;"></p>
<h3 id="权重初始化-1"><a href="#权重初始化-1" class="headerlink" title="权重初始化"></a>权重初始化</h3><p><strong>Xavier</strong>权重初始化：$W$ ~ <script type="math/tex">U[-\frac{\sqrt{6}}{\sqrt{n_j+n_{j+1}}}, \frac{\sqrt{6}}{\sqrt{n_j+n_{j+1}}}]</script></p>
<p><strong>Relu</strong>，方差为$\frac{2}{n}$，权重初始化为$\text{np.}\text{sqrt}(\frac{2}{n^{[l-1]}})$</p>
<p><strong>tanh</strong>权重初始化：$\sqrt{\frac{1}{n^{[l-1]}}}$</p>
<p>其他：<strong>Yoshua Bengio</strong>用的是$\sqrt{\frac{2}{n^{[l-1]} + n^{\left[l\right]}}}$</p>
<h3 id="梯度的数值逼近和检验"><a href="#梯度的数值逼近和检验" class="headerlink" title="梯度的数值逼近和检验"></a>梯度的数值逼近和检验</h3><p>见<a href="/2019/09/18/Re-recognizing-machine-learning/#梯度检测">上一篇博客</a>，检查$\varepsilon$为$10^{-7}$下，<script type="math/tex">\frac{||d\theta_{approx}-d\theta||}{||d\theta_{approx}||_2+||d\theta||_2}</script>的值，$d\theta\left[i \right]$是代价函数的偏导数，<script type="math/tex">d\theta_{approx}[i]</script>是梯度的数值逼近</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/18.png" alt="18" style="zoom:67%;"></p>
<p>注意事项：</p>
<ul>
<li>不要在训练的过程中使用，因为这会导致训练速度很慢</li>
<li>如果存在bug，需要检查每一项是否出错</li>
<li>如果使用了正则化，损失函数的计算也要加上正则项</li>
<li>不能dropout同用，这样会很难计算真实的代价函数</li>
<li>进行随机初始化；如果随机初始化值比较小，反复训练网络之后，再重新运行梯度检验。</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/19.png" alt="19" style="zoom:67%;"></p>
<h2 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h2><h3 id="Mini-batch-梯度下降"><a href="#Mini-batch-梯度下降" class="headerlink" title="Mini-batch 梯度下降"></a>Mini-batch 梯度下降</h3><p>为了提高优化速度，我们把训练集分隔为小一点的子集训练，这些子集被取名为<strong>mini-batch</strong>，假设每一个子集中有500万个样本，我们把其中的$x^{(1)}$到$x^{(1000)}$取出来，定义为$X^1$，称为将其称为第一个子训练集，也叫做<strong>mini-batch</strong>，这样一共有5000个<strong>mini-batch</strong>。<strong>mini-batch梯度下降</strong>做的就是每次在一个子训练集<strong>mini-batch</strong>中使用梯度下降法。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/20.png" alt="20" style="zoom:67%;"></p>
<p>因为每次的迭代的方向并不一定朝着梯度减少的方向，所以<strong>mini-batch</strong>梯度下降的损失函数会有震荡的形状。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/21.png" alt="21" style="zoom:67%;"></p>
<p>如果<strong>mini-batch size</strong>为n，则<strong>mini-batch</strong>梯度下降法将变为<strong>batch</strong>梯度下降法，由于每次迭代需要处理大量训练样本，所以如果样本数据量巨大的时候，单次迭代耗时会很长。</p>
<p>如果<strong>mini-batch size</strong>为1，则<strong>mini-batch</strong>梯度下降法将变为随机梯度下降法，随机梯度的是有很多噪声的，从平均来看，它最终会靠近最小值，但它永远不会收敛，而是会一直在最小值附近波动，因此需要根据迭代次数来调整学习率，使随机梯度下降法的结果更加接近最小值。另外使用随机梯度下降法的一个缺点是，将会失去所有向量化带来的加速，因为一次迭代只处理一个训练样本，这样效率非常低下。</p>
<p>如果<strong>mini-batch size</strong>在区间1到n之间，一方面<strong>mini-batch</strong>梯度下降法在样本数据量巨大的时候它的迭代速度较<strong>batch</strong>梯度下降法要更快，当然另一方面，它也不会一直朝着最小值靠近，但是它比随机梯度下降要更持续地靠近最小值的方向，它也不一定在很小的范围内收敛或者波动，同样需要学习率衰减。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/22.png" alt="22" style="zoom:67%;"></p>
<h3 id="指数加权平均数"><a href="#指数加权平均数" class="headerlink" title="指数加权平均数"></a>指数加权平均数</h3><p>关键方程<script type="math/tex">v_t=\beta v_{t-1}+(1-\beta )\theta_t</script></p>
<p>$\beta=0.9$大概是10天的平均值，$\beta=0.98$大概是50天的平均值，计算公式$\frac{1}{1-\beta}$，经过$\frac{1}{1-\beta}$天后，原来影响的曲线先下降到$\frac{1}{1-\beta}^{\frac{1}{\beta}}\approx0.34$，换句话说，10天后，曲线的高度下降到$\frac{1}{\beta}$，相当于在峰值的$\frac{1}{e}$。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/23.png" alt="23" style="zoom:67%;"></p>
<p>指数加权平均数公式的好处之一在于，它占用极少内存，电脑内存中只占用一行数字而已，然后把最新数据代入公式，不断覆盖就可以了。但缺点是，如果保存所有最近的温度数据，和过去10天的总和，必须占用更多的内存，执行更加复杂，计算成本也更加高昂。</p>
<p>偏差纠正，由于初始化<script type="math/tex">v_{0} = 0</script>，<script type="math/tex">v_{1} = 0.98v_{0} +0.02\theta_{1}</script>导致前面的值估测不准。纠正办法就是，在估测初期，不用<script type="math/tex">v_{t}</script>，而是用<script type="math/tex">\frac{v_{t}}{1- \beta^{t}}</script>，t就是现在的天数。举个具体例子，当$t=2$时，$1 - \beta^{t} = 1 -  {0.98}^{2} = 0.0396$，因此对第二天温度的估测变成了<script type="math/tex">\frac{v_{2}}{0.0396} =\frac{0.0196\theta_{1} +  0.02\theta_{2}}{0.0396}</script>，也就是<script type="math/tex">\theta_{1}</script>和<script type="math/tex">\theta_{2}</script>的加权平均数，并去除了偏差。随着$t$增加，$\beta^{t}$接近于0，所以当$t$很大的时候，偏差修正几乎没有作用。不过在开始学习阶段，偏差修正可以帮助你更好预测值。</p>
<h3 id="动量梯度下降法"><a href="#动量梯度下降法" class="headerlink" title="动量梯度下降法"></a>动量梯度下降法</h3><p>目标，在横轴上学习得快一点，在纵轴上学习得慢一点。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/24.png" alt="24" style="zoom:67%;"></p>
<p>实现细节：</p>
<p>在第$t$次迭代的过程中，首先计算微分$dW$，$db$。其次，计算<script type="math/tex">v_{dW}= \beta v_{dW} + \left( 1 - \beta \right)dW</script>，这跟之前的计算相似，也就是<script type="math/tex">v = \beta v + \left( 1 - \beta \right)\theta_{t}</script>，$dW$的移动平均数，接着同样地计算<script type="math/tex">v_{db}</script>，<script type="math/tex">v_{db} = \beta v_ + ( 1 - \beta){db}</script>，然后重新赋值权重，<script type="math/tex">W:= W -av_{dW}</script>，同样<script type="math/tex">b:= b - a v_{db}</script>，这样就可以减缓梯度下降的幅度。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/25.png" alt="25" style="zoom:67%;"></p>
<p>动量梯度下降法一共有两个超参数，学习率$\alpha$以及参数$\beta$，$\beta$控制着指数加权平均数，往往取0.9。关于偏差修正，我们要拿<script type="math/tex">v_{dW}</script>和<script type="math/tex">v_{db}</script>除以<script type="math/tex">1-\beta^{t}</script>，在实际操作中往往会忽略偏差的影响。</p>
<p>有些版本会删除$1-\beta$，最后得到<script type="math/tex">v_{dW}= \beta v_{dW} +dW</script>，所以<script type="math/tex">v_{dW}</script>缩小了$1-\beta$倍，相当于乘以$\frac{1}{1- \beta}$，所以你要用梯度下降最新值的话，$a$要根据$\frac{1}{1 -\beta}$相应变化。实际上，二者效果都不错，只会影响到学习率$a$的最佳值。</p>
<h3 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h3><p>全称是<strong>root mean square prop</strong>算法。回忆一下之前的例子，如果你执行梯度下降，虽然横轴方向正在推进，但纵轴方向会有大幅度摆动，为了分析这个例子，假设纵轴代表参数$b$，横轴代表参数$W$，可能有<script type="math/tex">W_{1}</script>，<script type="math/tex">W_{2}</script>或者其它重要的参数，为了便于理解，被称为$b$和$W$。所以，如果想减缓$b$方向的学习，即纵轴方向，同时加快，至少不是减缓横轴方向的学习，<strong>RMSprop</strong>算法可以实现这一点。</p>
<p>实现细节：</p>
<p>在第$t$次迭代中，该算法会照常计算当下<strong>mini-batch</strong>的微分$dW$，$db$，定义新符号<script type="math/tex">S_{dW}= \beta S_{dW} + (1 -\beta) {dW}^{2}</script>，澄清一下，这个平方的操作是针对这一整个符号的，这样做能够保留微分平方的加权平均数，同样<script type="math/tex">S_{db}= \beta S_{db} + (1 - \beta){db}^{2}</script>。接着<strong>RMSprop</strong>会这样更新参数值，<script type="math/tex">W:= W -a\frac{dW}{\sqrt{S_{dW}}}</script>，<script type="math/tex">b:=b -\alpha\frac{db}{\sqrt{S_{db}}}</script></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/26.png" alt="26" style="zoom:67%;"></p>
<p>我们希望学习速度快，也就是在水平方向，我们希望<script type="math/tex">S_{dW}</script>会相对较小，所以我们要除以一个较小的数；我们希望减缓纵轴上的摆动，也就是在垂直方向上，我们希望<script type="math/tex">S_{db}</script>会相对较大，所以我们要除以一个较大的数。</p>
<p><strong>RMSprop</strong>的影响就是你的更新最后会变成这样（绿色线），纵轴方向上摆动较小，而横轴方向继续推进。还有个影响就是，你可以用一个更大学习率$a$，然后加快学习，而无须在纵轴上垂直方向偏离。在实际中$dW$和$db$可能是一个高维的参数向量，但是目标都是去掉那些有摆动的方向。另外，为了确保算法不会除以0，在实际操作中往往在分母上加入一个很小很小的$\epsilon$，比如$10^{-8}$，这样有助于保证数值的稳定。</p>
<h3 id="Adam-优化算法"><a href="#Adam-优化算法" class="headerlink" title="Adam 优化算法"></a>Adam 优化算法</h3><p><strong>Adam</strong>代表的是<strong>Adaptive Moment Estimation</strong>，<script type="math/tex">\beta_1</script>用于计算这个微分（$dW$），叫做第一矩，<script type="math/tex">\beta_2</script>用来计算平方数的指数加权平均数（$(dW)^2$），叫做第二矩，所以<strong>Adam</strong>的名字由此而来。</p>
<p>实现细节：</p>
<p>使用<strong>Adam</strong>算法，首先初始化，<script type="math/tex">v_{dW} = 0</script>，<script type="math/tex">S_{dW} =0</script>，<script type="math/tex">v_{db} = 0</script>，<script type="math/tex">S_{db} =0</script>，在第$t$次迭代中，计算微分，用当前的<strong>mini-batch</strong>计算$dW$，$db$，一般你会用<strong>mini-batch</strong>梯度下降法。接下来计算<strong>Momentum</strong>指数加权平均数，所以<script type="math/tex">v_{dW}= \beta_1v_{dW} + ( 1 - \beta_1)dW</script>（使用<script type="math/tex">\beta_1</script>，这样就不会跟超参数<script type="math/tex">\beta_2</script>混淆，因为后面<strong>RMSprop</strong>要用到<script type="math/tex">\beta_2</script>），同样<script type="math/tex">v_{db}= \beta_{1}v_{db} + ( 1 -\beta_{1} ){db}</script>。</p>
<p>接着用<strong>RMSprop</strong>进行更新，即用不同的超参数<script type="math/tex">\beta_2</script>，<script type="math/tex">S_{dW}=\beta_{2}S_{dW} + ( 1 - \beta_{2}){(dW)}^{2}</script>，再说一次，这里是对整个微分$dW$进行平方处理，<script type="math/tex">S_{db} =\beta_{2}S_{db} + \left( 1 - \beta_{2} \right){(db)}^{2}</script>。</p>
<p>相当于<strong>Momentum</strong>更新了超参数<script type="math/tex">\beta_1</script>，<strong>RMSprop</strong>更新了超参数<script type="math/tex">\beta_2</script>。一般使用<strong>Adam</strong>算法的时候，要计算偏差修正<script type="math/tex">v_{dW}^{corrected}= \frac{v_{dW}}{1 - \beta_1^t}</script>，同样<script type="math/tex">v_{db}^{corrected} =\frac{v_{db}}{1 -\beta_1^t}</script>。$S$也使用偏差修正，也就是<script type="math/tex">S_{dW}^{corrected} =\frac{S_{dW}}{1 - \beta_2^t}</script>，<script type="math/tex">S_{db}^{corrected} =\frac{S_{db}}{1 - \beta_2^t}</script>。</p>
<p>最后更新权重，所以$W$更新后是<script type="math/tex">W:= W - \alpha\frac{ v_{dW}^{corrected}}{\sqrt{S_{dW}^{corrected}} +\varepsilon}</script>（如果你只是用<strong>Momentum</strong>，使用<script type="math/tex">v_{dW}</script>或者修正后的<script type="math/tex">v_{dW}</script>，但现在我们加入了<strong>RMSprop</strong>的部分，所以我们要除以修正后<script type="math/tex">S_{dW}</script>的平方根加上$\varepsilon$）。根据类似的公式更新$b$值，<script type="math/tex">b:=b - \alpha\frac{v_{db}^{corrected}}{\sqrt{S_{db}^{corrected}} +\varepsilon}</script>。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/27.png" alt="27" style="zoom:67%;"></p>
<p>本算法中有很多超参数，超参数学习率$a$很重要，也经常需要调试。<script type="math/tex">\beta_1</script>常用的缺省值为0.9，这是dW的移动平均数，也就是$dW$的加权平均数，这是<strong>Momentum</strong>涉及的项。至于超参数<script type="math/tex">\beta_2</script>，<strong>Adam</strong>论文作者，也就是<strong>Adam</strong>算法的发明者，推荐使用0.999，这是在计算$(dW)^2$以及$(db)^2$的移动加权平均值。关于$\varepsilon$的选择其实没那么重要，<strong>Adam</strong>论文的作者建议$\varepsilon$为$10^{-8}$，但你并不需要设置它，因为它并不会影响算法表现。</p>
<h3 id="学习率衰减"><a href="#学习率衰减" class="headerlink" title="学习率衰减"></a>学习率衰减</h3><p>为了解决<strong>mini-batch</strong>梯度下降法和随机梯度下降法的收敛问题，需要对学习率进行动态调整。</p>
<p>常规方法：<script type="math/tex">a=\frac{1}{1+decayRate\;*\;epochNum}a_0</script> ，其中<strong>decay-rate</strong>称为衰减率，<strong>epoch-num</strong>为迭代数，$\alpha_{0}$为初始学习率，衰减率和初始学习率都是需要调整的超参数。</p>
<p>指数衰减：其中$a$相当于一个小于1的值，如$a ={0.95}^{\text{epoch-num}} a_{0}$，学习率呈指数下降</p>
<p>其它公式有<script type="math/tex">a =\frac{k}{\sqrt{epoch-num}}a_0</script>或者<script type="math/tex">a =\frac{k}{\sqrt{t}}a_0</script>（$t$为<strong>mini-batch</strong>的数字）。</p>
<p>离散下降，某个步骤有某个学习率（<strong>discrete stair cease</strong>），一会之后，学习率减少了一半，一会儿减少一半，一会儿又一半。</p>
<h3 id="局部最优的问题"><a href="#局部最优的问题" class="headerlink" title="局部最优的问题"></a>局部最优的问题</h3><p>一个高维的神经网络，通常梯度为零的点并不是这个图中的局部最优点，实际上损失函数的零梯度点，通常是鞍点，因此我们不容易到达局部最优。</p>
<p>局部最优不是问题，问题在于平稳段会减缓学习，平稳段是一块区域，其中导数长时间接近于0，如果你在此处，梯度会从曲面从从上向下下降，因为梯度等于或接近0，曲面很平坦，你得花上很长时间慢慢抵达平稳段的这个点。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/28.png" alt="28" style="zoom:67%;"></p>
<h2 id="超参数调试、Batch正则化"><a href="#超参数调试、Batch正则化" class="headerlink" title="超参数调试、Batch正则化"></a>超参数调试、Batch正则化</h2><h3 id="调试处理"><a href="#调试处理" class="headerlink" title="调试处理"></a>调试处理</h3><p>尝试使用随机值，而不是用网格搜索。因为在高维空间中，很难知道哪个超参数是相对更重要的，随机能够发现效果更好的那个。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/29.png" alt="29" style="zoom:50%;"></p>
<p>从粗到细的进行搜索。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/30.png" alt="30" style="zoom:50%;"></p>
<h3 id="为超参数选择合适的范围"><a href="#为超参数选择合适的范围" class="headerlink" title="为超参数选择合适的范围"></a>为超参数选择合适的范围</h3><p>对搜索空间进行映射，比如在0.0001，0.001，0.01，0.1，1范围内对数轴上均匀随机取点，如果这里使用线性轴进行搜索，那么0.1~1的空间就会占据90%的搜索空间，而0.0001~0.1只有10%的搜索空间，因此使用数标尺搜索超参数的方式会更合理，做法是在-4~0之间随机取样记作$a$，再使用公式$10^a$映射到超参数所在的空间。那么如果我们想在0.9~0.999的区间进行搜索应该怎么做，考虑这个问题的方法是我们要探究的是$1-\beta$，这个值在0.1~0.001区间，这样就可以用前面所述的方法进行。</p>
<h3 id="超参数调试的实践"><a href="#超参数调试的实践" class="headerlink" title="超参数调试的实践"></a>超参数调试的实践</h3><p>一种是你照看一个模型，通常是有庞大的数据组，但没有许多计算资源或足够的<strong>CPU</strong>和<strong>GPU</strong>的前提下，基本而言，你一次只可以负担起试验一个模型或一小批模型。在这种情况下，即使当它在试验时，你也可以逐渐改良，比如逐渐修改它的学习率。</p>
<p>另一种方法则是同时试验多种模型，你设置了一些超参数，尽管让它自己运行，或者是一天甚至多天，然后你会获得像这样的学习曲线，这可以是损失函数$J$或实验误差或损失或数据误差的损失，但都是你曲线轨迹的度量。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/31.png" alt="31" style="zoom:75%;"></p>
<h3 id="归一化网络的激活函数"><a href="#归一化网络的激活函数" class="headerlink" title="归一化网络的激活函数"></a>归一化网络的激活函数</h3><p>在深度学习兴起后，最重要的一个思想是它的一种算法，叫做<strong>Batch</strong>归一化，由<strong>Sergey loffe</strong>和<strong>Christian Szegedy</strong>两位研究者创造。<strong>Batch</strong>归一化会使你的参数搜索问题变得很容易，使神经网络对超参数的选择更加稳定，超参数的范围会更加庞大，工作效果也很好，也会是你的训练更加容易，甚至是深层网络。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/32.png" alt="32" style="zoom:75%;"></p>
<p>如上，首先计算平均值，强调一下，所有这些都是针对$l$层，但省略了$l$及方括号，然后计算方差，接着，取每个$z^{(i)}$值，使其规范化。方法如下，减去均值再除以标准偏差，为了使数值稳定，通常将$\varepsilon$作为分母，以防$σ=0$的情况。</p>
<p>现在我们已把这些$z$值标准化，化为含平均值0和标准单位方差，所以$z$的每一个分量都含有平均值0和方差1，但我们不想让隐藏单元总是含有平均值0和方差1，也许隐藏单元有了不同的分布会有意义，所以我们所要做的就是计算，我们称之为${\tilde{z}}^{(i)}$，<script type="math/tex">{\tilde{z}}^{(i)}= \gamma z_{\text{norm}}^{(i)} +\beta</script>，这里$\gamma$和$\beta$是你模型的学习参数，所以我们使用梯度下降或一些其它类似梯度下降的算法，比如<strong>Momentum</strong>或者<strong>Nesterov</strong>，<strong>Adam</strong>，我们将会更新$\gamma$和$\beta$，正如更新神经网络的权重一样。</p>
<p>请注意$\gamma$和$\beta$的作用是，我们可以随意设置${\tilde{z}}^{(i)}$的平均值，事实上，如果<script type="math/tex">\gamma= \sqrt{\sigma^{2} +\varepsilon}</script>，如果$\gamma$等于这个分母项（<script type="math/tex">z_{\text{norm}}^{(i)} = \frac{z^{(i)} -\mu}{\sqrt{\sigma^{2} +\varepsilon}}</script>中的分母），$\beta$等于$\mu$，这里的这个值是<script type="math/tex">z_{\text{norm}}^{(i)}= \frac{z^{(i)} - \mu}{\sqrt{\sigma^{2} + \varepsilon}}</script>中的$\mu$，那么<script type="math/tex">\gamma z_{\text{norm}}^{(i)} +\beta</script>的作用在于，如果这些成立（<script type="math/tex">\gamma =\sqrt{\sigma^{2} + \varepsilon},\beta =\mu</script>），那么<script type="math/tex">{\tilde{z}}^{(i)} = z^{(i)}</script>。</p>
<p>从根本来说，这只是计算恒等函数，以构造含其它平均值和方差的隐藏单元值。</p>
<h3 id="将-Batch-Norm-拟合进神经网络"><a href="#将-Batch-Norm-拟合进神经网络" class="headerlink" title="将 Batch Norm 拟合进神经网络"></a>将 Batch Norm 拟合进神经网络</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/33.png" alt="33" style="zoom:75%;"></p>
<p>如上图所示，$\beta$和$\gamma$的计算介于神经元输入$z$和输出$a$之间，同时在梯度下降法中也需要更新这两值，比如$\beta$为$\beta^{[l]} = \beta^{[l]} - \alpha d\beta^{[l]}$，需要注意区别的就是不要将<strong>Batch Norm</strong>中的$\beta$与<strong>Adam</strong>优化算法中的$\beta$弄混。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/34.png" alt="34" style="zoom:75%;"></p>
<p>实践中，<strong>Batch</strong>归一化通常和训练集的<strong>mini-batch</strong>一起使用。你应用<strong>Batch</strong>归一化的方式就是：你用第一个<strong>mini-batch</strong>($X^1$)，然后计算$z^{[1]}$，这和上张幻灯片上我们所做的一样，应用参数$w^{[1]}$和$b^{[1]}$，使用这个<strong>mini-batch</strong>($X^1$)。接着，继续第二个<strong>mini-batch</strong>($X^2$)，接着<strong>Batch</strong>归一化会减去均值，除以标准差，由${\beta}^{[1]}$和$\gamma^{[1]}$重新缩放，这样就得到了${\tilde{z}}^{[1]}$，而所有的这些都是在第一个<strong>mini-batch</strong>的基础上，你再应用激活函数得到$a^{[1]}$。然后用$w^{[2]}$和$b^{[2]}$计算$z^{[2]}$，等等，所以你做的这一切都是为了在第一个<strong>mini-batch</strong>($X^1$)上进行一步梯度下降法。</p>
<p>类似的工作，你会在第二个<strong>mini-batch</strong>（$X^{\left{2 \right}}$）上计算$z^{[1]}$，然后用<strong>Batch</strong>归一化来计算${\tilde{z}}^{[1]}$，所以<strong>Batch</strong>归一化的此步中，你用第二个<strong>mini-batch</strong>（$X^{\left{2 \right}}$）中的数据使${\tilde{z}}^{[1]}$归一化，这里的<strong>Batch</strong>归一化步骤也是如此，让我们来看看在第二个<strong>mini-batch</strong>（$X^{\left{2 \right}}$）中的例子，在<strong>mini-batch</strong>上计算$z^{[1]}$的均值和方差，重新缩放的$\beta$和$\gamma$得到$z^{[1]}$，等等。然后在第三个<strong>mini-batch</strong>（$X^{\left{ 3 \right}}$）上同样这样做，继续训练。</p>
<p>澄清此参数的一个细节，即参数$b$的影响。先前提及每层的参数是$w^{[l]}$和$b^{[l]}$，还有${\beta}^{[l]}$和$\gamma^{[l]}$，首先注意计算$z$的方式如下，$z^{[l]} =w^{[l]}a^{\left\lbrack l - 1 \right\rbrack} +b^{[l]}$，而<strong>Batch</strong>归一化做的是，它要看这个<strong>mini-batch</strong>，先将$z^{[l]}$归一化，结果为均值0和标准方差，再由$\beta$和<script type="math/tex">\gamma</script>重缩放，但这意味着，无论$b^{[l]}$的值是多少，都是要被减去的，因为在<strong>Batch</strong>归一化的过程中，你要计算$z^{[l]}$的均值，再减去平均值，在此例中的<strong>mini-batch</strong>中增加任何常数，数值都不会改变，因为加上的任何常数都将会被均值减去所抵消。</p>
<p>所以，如果你在使用<strong>Batch</strong>归一化，其实你可以消除这个参数（$b^{[l]}$），或者你也可以，暂时把它设置为0，那么，参数变成$z^{[l]} = w^{[l]}a^{\left\lbrack l - 1 \right\rbrack}$，然后你计算归一化的$z^{[l]}$，${\tilde{z}}^{[l]} = \gamma^{[l]}z^{[l]} + {\beta}^{[l]}$，你最后会用参数${\beta}^{[l]}$，以便决定${\tilde{z}}^{[l]}$的取值，这就是原因。</p>
<p>所以总结一下，因为<strong>Batch</strong>归一化超过了此层$z^{[l]}$的均值，$b^{[l]}$这个参数没有意义，所以，你必须去掉它，由${\beta}^{[l]}$代替，这是个控制参数，会影响转移或偏置条件。</p>
<p>最后，请记住$z^{[l]}$的维数，因为在这个例子中，维数会是$(n^{[l]},1)$，$b^{[l]}$的尺寸为$(n^{[l]},1)$，如果是l层隐藏单元的数量，那${\beta}^{[l]}$和$\gamma^{[l]}$的维度也是$(n^{[l]},1)$，因为这是你隐藏层的数量，你有$n^{[l]}$隐藏单元，所以${\beta}^{[l]}$和$\gamma^{[l]}$用来将每个隐藏层的均值和方差缩放为网络想要的值。</p>
<h3 id="Batch-Norm-为什么奏效？"><a href="#Batch-Norm-为什么奏效？" class="headerlink" title="Batch Norm 为什么奏效？"></a>Batch Norm 为什么奏效？</h3><p>直观而言，<strong>BN</strong>让输入$x$获得类似的范围，这可以加速学习。另一个原因是，它可以使权重比你的网络更滞后或更深层。</p>
<p>一个形象的理解就是，在左边训练得很好的模块，同样在右边也运行得很好，即使存在运行都很好的同一个函数，因为如果只看左边数据的话，可能是一个线性的分类器，而不是绿色的决策边界。就好比训练出来的分类器能够很好的区分黑猫和其他非猫图片，但是不一定能在非黑猫和非猫图片很好地分类。因为黑猫和非黑猫不在同一个分布中。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/35.png" alt="35" style="zoom:75%;"></p>
<p>所以我们想办法改变数据分布，这个想法被称为“<strong>Covariate shift</strong>”，想法是这样的，如果你已经学习了$x$到$y$ 的映射，如果$x$ 的分布改变了，那么你可能需要重新训练你的学习算法。这种做法同样适用于，如果真实函数由$x$ 到$y$ 映射保持不变，正如此例中，因为真实函数是此图片是否是一只猫，训练你的函数的需要变得更加迫切，如果真实函数也改变，情况就更糟了。</p>
<p>“<strong>Covariate shift</strong>”在神经网络的应用就是，神经网络隐藏层的值会受到前面输入的影响，这导致隐藏单元的值不断地改变，所以它就有了“<strong>Covariate shift</strong>”的问题，<strong>Batch</strong>归一化做的是其限制了在前层的参数更新，会影响数值分布的程度，这将减少了这些隐藏值分布变化的数量。</p>
<p><strong>Batch</strong>归一化还有一个作用，它有轻微的正则化效果，<strong>Batch</strong>归一化中非直观的一件事是，每个<strong>mini-batch</strong>，我会说<strong>mini-batch</strong>$X^$的值为$z^{\lbrack t\rbrack}$，$z^{[l]}$，在<strong>mini-batch</strong>计算中，由均值和方差缩放的，因为在<strong>mini-batch</strong>上计算的均值和方差，而不是在整个数据集上，均值和方差有一些小的噪声，因为它只在你的<strong>mini-batch</strong>上计算，比如64或128或256或更大的训练例子。因为均值和方差有一点小噪音，因为它只是由一小部分数据估计得出的。缩放过程从$z^{[l]}$到${\tilde{z}}^{[l]}$，过程也有一些噪音，因为它是用有些噪音的均值和方差计算得出的。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/36.png" alt="36" style="zoom:75%;"></p>
<p>所以和<strong>dropout</strong>相似，它往每个隐藏层的激活值上增加了噪音，<strong>dropout</strong>有增加噪音的方式，它使一个隐藏的单元，以一定的概率乘以0，以一定的概率乘以1，所以你的<strong>dropout</strong>含几重噪音，因为它乘以0或1。</p>
<p>对比而言，<strong>Batch</strong>归一化含几重噪音，因为标准偏差的缩放和减去均值带来的额外噪音。这里的均值和标准差的估计值也是有噪音的，所以类似于<strong>dropout</strong>，<strong>Batch</strong>归一化有轻微的正则化效果，因为给隐藏单元添加了噪音，这迫使后部单元不过分依赖任何一个隐藏单元，类似于<strong>dropout</strong>，它给隐藏层增加了噪音，因此有轻微的正则化效果。因为添加的噪音很微小，所以并不是巨大的正则化效果，可以将<strong>Batch</strong>归一化和<strong>dropout</strong>一起使用，这将得到<strong>dropout</strong>更强大的正则化效果。</p>
<p>也许另一个轻微非直观的效果是，如果应用了较大的<strong>mini-batch</strong>，比如说用了512而不是64，通过应用较大的<strong>min-batch</strong>，减少了噪音，因此减少了正则化效果，这是<strong>dropout</strong>的一个奇怪的性质，就是应用较大的<strong>mini-batch</strong>可以减少正则化效果。</p>
<p>但是不要把<strong>Batch</strong>归一化当作正则化，虽然有时它会对你的算法有额外的期望效应或非期望效应，应该把它当作归一化隐藏单元激活值并加速学习的方式，而正则化只是一个意想不到的副作用。</p>
<h3 id="测试时的-Batch-Norm"><a href="#测试时的-Batch-Norm" class="headerlink" title="测试时的 Batch Norm"></a>测试时的 Batch Norm</h3><p><strong>Batch</strong>归一化将你的数据以<strong>mini-batch</strong>的形式逐一处理，但在测试时，你可能需要对每个样本逐一处理，我们来看一下怎样调整你的网络来做到这一点。</p>
<p>在测试时，对应这个等式（<script type="math/tex">z_{\text{norm}}^{(i)} = \frac{z^{(i)} -\mu}{\sqrt{\sigma^{2} +\varepsilon}}</script>），只需要用$z$值来计算<script type="math/tex">z_{\text{norm}}^{(i)}</script>，用$\mu$和$\sigma^{2}$的指数加权平均，用手头的最新数值来做调整，然后就可以用刚算出来的<script type="math/tex">z_{\text{norm}}</script>和你在神经网络训练过程中得到的$\beta$和$\gamma$参数来计算测试样本的$\tilde{z}$值。</p>
<p>对于样本则需要逐步处理，方法是根据训练集估算$\mu$和$\sigma^{2}$，估算的方式有很多种，理论上可以在最终的网络中运行整个训练集来得到$\mu$和$\sigma^{2}$，但在实际操作中，通常运用指数加权平均来追踪在训练过程中的$\mu$和$\sigma^{2}$的值。还可以用指数加权平均，有时也叫做流动平均来粗略估算$\mu$和$\sigma^{2}$，然后在测试中使用$\mu$和$\sigma^{2}$的值来进行所需要的隐藏单元$z$值的调整。在实践中，不管用什么方式估算$\mu$和$\sigma^{2}$，这套过程都是比较稳健的，如果使用的是某种深度学习框架，通常会有默认的估算$\mu$和$\sigma^{2}$的方式，应该一样会起到比较好的效果。但在实践中，任何合理的估算隐藏单元$z$值的均值和方差的方式，在测试中应该都会有效。</p>
<h3 id="Softmax-回归"><a href="#Softmax-回归" class="headerlink" title="Softmax 回归"></a>Softmax 回归</h3><p><strong>softmax</strong>层用于对多分类做预测，计算公式为：<script type="math/tex">S_i=\frac{e^i}{\sum_je^j}</script></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/37.png" alt="37" style="zoom:75%;"></p>
<p>直观来讲，它是一个线性分类器</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/38.png" alt="38" style="zoom:75%;"></p>
<h3 id="训练一个-Softmax-分类器"><a href="#训练一个-Softmax-分类器" class="headerlink" title="训练一个 Softmax 分类器"></a>训练一个 Softmax 分类器</h3><p>举个例子，我们来看看训练集中某个样本的目标输出，真实标签是$\begin{bmatrix} 0 \ 1 \ 0 \ 0 \ \end{bmatrix}$，假设神经网络输出的是$\hat y$，$\hat y$是一个包括总和为1的概率的向量，$y = \begin{bmatrix} 0.3 \ 0.2 \ 0.1 \ 0.4 \ \end{bmatrix}$，在<strong>Softmax</strong>分类中，我们一般用到的损失函数是<script type="math/tex">L(\hat y,y ) = - \sum_{j = 1}^{4}{y_{j}log\hat y_{j}}</script>，在这个例子中，<script type="math/tex">L\left( \hat y,y \right) = - \sum_{j = 1}^{4}{y_{j}\log \hat y_{j}} = - y_{2}{\ log} \hat y_{2} = - {\ log} \hat y_{2}</script>，这就意味着，如果你的学习算法试图将它变小，因为梯度下降法是用来减少训练集的损失的，要使它变小的唯一方式就是使$-{\log}\hat y<em>{2}$变小，要想做到这一点，就需要使$\hat y</em>{2}$尽可能大，也就是让真实标签的输出尽可能大。</p>
<p>这是单个训练样本的损失，对于整个训练集的损失$J$而言，就是整个训练集损失的总和，把你的训练算法对所有训练样本的预测都加起来，<script type="math/tex">J( w^{[1]},b^{[1]},\ldots\ldots) = \frac{1}{m}\sum_{i = 1}^{m}{L( \hat y^{(i)},y^{(i)})}</script>，接下来要做的就是使用梯度下降法，使这里的损失最小化。</p>
<h1 id="结构化机器学习项目"><a href="#结构化机器学习项目" class="headerlink" title="结构化机器学习项目"></a>结构化机器学习项目</h1><h2 id="机器学习（ML）策略（1）"><a href="#机器学习（ML）策略（1）" class="headerlink" title="机器学习（ML）策略（1）"></a>机器学习（ML）策略（1）</h2><ul>
<li><p>常见的ML策略</p>
<ul>
<li>Collect more data</li>
<li>Collect more diverse training set</li>
<li>Train algorithm longer with gradient descent</li>
<li>Try Adam instead of gradient descent</li>
<li>Try bigger network</li>
<li>Try smaller network</li>
<li>Try dropout</li>
<li>Add <script type="math/tex">L_2</script> regularization</li>
<li>Network architecture<ul>
<li>Activation functions</li>
<li>hidden units</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>正交化</strong>，将输入特征转换到彼此之间独立的维度上，互不影响。</p>
</li>
<li><p>建立<strong>单一数字评估指标</strong>来评估模型，比如查全率，查准率、F1 score等</p>
</li>
<li><p><strong>满足和优化指标</strong>，相当于在有约束的条件下（比如算法运行时间），算法达到的准确率要求。</p>
</li>
<li><p><strong>训练/开发/测试集划分</strong>，在设立开发集和测试集时，要选择这样的开发集和测试集，能够反映你未来会得到的数据，认为很重要的数据，必须得到好结果的数据，特别是，这里的开发集和测试集可能来自同一个分布。</p>
</li>
<li><p><strong>开发集和测试集的大小</strong>，全部数据用70/30比例分成训练集和测试集，或者如果你必须设立训练集、开发集和测试集，你会这么分60%训练集，20%开发集，20%测试集，在机器学习的早期，这样分是相当合理的，特别是以前的数据集大小要小得多。但在现代机器学习中，我们更习惯操作规模大得多的数据集，比如说你有1百万个训练样本，这样分可能更合理，98%作为训练集，1%开发集，1%测试集，我们用$D$和$T$缩写来表示开发集和测试集。因为如果你有1百万个样本，那么1%就是10,000个样本，这对于开发集和测试集来说可能已经够了。</p>
</li>
<li><p><strong>什么时候该改变开发/测试集和指标？</strong>，具体问题具体分析。</p>
</li>
<li><p><strong>贝叶斯最优错误率</strong>随着时间的推移，当继续训练算法时，可能模型越来越大，数据越来越多，但是性能无法超过某个理论上限，这就是所谓的贝叶斯最优错误率（<strong>Bayes optimal error</strong>）。贝叶斯最优错误率一般认为是理论上可能达到的最优错误率，就是说没有任何办法设计出一个$x$到$y$的函数，让它能够超过一定的准确度。为什么当你超越人类的表现时，进展会慢下来？一个原因是人类水平在很多任务中离贝叶斯最优错误率已经不远了。第二个原因是，只要你的表现比人类的表现更差，那么实际上可以使用某些工具来提高性能。一旦你超越了人类的表现，这些工具就没那么好用了。思考人类水平错误率最有用的方式之一是，把它作为贝叶斯错误率的替代或估计，但实际的贝叶斯错误率应该在人类水平错误率之下。</p>
</li>
<li><p><strong>可避免偏差</strong>，贝叶斯错误率或者对贝叶斯错误率的估计和训练错误率之间的差值称为可避免偏差，用于算法在方差问题上还有多少改善空间。</p>
</li>
<li><p><strong>改善你的模型表现</strong>，想要让一个监督学习算法达到实用，首先，算法对训练集的拟合很好，这可以看成是你能做到可避免偏差很低。其次，在训练集中做得很好，然后推广到开发集和测试集也很好，这就是说方差不是太大。</p>
</li>
</ul>
<h2 id="机器学习（ML）策略（2）"><a href="#机器学习（ML）策略（2）" class="headerlink" title="机器学习（ML）策略（2）"></a>机器学习（ML）策略（2）</h2><ul>
<li><p><strong>进行误差分析</strong>，在错误样本中，观察错误标记的样本，看看假阳性（<strong>false positives</strong>）和假阴性（<strong>false negatives</strong>），统计属于不同错误类型的错误数量进行分析。</p>
</li>
<li><p><strong>清除标注错误的数据</strong></p>
</li>
<li><strong>快速搭建你的第一个系统，并进行迭代</strong></li>
<li><strong>使用来自不同分布的数据，进行训练和测试</strong>，如不同分辨率的图像</li>
<li><p><strong>数据分布不匹配时，偏差与方差的分析</strong>，原因是，首先算法只见过训练集数据，没见过开发集数据。第二，开发集数据来自不同的分布，因此为了弄清楚哪个因素影响更大，所以需要对偏差和方差进行分析。假设已经设立过这样的训练集、开发集和测试集了，并且开发集和测试集来自相同的分布，但训练集来自不同的分布。接下来要做的是随机打散训练集，然后分出一部分训练集作为训练-开发集（training-dev），就像开发集和测试集来自同一分布，训练集、训练-开发集也来自同一分布。</p>
<ul>
<li>训练误差是1%，训练-开发集上的误差是9%，开发集误差是10%，这说明算法存在方差问题，因为训练-开发集的错误率是在和训练集来自同一分布的数据中测得的</li>
<li>训练误差为1%，训练-开发误差为1.5%，开发集误差是10%，这说明算法数据分布不匹配。</li>
<li>训练误差是10%，训练-开发误差是11%，开发误差为12%，这说明算法存在偏差问题。</li>
<li>训练集错误率是10%，训练-开发错误率是11%，开发错误率是20%。这说明算法既有偏差问题，又有数据匹配问题。</li>
</ul>
</li>
<li><p><strong>处理数据不匹配问题</strong>，如人工合成数据。</p>
</li>
<li><p><strong>迁移学习</strong>，神经网络可以从一个任务中习得知识，并将这些知识应用到另一个独立的任务中，这就是所谓的迁移学习。迁移学习起作用的场合是，在迁移来源问题中你有很多数据，但迁移目标问题你没有那么多数据。如果你想从任务$A$学习并迁移一些知识到任务$B$，那么当任务$A$和任务$B$都有同样的输入$x$时，迁移学习是有意义的。其次当任务$A$的数据比任务$B$多得多，迁移学习意义更大。</p>
</li>
<li><strong>多任务学习</strong>，在迁移学习中，其步骤是串行的，即从任务$A$里学习只是然后迁移到任务$B$。在多任务学习中，则是同时开始学习的，试图让单个神经网络同时做几件事情，然后希望这里每个任务都能帮到其他所有任务。多任务学习什么时候是有意义的？<ul>
<li>第一，如果训练的一组任务，有可以共用低层次特征。对于无人驾驶的例子，同时识别交通灯、汽车和行人是有道理的，这些物体有相似的特征，也许能帮助识别停车标志，因为这些都是道路上的特征。</li>
<li>第二，如果专注于单项任务，如果想要从多任务学习得到很大性能提升，那么其他任务加起来必须要有比单个任务大得多的数据量，这样其他任务的知识才能帮你改善这个任务的性能。</li>
<li>第三，训练一个足够大的神经网络，为每个任务训练一个单独的神经网络。</li>
</ul>
</li>
<li><strong>端到端的深度学习</strong>，用于学习输入$x$到输出$y$之间的函数映射，优点在于不需要手工设计流水线组件，挑战在于，需要大量数据才能让系统表现良好。</li>
</ul>
<h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><h2 id="卷积神经网络-1"><a href="#卷积神经网络-1" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><h3 id="计算机视觉任务"><a href="#计算机视觉任务" class="headerlink" title="计算机视觉任务"></a>计算机视觉任务</h3><p>图片分类、图片识别、目标检测、图片风格迁移</p>
<h3 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h3><ul>
<li>垂直边缘：<script type="math/tex">\begin{bmatrix}1 & 0 & -1\\ 1 & 0 & -1\\ 1 & 0 & -1\end{bmatrix}</script></li>
<li>水平边缘：<script type="math/tex">\begin{bmatrix}1 & 1 & 1\\ 0 & 0 & 0\\ -1 & -1 & -1\end{bmatrix}</script></li>
<li>Sobel 过滤器： <script type="math/tex">\begin{bmatrix}1 & 0 & - 1 \\ 2 & 0 & - 2 \\ 1 & 0 & - 1 \\\end{bmatrix}</script></li>
<li>Scharr 过滤器：<script type="math/tex">\begin{bmatrix} 3& 0 & - 3 \\ 10 & 0 & - 10 \\ 3 & 0 & - 3 \\\end{bmatrix}</script></li>
</ul>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>如果有一个$n×n$的图像，用$f×f$的过滤器做卷积，那么输出的维度就是$(n-f+1)×(n-f+1)$。</p>
<p>这样的话会有两个缺点，第一个缺点是每次做卷积操作，你的图像就会缩小。第二个缺点是角落边缘的像素，这个像素点（绿色阴影标记）只被一个输出所触碰或者使用，因为它位于这个3×3的区域的一角；而中间的像素会有许多3×3的区域与之重叠。所以那些在角落或者边缘区域的像素点在输出中采用较少，意味着你丢掉了图像边缘位置的许多信息。因此需要对像素进行填充，至于选择填充多少像素，通常有两个选择，分别叫做<strong>Valid</strong>卷积和<strong>Same</strong>卷积。</p>
<ul>
<li><strong>Valid</strong>卷积意味着不填充，这样的话，如果你有一个$n×n$的图像，用一个$f×f$的过滤器卷积，它将会给你一个$(n-f+1)×(n-f+1)$维的输出。</li>
<li><strong>Same</strong>卷积意味填充后，你的输出大小和输入大小是一样的。根据这个公式$n-f+1$，当你填充$p$个像素点，$n$就变成了$n+2p$，最后公式变为$n+2p-f+1$。因此如果你有一个$n×n$的图像，用$p$个像素填充边缘，输出的大小就是这样的$(n+2p-f+1)×(n+2p-f+1)$。如果你想让$n+2p-f+1=n$的话，使得输出和输入大小相等，如果你用这个等式求解$p$，那么$p=(f-1)/2$。所以当$f$是一个奇数的时候，只要选择相应的填充尺寸，你就能确保得到和输入相同尺寸的输出。</li>
</ul>
<p>计算机视觉中，$f$通常是奇数，很少看到一个偶数的过滤器在计算机视觉里使用，这里认为有两个原因。</p>
<ul>
<li>其一，如果$f$是一个偶数，那么只能使用一些不对称填充。只有$f$是奇数的情况下，<strong>Same</strong>卷积才会有自然的填充，才可以以同样的数量填充四周，而不是左边填充多一点，右边填充少一点，这样不对称的填充。</li>
<li>其二，对于奇数维过滤器，它有一个中心点，在计算机视觉里，如果有一个中心像素点会更方便，便于指出过滤器的位置。</li>
</ul>
<h3 id="卷积步长"><a href="#卷积步长" class="headerlink" title="卷积步长"></a>卷积步长</h3><p>如果用一个$f×f$的过滤器卷积一个$n×n$的图像，<strong>padding</strong>为$p$，步长为$s$，输出将变为$\frac{n+2p - f}{s} + 1 \times \frac{n+2p - f}{s} + 1$，注意垂直和水平方向都是这个步长。如果商不是整数，在这种情况下通常向下取整，这个原则实现的方式是，只有在卷积核完全包括在图像或填充完的图像内部时，才对它进行运算。因此为了正确计算输出维度的方法是向下取整，以免$\frac{n + 2p - f}{s}$不是整数。</p>
<h3 id="三维卷积"><a href="#三维卷积" class="headerlink" title="三维卷积"></a>三维卷积</h3><p>如果你有一个<script type="math/tex">n \times n \times n_{c}</script>（通道数）的输入图像，这里的<script type="math/tex">n_{c}</script>就是通道数目，然后卷积上一个<script type="math/tex">f×f×n_{c}</script>，按照惯例，这个（前一个<script type="math/tex">n_{c}</script>）和这个（后一个<script type="math/tex">n_{c}</script>）必须数值相同，可以得到了<script type="math/tex">（n-f+1）×（n-f+1）×n_{c^{'}}</script>，这里<script type="math/tex">n_{c^{'}}</script>其实就是下一层的通道数，也等于使用的过滤器的个数。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/42.png" alt="42" style="zoom:100%;"></p>
<h3 id="单层卷积网络"><a href="#单层卷积网络" class="headerlink" title="单层卷积网络"></a>单层卷积网络</h3><p>在卷积层，用$f^{[l]}$表示过滤器大小，过滤器大小为$f×f$，上标$\lbrack l\rbrack$表示$l$层中过滤器大小为$f×f$。通常情况下，上标$\lbrack l\rbrack$用来标记$l$层。用$p^{[l]}$来标记<strong>padding</strong>的数量，<strong>padding</strong>数量也可指定为一个<strong>valid</strong>卷积，即无<strong>padding</strong>。或是<strong>same</strong>卷积，即选定<strong>padding</strong>，如此一来，输出和输入图片的高度和宽度就相同了。用$s^{[l]}$标记步幅。</p>
<p>这一层的输入会是某个维度的数据，表示为<script type="math/tex">n \times n \times n_{c}</script>，<script type="math/tex">n_{c}</script>某层上的颜色通道数。稍作修改增加上标$\lbrack l -1\rbrack$，即<script type="math/tex">n^{\left\lbrack l - 1 \right\rbrack} \times n^{\left\lbrack l -1 \right\rbrack} \times n_{c}^{\left\lbrack l - 1\right\rbrack}</script>，因为它是上一层的激活值。图片的高度和宽度分别用上下标$H$和$W$来标记，即<script type="math/tex">n_{H}^{\left\lbrack l - 1 \right\rbrack} \times n_{W}^{\left\lbrack l - 1 \right\rbrack} \times n_{c}^{\left\lbrack l - 1\right\rbrack}</script>。那么在第$l$层，图片大小为<script type="math/tex">n_{H}^{\left\lbrack l - 1 \right\rbrack} \times n_{W}^{\left\lbrack l - 1  \right\rbrack} \times n_{c}^{\left\lbrack l - 1\right\rbrack}</script>，$l$层的输入就是上一层的输出，因此上标要用$\lbrack l - 1\rbrack$。神经网络这一层中会有输出，它本身会输出图像。其大小为<script type="math/tex">n_{H}^{[l]} \times n_{W}^{[l]} \times n_{c}^{[l]}</script>，这就是输出图像的大小。</p>
<p>公式$\lfloor\frac{n+2p - f}{s} + 1\rfloor$（注意：（$\frac{n + 2p - f}{s} +1)$直接用这个运算结果，也可以向下取整）给出了输出图片的高度和宽度。在这个新表达式中，$l$层输出图像的高度，即<script type="math/tex">n_{H}^{[l]} = \lfloor\frac{n_{H}^{\left\lbrack l - 1 \right\rbrack} +2p^{[l]} - f^{[l]}}{s^{[l]}} +1\rfloor</script>，同样计算出图像的宽度，用$W$替换参数$H$，即<script type="math/tex">n_{W}^{[l]} = \lfloor\frac{n_{W}^{\left\lbrack l - 1 \right\rbrack} +2p^{[l]} - f^{[l]}}{s^{[l]}} +1\rfloor</script>，公式一样，只要变化高度和宽度的参数我们便能计算输出图像的高度或宽度。这就是由<script type="math/tex">n_{H}^{\left\lbrack l - 1 \right\rbrack}</script>推导<script type="math/tex">n_{H}^{[l]}$以及$n_{W}^{\left\lbrack l - 1\right\rbrack}</script>推导<script type="math/tex">n_{W}^{[l]}</script>的过程。</p>
<p>最后过滤器中通道的数量必须与输入中通道的数量一致。因此，输出通道数量就是输入通道数量，所以过滤器维度等于<script type="math/tex">f^{[l]} \times f^{[l]} \times n_{c}^{\left\lbrack l - 1 \right\rbrack}</script>。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/43.png" alt="43" style="zoom:100%;"></p>
<p>用偏差和非线性函数之后，这一层的输出等于它的激活值$a^{[l]}$，也就是这个维度（输出维度）。$a^{[l]}$是一个三维体，即<script type="math/tex">n_{H}^{[l]} \times n_{W}^{[l]} \times n_{c}^{[l]}</script>。当执行批量梯度下降或小批量梯度下降时，如果有$m$个例子，就是有$m$个激活值的集合，那么输出<script type="math/tex">A^{[l]} = m \times n_{H}^{[l]} \times n_{W}^{[l]} \times n_{c}^{[l]}</script>。如果采用批量梯度下降，变量的排列顺序如下，首先是索引和训练示例，然后是其它三个变量。</p>
<p>对于权重参数$W$的确定，由于过滤器的维度已知，为<script type="math/tex">f^{[l]} \times  f^{[l]} \times  n_{c}^{[l - 1]}</script>，这只是一个过滤器的维度，有多少个过滤器，这（<script type="math/tex">n_{c}^{[l]}</script>）是过滤器的数量，权重也就是所有过滤器的集合再乘以过滤器的总数量，即<script type="math/tex">f^{[l]} \times f^{[l]} \times  n_{c}^{[l - 1]} \times n_{c}^{[l]}</script>，损失数量L就是$l$层中过滤器的个数。</p>
<p>对于偏差参数$b$的确定，每个过滤器都有一个偏差参数，它是一个实数。偏差包含了这些变量，它是该维度上的一个向量。为了方便，偏差在代码中表示为一个1×1×1×<script type="math/tex">n_{c}^{[l]}</script>的四维向量或四维张量。</p>
<p>卷积有很多种标记方法，这是我们最常用的卷积符号。关于高度，宽度和通道的顺序并没有完全统一的标准卷积。有些作者会采用把通道放在首位的编码标准，有时所有变量都采用这种标准；而在某些架构中，当检索这些图片时，会有一个变量或参数来标识计算通道数量和通道损失数量的先后顺序。只要保持一致，这两种卷积标准都可用。</p>
<h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>如果用一个$f×f$的过滤器池化一个$n×n$的图像，<strong>padding</strong>为$p$，步长为$s$，输出将变为$\frac{n+2p - f}{s} + 1 \times \frac{n+2p - f}{s} + 1$，和卷积是一样的。大部分情况下，最大池化很少用<strong>padding</strong>。目前$p$最常用的值是0，即$p=0$。最大池化的输入就是<script type="math/tex">n_{H} \times n_{W} \times n_{c}</script>，假设没有<strong>padding</strong>，则输出<script type="math/tex">\lfloor\frac{n_{H} - f}{s} +1\rfloor \times \lfloor\frac{n_{w} - f}{s} + 1\rfloor \times n_{c}</script>，输入通道与输出通道个数相同，需要注意的一点是，池化过程中没有需要学习的参数。</p>
<p>常用的池化层有最大池化<strong>max-pooling</strong>和平均池化<strong>average-pooling</strong></p>
<h3 id="使用卷积的原因"><a href="#使用卷积的原因" class="headerlink" title="使用卷积的原因"></a>使用卷积的原因</h3><p>与只使用全连接层相比，卷积层的两个主要优势在于参数共享和稀疏连接。</p>
<p>全连接层存在的问题是参数非常庞大，卷积网络映射这么少参数有两个原因：</p>
<ul>
<li>一是<strong>参数共享</strong>。观察发现，特征检测如垂直边缘检测如果适用于图片的某个区域，那么它也可能适用于图片的其他区域。每个特征检测器以及输出都可以在输入图片的不同区域中使用同样的参数，以便提取垂直边缘或其它特征。它不仅适用于边缘特征这样的低阶特征，同样适用于高阶特征，例如提取脸上的眼睛，猫或者其他特征对象。</li>
<li>二是<strong>稀疏连接</strong>。图中绿色框框住的0是通过3×3的卷积计算得到的，它只依赖于这个3×3的输入的单元格，右边这个红色框框住的输出单元0仅与36个输入特征中9个相连接。而且其它像素值都不会对输出产生任影响，这就是稀疏连接的概念。</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/44.png" alt="44" style="zoom:67%;"></p>
<p>神经网络可以通过这两种机制减少参数，以便我们用更小的训练集来训练它，从而预防过度拟合。</p>
<h2 id="深度卷积网络：实例探究"><a href="#深度卷积网络：实例探究" class="headerlink" title="深度卷积网络：实例探究"></a>深度卷积网络：实例探究</h2><h3 id="经典网络"><a href="#经典网络" class="headerlink" title="经典网络"></a>经典网络</h3><h4 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/45.png" alt="45" style="zoom:100%;"></p>
<p>结构如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>layer</th>
<th>filter</th>
<th>padding</th>
<th>stripe</th>
<th>output</th>
<th>neuron</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>32x32x1</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>5x5@6</td>
<td>0</td>
<td>1</td>
<td>28x28x6</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@6</td>
<td>0</td>
<td>2</td>
<td>14x14x6</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>5x5@16</td>
<td>0</td>
<td>1</td>
<td>10x10x16</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@16</td>
<td>0</td>
<td>2</td>
<td>5x5x16</td>
<td>400</td>
</tr>
<tr>
<td>全连接层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>120</td>
</tr>
<tr>
<td>全连接层(输出层)</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>84</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>激活函数使用<strong>sigmoid</strong>和<strong>tanh</strong></li>
<li>池化层使用<strong>average pooling</strong></li>
<li>先卷积后池化的套路</li>
<li>现在版本的<strong>LeNet-5</strong>输出层一般采用<strong>softmax</strong>激活函数，在原论文的不是，但其现在不常用。</li>
</ul>
<h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/46.png" alt="46" style="zoom:75%;"></p>
<p>结构如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>layer</th>
<th>fileter</th>
<th>padding</th>
<th>stripe</th>
<th>output</th>
<th>neuron</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>227x227x3</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>11x11@96</td>
<td>0</td>
<td>4</td>
<td>55x55x96</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>3x3@1</td>
<td>0</td>
<td>2</td>
<td>27x27x96</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>5x5@256</td>
<td>same</td>
<td>1</td>
<td>27x27x256</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>3x3@1</td>
<td>0</td>
<td>2</td>
<td>13x13x256</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>3x3@384</td>
<td>same</td>
<td>1</td>
<td>13x13x384</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>3x3@384</td>
<td>same</td>
<td>1</td>
<td>13x13x384</td>
<td>-</td>
</tr>
<tr>
<td>卷积层</td>
<td>3x3@256</td>
<td>same</td>
<td>1</td>
<td>13x13x256</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>3x3@1</td>
<td>0</td>
<td>2</td>
<td>6x6x256</td>
<td>9216</td>
</tr>
<tr>
<td>全连接层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>4096</td>
</tr>
<tr>
<td>全连接层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>4096</td>
</tr>
<tr>
<td>全连接层(softmax)</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>1000</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>大约 60 million 个参数 </li>
<li>使用<strong>ReLU</strong>作为激活函数</li>
<li><strong>LRN</strong>层后来被发现用处不大</li>
</ul>
<h4 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/47.png" alt="47" style="zoom:75%;"></p>
<p>vgg-16结构如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>layer</th>
<th>filter</th>
<th>paddding</th>
<th>stride</th>
<th>output</th>
<th>neuron</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入层</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>224x224x3</td>
<td>-</td>
</tr>
<tr>
<td>卷积层x2</td>
<td>3x3@64</td>
<td>same</td>
<td>1</td>
<td>224x224x64</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@1</td>
<td>0</td>
<td>2</td>
<td>112x112x64</td>
<td>-</td>
</tr>
<tr>
<td>卷积层x2</td>
<td>3x3@128</td>
<td>same</td>
<td>1</td>
<td>112x112x128</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@1</td>
<td>0</td>
<td>2</td>
<td>56x56x128</td>
<td>-</td>
</tr>
<tr>
<td>卷积层x3</td>
<td>3x3@256</td>
<td>same</td>
<td>1</td>
<td>56x56x256</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@1</td>
<td>0</td>
<td>2</td>
<td>28x28x256</td>
<td>-</td>
</tr>
<tr>
<td>卷积层x3</td>
<td>3x3x512</td>
<td>same</td>
<td>1</td>
<td>28x28x512</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@1</td>
<td>0</td>
<td>2</td>
<td>14x14x512</td>
<td>-</td>
</tr>
<tr>
<td>卷积层x3</td>
<td>3x3@512</td>
<td>same</td>
<td>1</td>
<td>14x14x512</td>
<td>-</td>
</tr>
<tr>
<td>池化层</td>
<td>2x2@1</td>
<td>0</td>
<td>2</td>
<td>7x7x512</td>
<td>25088</td>
</tr>
<tr>
<td>全连接层x2</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>4096</td>
</tr>
<tr>
<td>全连接层(softmax)</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>1000</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>计算层数的时候不把池化层考虑进去</li>
<li><p>总参数1.38亿个</p>
</li>
<li><p>由于<strong>VGG-16</strong>的表现几乎和<strong>VGG-19</strong>不分高下，所以很多人还是会使用<strong>VGG-16</strong></p>
</li>
</ul>
<h3 id="残差网络ResNet"><a href="#残差网络ResNet" class="headerlink" title="残差网络ResNet"></a>残差网络ResNet</h3><p>网络结构：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/48.png" alt="48" style="zoom:75%;"></p>
<ul>
<li>实线的Connection部分都是执行3x3x64的卷积，他们的channel个数一致，所以采用计算方式：$Y = F(x) + x $</li>
<li>虚线的Connection部分是3x3x64和3x3x128的卷积操作，他们的channel个数不同，所以采用计算方式：$ y=F(x)+Wx $。其中$W$是卷积操作，用来调整$x$的channel维度。 </li>
</ul>
<p><strong>Residual block:</strong></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/49.png" alt="49" style="zoom:75%;"></p>
<ul>
<li>计算表达式为<script type="math/tex">a^{\left\lbrack l + 2\right\rbrack} = g(z^{\left\lbrack l + 2 \right\rbrack} + a^{\left\lbrack l\right\rbrack})</script></li>
</ul>
<h3 id="InceptionNet"><a href="#InceptionNet" class="headerlink" title="InceptionNet"></a>InceptionNet</h3><h4 id="1x1卷积"><a href="#1x1卷积" class="headerlink" title="1x1卷积"></a>1x1卷积</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/50.png" alt="50" style="zoom:75%;"></p>
<ul>
<li>将多通道的信息归一</li>
<li>既可扩充通道数，也可减少通道数</li>
<li>用于降低计算量</li>
</ul>
<h4 id="Inception"><a href="#Inception" class="headerlink" title="Inception"></a>Inception</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/51.png" alt="51" style="zoom:75%;"></p>
<ul>
<li><strong>Inception</strong>网络或<strong>Inception</strong>层的作用就是代替人工来确定卷积层中的过滤器类型，或者确定是否需要创建卷积层或池化层。</li>
</ul>
<h4 id="结合1x1和inception"><a href="#结合1x1和inception" class="headerlink" title="结合1x1和inception"></a>结合1x1和inception</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/52.png" alt="52" width="60%"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/53.png" alt="53" width="60%"></p>
<ul>
<li>1x1其作为瓶颈层(<strong>bottleneck layer</strong>)用以降低计算量，如果直接使用5x5卷积，总参数会达到1.2亿，如果先使用1x1卷积，再使用5x5卷积，总参数仅仅为1240万。</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/54.png" alt="54" style="zoom:75%;"></p>
<ul>
<li>结合1x1和inception构造出来inception module，将模块化的思想引入神经网络</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/55.png" alt="55" style="zoom:75%;"></p>
<ul>
<li>不同<strong>inception module</strong>可能有<strong>max-pooling</strong>进行连接</li>
<li>不同分支的<strong>softmax</strong>用来做预测</li>
</ul>
<h2 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h2><h3 id="目标定位"><a href="#目标定位" class="headerlink" title="目标定位"></a>目标定位</h3><p>图像分类、目标定位、目标检测：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/57.png" alt="57" style="zoom:75%;"></p>
<p>目标标签$y$的定义如下：<script type="math/tex">y= \ \begin{bmatrix} p_{c} \\ b_{x} \\ b_{y} \\ b_{h} \\ b_{w} \\ c_{1} \\ c_{2}\\ c_{3} \\\end{bmatrix}</script>，第一个组件<script type="math/tex">p_{c}</script>表示是否含有对象，如果对象属于前三类（行人、汽车、摩托车），则<script type="math/tex">p_{c}= 1</script>，如果是背景，则图片中没有要检测的对象，则<script type="math/tex">p_{c} =0</script>。我们可以这样理解<script type="math/tex">p_{c}</script>，它表示被检测对象属于某一分类的概率，背景分类除外。如果检测到对象，就输出被检测对象的边界框参数<script type="math/tex">b_{x}</script>、<script type="math/tex">b_{y}</script>、<script type="math/tex">b_{h}</script>和<script type="math/tex">b_{w}</script>。最后，如果存在某个对象，那么<script type="math/tex">p_{c}=1</script>，同时输出<script type="math/tex">c_{1}</script>、<script type="math/tex">c_{2}</script>和<script type="math/tex">c_{3}</script>，表示该对象属于1-3类中的哪一类，是行人，汽车还是摩托车。边界框参数示意图如下</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/58.png" alt="58" style="zoom:75%;"></p>
<h3 id="特征点检测"><a href="#特征点检测" class="headerlink" title="特征点检测"></a>特征点检测</h3><p>对于特征点检测，若有64个特征点，则目标标签有129个单元，第一个单元输出1或0，1表示有人脸，0表示没有人脸，然后输出（<script type="math/tex">l_{1x}</script>，<script type="math/tex">l_{1y}</script>）……直到（<script type="math/tex">l_{64x}</script>，<script type="math/tex">l_{64y}</script>）。对于人体姿态检测也是同样的道理，可以定义一些关键特征点，如胸部的中点，左肩，左肘，腰等等， 比如说，从胸部中心点(<script type="math/tex">l_{1x}</script>，<script type="math/tex">l_{1y}</script>)一直往下，直到(<script type="math/tex">l_{32x}</script>，<script type="math/tex">l_{32y}</script>)。。然后通过神经网络标注人物姿态的关键特征点，再输出这些标注过的特征点，就相当于输出了人物的姿态动作。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/59.png" alt="59" style="zoom:75%;"></p>
<h3 id="目标检测-1"><a href="#目标检测-1" class="headerlink" title="目标检测"></a>目标检测</h3><p>简单滑动窗口目标检测，通过改变步长和滑动窗口大小检测目标，存在的问题：计算成本过高</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/60.png" alt="60" style="zoom:100%;"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/61.png" alt="61" style="zoom:100%;"></p>
<h3 id="滑动窗口的卷积实现"><a href="#滑动窗口的卷积实现" class="headerlink" title="滑动窗口的卷积实现"></a>滑动窗口的卷积实现</h3><p>参考论文：<strong>Sermanet, Pierre, et al. “OverFeat: Integrated Recognition, Localization and Detection using Convolutional Networks.” <em>Eprint Arxiv</em> (2013).</strong></p>
<p>回顾将全连接层转化为卷积层的过程：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/62.png" alt="62" style="zoom:75%;"></p>
<p>动机，在滑动窗口卷积操作中存在很多重复计算，所以滑动窗口卷积操作的原理是我们不需要把输入图像分割成四个子集，分别执行前向传播，而是把它们作为一张图片输入给卷积网络进行计算，其中的公共区域可以共享很多计算。这样可以一次得到所有预测值的同时，又能提高整个算法的效率。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/63.png" alt="63" style="zoom:75%;"></p>
<p>不过这种算法仍然存在一个缺点，就是边界框的位置可能不够准确</p>
<h3 id="Bounding-Box预测"><a href="#Bounding-Box预测" class="headerlink" title="Bounding Box预测"></a>Bounding Box预测</h3><p>上述算法存在的问题是，不能够预先知道目标物体的长宽，因此在设定边框的时候恨不准确。一个能得到更精准边界框的算法是<strong>YOLO</strong>算法，<strong>YOLO</strong>(<strong>You only look once</strong>)意思是你只看一次，这是由<strong>Joseph Redmon</strong>，<strong>Santosh Divvala</strong>，<strong>Ross Girshick</strong>和<strong>Ali Farhadi</strong>提出的算法，论文名字叫<strong>You Only Look Once: Unified, Real-Time Object Detection.</strong></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/64.png" alt="64" style="zoom:100%;"></p>
<p>输出标签是<script type="math/tex">y= \ \begin{bmatrix} p_{c} \\ b_{x} \\ b_{y} \\ b_{h} \\ b_{w} \\ c_{1} \\ c_{2}\\ c_{3} \\\end{bmatrix}</script>，<script type="math/tex">p_{c}</script>等于0或1取决于这个绿色格子中是否有图像。然后<script type="math/tex">b_{x}</script>、<script type="math/tex">b_{y}</script>、<script type="math/tex">b_{h}</script>和<script type="math/tex">b_{w}</script>作用就是，如果那个格子里有对象，那么就给出边界框坐标。然后<script type="math/tex">c_{1}</script>、<script type="math/tex">c_{2}</script>和<script type="math/tex">c_{3}</script>就是想要识别的三个类别。</p>
<p>把对象分配到一个格子的过程是，观察对象的中点，然后将这个对象分配到其中点所在的格子，所以即使对象可以横跨多个格子，也只会被分配到9个格子其中之一，就是3×3网络的其中一个格子，或者19×19网络的其中一个格子。在19×19网格中，两个对象的中点（图中蓝色点所示）处于同一个格子的概率就会更低。</p>
<p>（我的理解）然后用神经网络来做回归。</p>
<h3 id="交并比"><a href="#交并比" class="headerlink" title="交并比"></a>交并比</h3><p>交并比是一个用来评估对象检测算法的指标，交并比（<strong>loU</strong>）函数做的是计算两个边界框交集和并集之比。以下图为例，两个边界框的并集是包含两个边界框区域（绿色阴影表示区域），而交集就是这个比较小的区域（橙色阴影表示区域），那么交并比就是交集的大小，这个橙色阴影面积，然后除以绿色阴影的并集面积。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/65.png" alt="65" style="zoom:75%;"></p>
<p>一般约定，在计算机检测任务中，如果$loU≥0.5$，就说检测正确，如果预测器和实际边界框完美重叠，<strong>loU</strong>就是1，因为交集就等于并集，所以，<strong>loU</strong>越高，边界框越精确。</p>
<h3 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h3><p>到目前为止学到的对象检测中的一个问题是，算法可能对同一个对象做出多次检测，所以算法不是对某个对象检测出一次，而是检测出多次。非极大值抑制这个方法可以确保你的算法对每个对象只检测一次。</p>
<p>具体上，这个算法做的是，首先看看每次报告每个检测结果相关的概率<script type="math/tex">p_{c}</script>，实际上是<script type="math/tex">p_{c}</script>乘以<script type="math/tex">c_{1}</script>、<script type="math/tex">c_{2}</script>或<script type="math/tex">c_{3}</script>。找到概率最大的检测结果，然后定义其是最可靠的检测，之后，非极大值抑制就会逐一审视剩下的矩形，所有和这个最大的边框有很高交并比，高度重叠的其他边界框，那么这些输出就会被抑制。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/67.png" alt="67" style="zoom:100%;"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/66.png" alt="66" style="zoom:75%;"></p>
<p>如果尝试同时检测三个对象，比如说行人、汽车、摩托，那么输出向量就会有三个额外的分量。事实证明，正确的做法是独立进行三次非极大值抑制，对每个输出类别都做一次。</p>
<h3 id="Anchor-Boxes"><a href="#Anchor-Boxes" class="headerlink" title="Anchor Boxes"></a>Anchor Boxes</h3><p>到目前为止，对象检测中存在的一个问题是每个格子只能检测出一个对象，如果想让一个格子检测出多个对象，就是使用<strong>anchor box</strong>这个概念。</p>
<p><strong>anchor box</strong>的思路是，这样子，预先定义两个不同形状的<strong>anchor box</strong>，或者<strong>anchor box</strong>形状，接下来要做的是把预测结果和这两个<strong>anchor box</strong>关联起来。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/68.png" alt="68" style="zoom:75%;"></p>
<p>重新定义类别标签<script type="math/tex">y=  \begin{bmatrix} p_{c} & b_{x} & b_{y} &b_{h} & b_{w} & c_{1} & c_{2} & c_{3} & p_{c} & b_{x} & b_{y} & b_{h} & b_{w} &c_{1} & c_{2} & c_{3} \\\end{bmatrix}^{T}</script>，前面的<script type="math/tex">p_{c},b_{x},b_{y},b_{h},b_{w},c_{1},c_{2},c_{3}</script>（绿色方框标记的参数）是和<strong>anchor box 1</strong>关联的8个参数，后面的8个参数（橙色方框标记的元素）是和<strong>anchor box 2</strong>相关联。</p>
<p>缺点：如果有两个<strong>anchor box</strong>，但在同一个格子中有三个对象，这种情况算法处理不好，而且<strong>archor box</strong>的形状需要人工指定。</p>
<h3 id="YOLO-算法"><a href="#YOLO-算法" class="headerlink" title="YOLO 算法"></a>YOLO 算法</h3><p><strong>YOLO</strong>算法的思想就是<strong>Bounding Box</strong>预测和<strong>Archor Boxes</strong>等上述几个概念的结合。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/69.png" alt="69" style="zoom:100%;"></p>
<h2 id="特殊应用：人脸识别和神经风格转换"><a href="#特殊应用：人脸识别和神经风格转换" class="headerlink" title="特殊应用：人脸识别和神经风格转换"></a>特殊应用：人脸识别和神经风格转换</h2><h3 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h3><h4 id="One-Shot学习"><a href="#One-Shot学习" class="headerlink" title="One-Shot学习"></a>One-Shot学习</h4><p>目标是学习<strong>Similarity</strong>函数，该函数以两张图片作为输入，然后输出这两张图片的差异值，如果这两张图片的差一只小于某个阈值$\tau$，它是一个超参数，那么这时就能预测这两张图片是同一个人，如果差异值大于τ，就能预测这是不同的两个人，这就是解决人脸验证问题的一个可行办法。</p>
<ul>
<li>One-Shot Imitation Learning </li>
<li>One-Shot Visual Imitation Learning via Meta-Learning </li>
<li>One-Shot Imitation from Observing Humans via Domain-Adaptive Meta-Learning </li>
</ul>
<h4 id="Siamese-网络"><a href="#Siamese-网络" class="headerlink" title="Siamese 网络"></a>Siamese 网络</h4><p>对于两个不同的输入，运行相同的卷积神经网络，然后比较它们，这一般叫做<strong>Siamese</strong>网络架构。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/70.png" alt="70" style="zoom:75%;"></p>
<p>神经网络的参数定义了一个编码函数$f(x^{(i)})$，如果给定输入图像$x^{(i)}$，这个网络会输出$x^{(i)}$的128维的编码。接下来需要做的就是学习参数，使得如果两个图片$x^{( i)}$和$x^{( j)}$是同一个人，那么你得到的两个编码的距离就小。相反，如果$x^{(i)}$和$x^{(j)}$是不同的人，那么你会想让它们之间的编码距离大一点。</p>
<h4 id="Triplet-损失"><a href="#Triplet-损失" class="headerlink" title="Triplet 损失"></a>Triplet 损失</h4><p>要想通过学习神经网络的参数来得到优质的人脸图片编码，方法之一就是定义三元组损失函数然后应用梯度下降。三元组损失意味着你需要看<strong>Anchor</strong>图片、<strong>Positive</strong>图片(同一个人)、<strong>Negative</strong>图片(非同一个人)。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/71.png" alt="71" style="zoom:75%;"></p>
<p>目标就是希望<strong>Anchor</strong>与<strong>Positive</strong>的距离尽可能的近，使<strong>Anchor</strong>与<strong>Negative</strong>的距离尽可能的远，用公式表达即</p>
<script type="math/tex; mode=display">
|| f(A) - f(P)||^{2} \leq ||f(A) - f(N)||^{2}</script><p>其中（$|| f(A) - f(P) ||^{2}$）=$d(A,P)$，（$|| f(A) - f(N) ||^{2}$）=$d(A,N)$。在实际中为了避免<script type="math/tex">0-0\le0</script>的情况出现，这样$f$实际没有学习到东西，而公式却成立了，所以往往将公式重新定义为</p>
<script type="math/tex; mode=display">
|| f(A) - f(P)||^{2} -||f(A) - f(N)||^{2} \leq -a</script><p>$a$说是一个间隔超参数，即<script type="math/tex">d(A,N)</script>必须要比<script type="math/tex">d(A,P)</script>大很多才成立，那么损失函数将定义为：</p>
<script type="math/tex; mode=display">
L( A,P,N) = max(|| f( A) - f( P)||^{2} -|| f( A) - f( N)||^{2} + a,0)</script><h4 id="人脸验证与二分类"><a href="#人脸验证与二分类" class="headerlink" title="人脸验证与二分类"></a>人脸验证与二分类</h4><p>一个训练神经网络的方法是选取一对神经网络，选取<strong>Siamese</strong>网络，使其同时计算这些嵌入，比如说128维的嵌入，然后将其输入到逻辑回归单元，然后进行预测，如果是相同的人，那么输出是1，若是不同的人，输出是0。这就把人脸识别问题转换为一个二分类问题，训练这种系统时可以替换<strong>Triplet loss</strong>的方法。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/72.png" alt="72" style="zoom:75%;"></p>
<p>定义<script type="math/tex">\hat y = \sigma(\sum_{k = 1}^{128}{w_{i}| f( x^{( i)})_{k} - f( x^{( j)})_{k}| + b})</script>，其中符号<script type="math/tex">f( x^{( i)})_{k}</script>代表图片<script type="math/tex">x^{(i)}</script>的编码，下标$k$代表选择这个向量中的第$k$个元素，<script type="math/tex">| f(x^{( i)})_{k} - f( x^{( j)})_{k}|</script>对这两个编码取元素差的绝对值。接下来可以把这128个元素当作特征，然后把他们放入逻辑回归中，最后的逻辑回归可以增加参数<script type="math/tex">w_{i}</script>和$b$，就像普通的逻辑回归一样。然后在这128个单元上训练合适的权重，用来预测两张图片是否是一个人，这是一个很合理的方法来学习预测0或者1，即是否是同一个人。</p>
<p>还有其他不同的形式来计算绿色标记的这部分公式（<script type="math/tex">| f( x^{( i)})_{k} - f( x^{( j)})_{k}|</script>），比如说，公式可以是<script type="math/tex">\frac{(f( x^{( i)})_{k} - f(x^{( j)})_{k})^{2}}{f(x^{( i)})_{k} + f( x^{( j)})_{k}}</script>，这个公式也被叫做$\chi^{2}$公式，是一个希腊字母$\chi$，也被称为$\chi$平方相似度。</p>
<p>总结一下，把人脸验证当作一个监督学习，创建一个只有成对图片的训练集，不是三个一组，而是成对的图片，目标标签是1表示一对图片是一个人，目标标签是0表示图片中是不同的人。利用不同的成对图片，使用反向传播算法去训练神经网络，训练<strong>Siamese</strong>神经网络。</p>
<h3 id="神经风格迁移"><a href="#神经风格迁移" class="headerlink" title="神经风格迁移"></a>神经风格迁移</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/73.png" alt="73" style="zoom:100%;"></p>
<p>给定一个内容图像$C$，给定一个风格图片$S$，而目标是生成一个新图片$G$。为了实现神经风格迁移，我们需要定义一个关于$G$的代价函数$J$用来评判某个生成图像的好坏，然后使用梯度下降法去最小化$J(G)$，以便于生成这个图像。</p>
<p>怎么判断生成图像的好坏呢？我们把这个代价函数定义为两个部分。</p>
<p>第一部分被称作内容代价<script type="math/tex">J_{\text{content}}(C,G)</script>，这是一个关于内容图片和生成图片的函数，它是用来度量生成图片$G$的内容与内容图片$C$的内容有多相似。然后我们会把结果加上一个风格代价函数<script type="math/tex">J_{\text{style}}(S,G)</script>，也就是关于$S$和$G$的函数，用来度量图片$G$的风格和图片$S$的风格的相似度。然后我们会把结果加上一个风格代价函数，得到</p>
<script type="math/tex; mode=display">
J( G) = a J_{\text{content}}( C,G) + \beta J_{\text{style}}(S,G)</script><p>也就是关于$S$和$G$的函数，用来度量图片$G$的风格和图片$S$的风格的相似度。</p>
<p>算法的运行是这样的，对于代价函数$J(G)$，为了生成一个新图像，你接下来要做的是随机初始化生成随机尺寸的图像$G$。然后使用上述定义的代价函数$J(G)$，使用梯度下降的方法将其最小化，更新$G:= G - \frac{\partial}{\partial G}J(G)$。逐步处理像素，这样慢慢得到一个生成图片（编号4、5、6），越来越像用风格图片的风格画出来的内容图片。</p>
<h4 id="内容代价函数"><a href="#内容代价函数" class="headerlink" title="内容代价函数"></a>内容代价函数</h4><p>假如需要衡量一个内容图片和一个生成图片在内容上的相似度，我们令这个$a^{[l][C]}$和$a^{[l][G]}$，代表这两个图片$C$和$G$的$l$层的激活函数值。如果这两个激活值相似，那么就意味着两个图片的内容相似。我们定义</p>
<script type="math/tex; mode=display">
J_{\text{content}}( C,G) = \frac{1}{2}|| a^{[l][C]} - a^{[l][G]}||^{2}</script><p>为两个激活值不同或者相似的程度，我们取$l$层的隐含单元的激活值，按元素相减，内容图片的激活值与生成图片相比较，然后取平方，也可以在前面加上归一化或者不加，比如$\frac{1}{2}$或者其他的，都影响不大,因为这都可以由这个超参数$a$来调整。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/74.png" alt="74" style="zoom:100%;"></p>
<h4 id="风格代价函数"><a href="#风格代价函数" class="headerlink" title="风格代价函数"></a>风格代价函数</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/75.png" alt="75" style="zoom:100%;"></p>
<p>为了测量生成的图像的风格与输入的风格图像的相似程度，我们设<script type="math/tex">a_{i,\ j,\ k}^{[l]}</script>，设它为隐藏层l中$(i,j,k)$位置的激活项，$i$，$j$，$k$分别代表该位置的高度、宽度以及对应的通道数。现在要做的就是去计算一个<strong>关于$l$层和风格图像</strong>的矩阵，即<script type="math/tex">G^{[l](S)}</script>（$l$表示层数，$S$表示风格图像），这（<script type="math/tex">G^{[l]( S)}</script>）是一个<script type="math/tex">n_{c} \times n_{c}</script>的矩阵，同样地，我们也对生成的图像进行这个操作。</p>
<p>现在先来定义风格图像，设这个关于$l$层和风格图像的，$G$是一个矩阵，这个矩阵的高度和宽度都是$l$层的通道数。在这个矩阵中$k$和$k’$元素被用来描述$k$通道和$k’$通道之间的相关系数。具体地：</p>
<script type="math/tex; mode=display">
G_{kk^{'}}^{[l]( S)} = \sum_{i = 1}^{n_{H}^{[l]}}{\sum_{j = 1}^{n_{W}^{[l]}}{a_{i,\ j,\ k}^{[l](S)}a_{i,\ j,\ k^{'}}^{[l](S)}}}</script><p>用符号$i$，$j$表示下界，对$i$，$j$，$k$位置的激活项<script type="math/tex">a_{i,\ j,\ k}^{[l]}</script>，乘以同样位置的激活项，也就是$i$,$ j$,$k’$位置的激活项，即<script type="math/tex">a_{i,j,k^{'}}^{[l]}</script>，将它们两个相乘。然后$i$和$j$分别加到l层的高度和宽度，即<script type="math/tex">n_{H}^{[l]}</script>和<script type="math/tex">n_{W}^{[l]}</script>，将这些不同位置的激活项都加起来。$(i,j,k)$和$(i,j,k’)$中$x$坐标和$y$坐标分别对应高度和宽度，将$k$通道和$k’$通道上这些位置的激活项都进行相乘。</p>
<p>这就是输入的风格图像所构成的风格矩阵，然后，再对生成图像做同样的操作:</p>
<script type="math/tex; mode=display">
G_{kk^{'}}^{[l]( G)} = \sum_{i = 1}^{n_{H}^{[l]}}{\sum_{j = 1}^{n_{W}^{[l]}}{a_{i,\ j,\ k}^{[l](G)}a_{i,\ j,\ k^{'}}^{[l](G)}}}</script><p>其中，<script type="math/tex">a_{i,\ j,\ k}^{[l](S)}</script>和<script type="math/tex">a_{i, j,k}^{[l](G)}</script>中的上标$(S)$和$(G)$分别表示在风格图像$S$中的激活项和在生成图像$G$的激活项。之所以用大写字母$G$来代表这些风格矩阵，是因为在线性代数中这种矩阵有时也叫<strong>Gram</strong>矩阵，但在这里叫做风格矩阵。</p>
<p>最后，如果我们将$S$和$G$代入到风格代价函数中去计算，这将得到这两个矩阵之间的误差，因为它们是矩阵，所以在这里加一个$F$（<strong>Frobenius</strong>范数，编号1所示），这实际上是计算两个矩阵对应元素相减的平方的和，将这个式子展开，从$k$和$k’$开始作它们的差，把对应的式子写下来，然后把得到的结果都加起来，作者在这里使用了一个归一化常数，也就是<script type="math/tex">\frac{1}{2n_{H}^{[l]l}n_{W}^{[l]}n_{C}^{[l]}}</script>，再在外面加一个平方，但是一般情况下不用写这么多，一般只要将它乘以一个超参数$\beta$就行。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/76.png" alt="76" style="zoom:100%;"></p>
<p>最后，这是对$l$层定义的风格代价函数，这是两个矩阵间一个基本的<strong>Frobenius</strong>范数，也就是$S$图像和$G$图像之间的范数再乘上一个归一化常数。实际上，如果对各层都使用风格代价函数，会让结果变得更好。如果要对各层都使用风格代价函数 ，可以这么定义代价函数，把各个层的结果（各层的风格代价函数）都加起来，这样就能定义它们全体了。另外，还需要对每个层定义权重，也就是一些额外的超参数，这用$\lambda^{[l]}$来表示，这样将使你能够在神经网络中使用不同的层，包括之前的一些可以测量类似边缘这样的低级特征的层，以及之后的一些能测量高级特征的层，使得神经网络在计算风格时能够同时考虑到这些低级和高级特征的相关系数。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/77.png" alt="77" style="zoom:100%;"></p>
<p>为了把这些东西封装起来，定义一个全体代价函数：</p>
<script type="math/tex; mode=display">
J(G) = a J_{\text{content}( C,G)} + \beta J_(S,G)</script><p>之后用梯度下降法，或者更复杂的优化算法来找到一个合适的图像$G$，并计算$J(G)$的最小值。</p>
<h1 id="序列模型"><a href="#序列模型" class="headerlink" title="序列模型"></a>序列模型</h1><h2 id="循环序列模型"><a href="#循环序列模型" class="headerlink" title="循环序列模型"></a>循环序列模型</h2><h3 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h3><ul>
<li><script type="math/tex">x^{<t>}</script>用来来索引这个序列中的第$t$个位置</li>
<li><script type="math/tex">T_{x}</script>表示输入序列的长度</li>
<li><script type="math/tex">T_{y}</script>表示输出序列的长度</li>
<li><script type="math/tex">x^{\left(i \right) <t>}</script>表示训练样本$i$的序列中第$t$个元素</li>
<li><script type="math/tex">T_{x}^{(i)}</script>表示第$i$个训练样本的输入序列长度</li>
<li><script type="math/tex">y^{\left( i \right) < t>}</script>表示第$i$个训练样本中第$t$个元素</li>
<li><script type="math/tex">T_{y}^{(i)}</script>就是第$i$个训练样本的输出序列的长度</li>
</ul>
<p>想要表示一个句子里的单词，第一件事是做一张词表，有时也称为词典，意思是列一列你的表示方法中用到的单词。使用的是one-hot编码。</p>
<h3 id="循环神经网络模型"><a href="#循环神经网络模型" class="headerlink" title="循环神经网络模型"></a>循环神经网络模型</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/78.png" alt="78" style="zoom:75%;"></p>
<h3 id="标准神经网络的问题"><a href="#标准神经网络的问题" class="headerlink" title="标准神经网络的问题"></a>标准神经网络的问题</h3><ul>
<li>是输入和输出数据在不同例子中可以有不同的长度，不是所有的例子都有着同样输入长度<script type="math/tex">T_{x}</script>或是同样输出长度的<script type="math/tex">T_{y}</script>。</li>
<li>一个像这样单纯的神经网络结构，它并不共享从文本的不同位置上学到的特征。</li>
</ul>
<h4 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h4><p>一般开始先输入$a^{<0>}$，它是一个零向量。接着就是前向传播过程，先计算激活值$a^{<1>}$，然后再计算$y^{<1>}$。</1></1></0></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/79.png" alt="79" style="zoom:75%;"></p>
<script type="math/tex; mode=display">
a^{<1>} = g_{1}(W_{aa}a^{< 0 >} + W_{ax}x^{< 1 >} + b_{a})\\
\hat y^{< 1 >} = g_{2}(W_{ya}a^{< 1 >} + b_{y})</script><p>更一般的，在$t$时刻，有</p>
<script type="math/tex; mode=display">
a^{< t >} = g_{1}(W_{aa}a^{< t - 1 >} + W_{ax}x^{< t >} + b_{a})\\
\hat y^{< t >} = g_{2}(W_{ya}a^{< t >} + b_{y})</script><p><img src="/2019/10/03/Recognize-Deeplearning.ai/80.png" alt="80" style="zoom:75%;"></p>
<p>为了简化符号，将<script type="math/tex">a^{<t>}</script>表达为<script type="math/tex">a^{<t>} =g(W_{a}\left\lbrack a^{< t-1 >},x^{<t>} \right\rbrack +b_{a})</script>，定义<script type="math/tex">W_{a}</script>的方式是将矩阵<script type="math/tex">W_{aa}</script>和矩阵<script type="math/tex">W_{ax}</script>水平并列放置，<script type="math/tex">[ {W_{aa}}\vdots {W_{ax}}]=W_{a}</script>。举个例子，如果$a$是100维的，然后延续之前的例子，$x$是10,000维的，那么<script type="math/tex">W_{aa}</script>就是个$（100，100）$维的矩阵，<script type="math/tex">W_{ax}</script>就是个$（100，10,000）$维的矩阵，因此如果将这两个矩阵堆起来，<script type="math/tex">W_{a}</script>就会是个$（100，10,100）$维的矩阵。用这个符号（<script type="math/tex">\left\lbrack a^{< t - 1 >},x^{< t >}\right\rbrack</script>）的意思是将这两个向量堆在一起，堆叠方式为纵向，即<script type="math/tex">\begin{bmatrix}a^{< t-1 >} \\ x^{< t >} \\\end{bmatrix}</script>，它是一个($10,100，100$)维的矩阵，此时矩阵<script type="math/tex">[ {W_{aa}}\vdots {W_{ax}}]</script>乘以<script type="math/tex">\begin{bmatrix} a^{< t - 1 >} \\ x^{< t >} \\ \end{bmatrix}</script>，刚好等于<script type="math/tex">W_{aa}a^{<t-1>} + W_{ax}x^{<t>}</script>。</p>
<p><strong>RNN</strong>前向传播示意图：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/81.png" alt="81" style="zoom:100%;"></p>
<h4 id="反向传播（通过时间的）"><a href="#反向传播（通过时间的）" class="headerlink" title="反向传播（通过时间的）"></a>反向传播（通过时间的）</h4><p>为了计算反向传播，首先需要定义一个元素损失函数：</p>
<script type="math/tex; mode=display">
L^{<t>}( \hat y^{<t>},y^{<t>}) = - y^{<t>}\log\hat  y^{<t>}-( 1- y^{<t>})log(1-\hat y^{<t>})</script><p>它对应的是序列中一个具体的词，如果它是某个人的名字，那么<script type="math/tex">y^{<t>}</script>的值就是1，然后神经网络将输出这个词是名字的概率值，比如0.1。其被定义为标准逻辑回归损失函数，也叫交叉熵损失函数（<strong>Cross Entropy Loss</strong>），这是关于单个位置上或者说某个时间步$t$上某个单词的预测值的损失函数。那么整个序列的损失函数$L$定义为</p>
<script type="math/tex; mode=display">
L(\hat y,y) = \ \sum_{t = 1}^{T_x}{L^{< t >}(\hat  y^{< t >},y^{< t >})}</script><p><img src="/2019/10/03/Recognize-Deeplearning.ai/82.png" alt="82" style="zoom:75%;"></p>
<p><strong>RNN</strong>反向传播示意图：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/83.png" alt="83" style="zoom:75%;"></p>
<h3 id="不同类型的循环神经网络"><a href="#不同类型的循环神经网络" class="headerlink" title="不同类型的循环神经网络"></a>不同类型的循环神经网络</h3><ul>
<li>多对多：机器翻译</li>
<li>多对一：情感分类</li>
<li>一对多：音乐生成</li>
<li>一对一：标准神经网络</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/84.png" alt="84" style="zoom:75%;"></p>
<h3 id="语言模型和序列生成"><a href="#语言模型和序列生成" class="headerlink" title="语言模型和序列生成"></a>语言模型和序列生成</h3><p>语言模型所做的就是，判断某个特定的句子它出现的概率是多少。构建一个语言模型首先需要将句子标记化，比如<strong>EOS</strong>它表示句子的结尾，<strong>UNK</strong>的代表未知词的标志，将输入的句子都映射到了各个标志上。</p>
<p>然后通过构建一个<strong>RNN</strong>来构建这些序列的概率模型，即将上一时间步输出作为下一时间步的输入，即将$x^{<t>}$设为$y^{<t-1>}$。</t-1></t></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/85.png" alt="85" style="zoom:75%;"></p>
<h3 id="对新序列采样"><a href="#对新序列采样" class="headerlink" title="对新序列采样"></a>对新序列采样</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/86.png" alt="86" style="zoom:75%;"></p>
<p>第一步要做的就是对想要模型生成的第一个词进行采样，于是输入$x^{<1>} =0$，$a^{<0>} =0$，现在第一个时间步得到的是所有可能的输出是经过<strong>softmax</strong>层后得到的概率，然后根据这个<strong>softmax</strong>的分布进行随机采样。<strong>Softmax</strong>分布给出的信息就是第一个词<strong>a</strong>的概率是多少，第一个词是<strong>aaron</strong>的概率是多少，第一个词是<strong>zulu</strong>的概率是多少，还有第一个词是<strong>UNK</strong>（未知标识）的概率是多少，这个标识可能代表句子的结尾，然后对这个向量使用例如<strong>numpy</strong>命令，<code>np.random.choice</code>，来根据向量中这些概率的分布进行采样，这样就能对第一个词进行采样了。</0></1></p>
<p>然后继续下一个时间步，记住第二个时间步需要$\hat y^{<1>}$作为输入，而现在要做的是把刚刚采样得到的$\hat y^{<1>}$放到$a^{<2>}$，作为下一个时间步的输入，所以不管在第一个时间步得到的是什么词，都要把它传递到下一个位置作为输入，然后<strong>softmax</strong>层就会预测$\hat y^{<2>}$是什么。举个例子，假如说对第一个词进行抽样后，得到的是<strong>The</strong>，<strong>The</strong>作为第一个词的情况很常见，然后把<strong>The</strong>当成$x^{<2>}$，现在$x^{<2>}$就是$\hat y^{<1>}$，现在要计算出在第一词是<strong>The</strong>的情况下，第二个词应该是什么，然后得到的结果就是$\hat y^{<2>}$，然后再次用这个采样函数来对$\hat y^{<2>}$进行采样。</2></2></1></2></2></2></2></1></1></p>
<p>然后再到下一个时间步，无论得到什么样的用<strong>one-hot</strong>码表示的选择结果，都把它传递到下一个时间步，然后对第三个词进行采样。不管得到什么都把它传递下去，一直这样直到最后一个时间步（EOS标识）。另一种情况是，如果字典中没有这个词，可以决定从20个或100个或其他个单词进行采样，然后一直将采样进行下去直到达到所设定的时间步。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/87.png" alt="87" style="zoom:75%;"></p>
<p>如果建立一个基于字符的语言模型，比起基于词汇的语言模型，序列$\hat y^{<1>}$，$\hat y^{<2>}$，$\hat y^{<3>}$在训练数据中将会是单独的字符，而不是单独的词汇。所以对于前面的例子来说，那个句子（上图编号3所示），“<strong>Cats average 15 hours of sleep a day.</strong>”，在该例中<strong>C</strong>就是$\hat y^{<1>}$，<strong>a</strong>就是$\hat y^{<2>}$，<strong>t</strong>就是$\hat y^{<3>}$，空格符就是$\hat y^{<4>}$等等。</4></3></2></1></3></2></1></p>
<h3 id="循环序列模型单元"><a href="#循环序列模型单元" class="headerlink" title="循环序列模型单元"></a>循环序列模型单元</h3><h4 id="梯度消失和梯度爆炸问题"><a href="#梯度消失和梯度爆炸问题" class="headerlink" title="梯度消失和梯度爆炸问题"></a>梯度消失和梯度爆炸问题</h4><p>对于<strong>RNN</strong>，首先从左到右前向传播，然后反向传播。但是反向传播会很困难，因为同样的梯度消失的问题，后面层的输出误差很难影响前面层的计算。这就意味着，实际上很难让一个神经网络能够意识到它要记住看到的是单数名词还是复数名词，然后在序列后面生成依赖单复数形式的<strong>was</strong>或者<strong>were</strong>。其受到区域的影响要更大。</p>
<p>尽管梯度爆炸也是会出现，但是梯度爆炸很明显，因为指数级大的梯度会让参数变得极其大，以至于网络参数崩溃。所以梯度爆炸很容易发现，因为参数会大到崩溃，将会看到很多<strong>NaN</strong>，这意味着网络计算出现了数值溢出。一个解决方法就是用梯度修剪。意思就是观察你的梯度向量，如果它大于某个阈值，缩放梯度向量，保证它不会太大，这就是通过一些最大值来修剪的方法。</p>
<h4 id="GRU-Gated-Recurrent-Unit-单元"><a href="#GRU-Gated-Recurrent-Unit-单元" class="headerlink" title="GRU(Gated Recurrent Unit)单元"></a><strong>GRU</strong>(<strong>Gated Recurrent Unit</strong>)单元</h4><p>传统的RNN隐藏层单元可视化如下：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/88.png" alt="88" style="zoom:75%;"></p>
<p>（<strong>GRU</strong>）单元将会有个新的变量称为$c$，代表记忆细胞。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/89.png" alt="89" style="zoom:100%;"></p>
<p>对于<strong>GRU</strong>，$c^{<t>}$的值等于$a^{<t>}$的激活值。</t></t></p>
<p>在每个时间步，我们将用一个候选值重写记忆细胞，即<script type="math/tex">{\tilde{c}}^{} =tanh(W_{c}\left\lbrack c^{},x^{} \right\rbrack +b_{c})</script>,所以${\tilde{c}}^{<t>}$的值就是个替代值，代替表示$c^{<t>}$的值。</t></t></p>
<p>$\Gamma<em>{u}= \sigma(W</em>{u}\left\lbrack c^{<t-1>},x^{<t>} \right\rbrack +b_{u})$是一个更新门，用来决定什么时候更新$c^{<t>}$。</t></t></t-1></p>
<p>记忆细胞更新的公式是<script type="math/tex">c^{<t>} = \Gamma_{u}*{\tilde{c}}^{<t>} +\left( 1- \Gamma_{u} \right)*c^{<t-1>}</script>，如果更新值<script type="math/tex">\Gamma_{u} =1</script>，也就是把新值设为候选值，即$c^{<t>} = {\tilde{c}}^{<t>}$，如果<script type="math/tex">\Gamma_{u} =0</script>，则不更后选址，即$c^{<t>} =c^{<t-1>}$，这样即使你一直处理句子到上图编号4所示，$c^{<t>}$应该会一直等$c^{<t-1>}$，于是它仍然记得主语的单复数。</t-1></t></t-1></t></t></t></p>
<p>所以总体步骤就是：</p>
<p>输入上层时间步记忆细胞<script type="math/tex">c^{<t-1>}</script>和当前时间步序列<script type="math/tex">x^{<x>}</script>，然后把这两个用合适的权重结合在一起，再用<strong>tanh</strong>还算得到${\tilde{c}}^{<t>}$，<script type="math/tex">{\tilde{c}}^{} =tanh(W_{c}\left\lbrack c^{},x^{} \right\rbrack +b_{c})</script>，即<script type="math/tex">c^{<t>}</script>的替代值。再用一个不同的参数集，通过<strong>sigmoid</strong>激活函数算出<script type="math/tex">\Gamma_{u}= \sigma(W_{u}\left\lbrack c^{<t-1>},x^{<t>} \right\rbrack +b_{u})</script>，即更新门。最后所有的值通过另一个运算符结合产生记忆细胞新值<script type="math/tex">c^{<t>} = \Gamma_{u}*{\tilde{c}}^{<t>} +\left( 1- \Gamma_{u} \right)*c^{<t-1>}</script>，另外，也可以把这个代入<strong>softmax</strong>来预测<script type="math/tex">y^{<t>}</script>。</t></p>
<p><strong>GRU</strong>的优点就是通过门来决定更新和不更新记忆细胞的值，并且因为<script type="math/tex">\Gamma_{u}</script>很接近0，这样就不会有梯度消失问题，同时$c^{<t>}$几乎就等于$c^{<t-1>}$，所以$c^{<t>}$的值也很好地被维持了。上述介绍的仅仅是简化的<strong>GRU</strong>单元，而完整的<strong>GRU</strong>单元还需要添加一个门，这个<script type="math/tex">\Gamma_{r}= \sigma(W_{r}\left\lbrack c^{<t-1>},x^{<t>} \right\rbrack + b_{r})</script>，<script type="math/tex">\Gamma_{r}</script>门告诉你计算出的下一个$c^{<t>}$的候选值${\tilde{c}}^{<t>}$跟$c^{<t-1>}$有多大的相关性。</t-1></t></t></t></t-1></t></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/90.png" alt="90" style="zoom:100%;"></p>
<h4 id="长短期记忆-LSTM-long-short-term-memory-unit"><a href="#长短期记忆-LSTM-long-short-term-memory-unit" class="headerlink" title="长短期记忆 LSTM(long short term memory) unit"></a>长短期记忆 LSTM(long short term memory) unit</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/91.png" alt="91" style="zoom:100%;"></p>
<ul>
<li>在<strong>LSTM</strong>中不再有$a^{<t>} = c^{<t>}$的情况，所以与<strong>GRU</strong>不同，原本的符号<script type="math/tex">c^{<T>}</script>需要换成<script type="math/tex">a^{<t-1>}</script>。并且也没有了相关门<script type="math/tex">\Gamma_r</script>。</t></t></li>
</ul>
<p><strong>LSTM</strong>前向传播图：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/92.png" alt="92" style="zoom:100%;"></p>
<p><strong>LSTM</strong>反向传播计算：</p>
<p><strong>门求偏导：</strong></p>
<script type="math/tex; mode=display">d \Gamma_o^{\langle t \rangle} = da_{next}*\tanh(c_{next}) * \Gamma_o^{\langle t \rangle}*(1-\Gamma_o^{\langle t \rangle})\tag{1}</script><script type="math/tex; mode=display">d\tilde c^{\langle t \rangle} = dc_{next}*\Gamma_i^{\langle t \rangle}+ \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * i_t * da_{next} * \tilde c^{\langle t \rangle} * (1-\tanh(\tilde c)^2) \tag{2}</script><script type="math/tex; mode=display">d\Gamma_u^{\langle t \rangle} = dc_{next}*\tilde c^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * \tilde c^{\langle t \rangle} * da_{next}*\Gamma_u^{\langle t \rangle}*(1-\Gamma_u^{\langle t \rangle})\tag{3}</script><script type="math/tex; mode=display">d\Gamma_f^{\langle t \rangle} = dc_{next}*\tilde c_{prev} + \Gamma_o^{\langle t \rangle} (1-\tanh(c_{next})^2) * c_{prev} * da_{next}*\Gamma_f^{\langle t \rangle}*(1-\Gamma_f^{\langle t \rangle})\tag{4}</script><p><strong>参数求偏导 ：</strong></p>
<script type="math/tex; mode=display">dW_f = d\Gamma_f^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{5}</script><script type="math/tex; mode=display">dW_u = d\Gamma_u^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{6}</script><script type="math/tex; mode=display">dW_c = d\tilde c^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{7}</script><script type="math/tex; mode=display">dW_o = d\Gamma_o^{\langle t \rangle} * \begin{pmatrix} a_{prev} \\ x_t\end{pmatrix}^T \tag{8}</script><p>为了计算<script type="math/tex">db_f, db_u, db_c, db_o</script> 需要各自对<script type="math/tex">d\Gamma_f^{\langle t \rangle}, d\Gamma_u^{\langle t \rangle}, d\tilde c^{\langle t \rangle}, d\Gamma_o^{\langle t \rangle}</script> 求和。</p>
<p>最后，计算隐藏状态、记忆状态和输入的偏导数：</p>
<script type="math/tex; mode=display">da_{prev} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c^{\langle t \rangle} + W_o^T * d\Gamma_o^{\langle t \rangle} \tag{9}</script><script type="math/tex; mode=display">dc_{prev} = dc_{next}\Gamma_f^{\langle t \rangle} + \Gamma_o^{\langle t \rangle} * (1- \tanh(c_{next})^2)*\Gamma_f^{\langle t \rangle}*da_{next} \tag{10}</script><script type="math/tex; mode=display">dx^{\langle t \rangle} = W_f^T*d\Gamma_f^{\langle t \rangle} + W_u^T * d\Gamma_u^{\langle t \rangle}+ W_c^T * d\tilde c_t + W_o^T * d\Gamma_o^{\langle t \rangle}\tag{11}</script><p><strong>GRU</strong>的优点是这是个更加简单的模型，所以更容易创建一个更大的网络，而且它只有两个门，在计算性上也运行得更快，然后它可以扩大模型的规模。但是<strong>LSTM</strong>更加强大和灵活，因为它有三个门而不是两个。</p>
<h3 id="双向循环神经网络"><a href="#双向循环神经网络" class="headerlink" title="双向循环神经网络"></a>双向循环神经网络</h3><p>动机：不能仅仅通句子前面的成分就决定后续的单词。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/93.png" alt="93" style="zoom:100%;"></p>
<p>假如输入只有4个，从$x^{<1>}$到$x^{<4>}$。从这里开始的这个网络会有一个前向的循环单元叫做${\overrightarrow{a}}^{<1>}$，${\overrightarrow{a}}^{<2>}$，${\overrightarrow{a}}^{<3>}$还有${\overrightarrow{a}}^{<4>}$，这4个循环单元都有一个当前输入$x$输入进去，得到预测的$\hat y^{<1>}$，$\hat y^{<2>}$，$\hat y^{<3>}$和$\hat y^{<4>}$。然后再增加反向的循环单元${\overleftarrow{a}}^{<1>}$、${\overleftarrow{a}}^{<2>}$、${\overleftarrow{a}}^{<3>}$、${\overleftarrow{a}}^{<4>}$构成一个无环图，为了预测结果<script type="math/tex">\hat y^{<t>} =g(W_{g}\left\lbrack {\overrightarrow{a}}^{< t >},{\overleftarrow{a}}^{< t >} \right\rbrack +b_{y})</script>。参数<script type="math/tex">W_{a}^{\left\lbrack 2 \right\rbrack}</script>和<script type="math/tex">b_{a}^{\left\lbrack 2 \right\rbrack}</script>在这一层的计算里都一样，相对应地第一层也有自己的参数<script type="math/tex">W_{a}^{\left\lbrack 1 \right\rbrack}</script>和<script type="math/tex">b_{a}^{\left\lbrack 1 \right\rbrack}</script>。</4></3></2></1></4></3></2></1></4></3></2></1></4></1></p>
<h3 id="深层循环神经网络"><a href="#深层循环神经网络" class="headerlink" title="深层循环神经网络"></a>深层循环神经网络</h3><p>这是一个有三个隐层（纵向来看）的新的网络，$a^{\lbrack l\rbrack <t>}$来表示第l层的激活值，这个\<t\>表示第$t$个时间点，具体的激活值计算例子：<script type="math/tex">a^{\lbrack 2\rbrack < 3 >} = g(W_{a}^{\left\lbrack 2 \right\rbrack}\left\lbrack a^{\left\lbrack 2 \right\rbrack < 2 >},a^{\left\lbrack 1 \right\rbrack < 3 >} \right\rbrack + b_{a}^{\left\lbrack 2 \right\rbrack})</script>。</t\></t></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/94.png" alt="94" style="zoom:100%;"></p>
<h2 id="自然语言处理与词嵌入"><a href="#自然语言处理与词嵌入" class="headerlink" title="自然语言处理与词嵌入"></a>自然语言处理与词嵌入</h2><h3 id="词嵌入"><a href="#词嵌入" class="headerlink" title="词嵌入"></a>词嵌入</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>词嵌入</strong>（<strong>word embeddings</strong>）：对于相近的概念（apple, orange），学到的特征也比较类似，在对这些概念可视化的时候，这些概念就比较相似，最终把它们映射为相似的特征向量。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><h5 id="做迁移学习"><a href="#做迁移学习" class="headerlink" title="做迁移学习"></a>做迁移学习</h5><p>词嵌入做<strong>迁移学习</strong>的步骤：</p>
<ul>
<li>第一步，先从大量的文本集中学习词嵌入。</li>
<li>第二步，用这些词嵌入模型把它迁移到新的只有少量标注训练集的任务中。这样做的一个好处就是可以用更低维度的特征向量代替原来的高维的<strong>one-hot</strong>向量。</li>
<li>第三步，在新的任务上训练模型时，在命名实体识别任务上，只有少量的标记数据集上，可以选择要不要继续微调，用新的数据调整词嵌入。</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/95.png" alt="95" style="zoom:100%;"></p>
<h5 id="帮助类比推理"><a href="#帮助类比推理" class="headerlink" title="帮助类比推理"></a>帮助类比推理</h5><p>词嵌入还有一个特性就是帮助实现类比推理。假如我提出一个问题，<strong>man</strong>如果对应<strong>woman</strong>，那么<strong>king</strong>应该对应什么？你们应该都能猜到<strong>king</strong>应该对应<strong>queen</strong>。能否有一种算法来自动推导出这种关系，下面就是实现的方法。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/96.png" alt="96" style="zoom:100%;"></p>
<p>为了得出这样的类比推理，计算当<strong>man</strong>对于<strong>woman</strong>，那么<strong>king</strong>对于什么，要做的就是找到单词<strong>w</strong>来使得，<script type="math/tex">e_{\text{man}}-e_{\text{woman}}≈ e_{\text{king}} - e_{w}</script>这个等式成立，目标就是找到单词<strong>w</strong>来最大化<script type="math/tex">e_{w}</script>与<script type="math/tex">e_{\text{king}} -  e_{\text{man}} + e_{\text{woman}}</script>的相似度，即<script type="math/tex">Find\ word\ w:argmax \ Sim(e_{w},e_{\text{king}} - e_{\text{man}} + e_{\text{woman}})</script></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/97.png" alt="97" style="zoom:100%;"></p>
<p>为了测量两个词的相似程度，我们需要一种方法来测量两个词的两个嵌入向量之间的相似程度。 给定两个向量$u$和$v$，余弦相似度定义如下： </p>
<script type="math/tex; mode=display">{CosineSimilarity(u, v)} = \frac {u . v} {||u||_2 ||v||_2} = cos(\theta) \tag{1}</script><p>其中 $u.v$ 是两个向量的点积（或内积），<script type="math/tex">||u||_2</script>是向量$u$的范数（或长度），并且 $\theta$ 是向量$u$和$v$之间的角度。这种相似性取决于角度在向量$u$和$v$之间。如果向量$u$和$v$非常相似，它们的余弦相似性将接近1; 如果它们不相似，则余弦相似性将取较小的值。</p>
<h4 id="嵌入矩阵"><a href="#嵌入矩阵" class="headerlink" title="嵌入矩阵"></a>嵌入矩阵</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/98.png" alt="98" style="zoom:100%;"></p>
<p>令<script type="math/tex">EO_{j}=e_j</script>，其中$E$是嵌入矩阵，<script type="math/tex">O_j</script>(10000x1)就是只有第$j$个位置是1的<strong>one-hot</strong>向量，<script type="math/tex">e_j</script>(300x1)是字典中单词$j$的嵌入向量。目标是学习一个嵌入矩阵$E$(300x10000)。</p>
<h4 id="学习词嵌入"><a href="#学习词嵌入" class="headerlink" title="学习词嵌入"></a>学习词嵌入</h4><h5 id="构建神经网络语言模型"><a href="#构建神经网络语言模型" class="headerlink" title="构建神经网络语言模型"></a>构建神经网络语言模型</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/99.png" alt="99" style="zoom:100%;"></p>
<p>构造嵌入矩阵$E$，并对输入词进行<strong>one-hot</strong>编码，然后计算出嵌入向量<script type="math/tex">e_j</script>，经过神经网络隐藏层以后再通过<strong>softmax</strong>层，这个<strong>softmax</strong>也有自己的参数，然后这个<strong>softmax</strong>分类器会在10,000个可能的输出中预测结尾这个单词。这个例子中有6个词，所以用6×300，所以这个输入会是一个1800维的向量，这是通过将这6个嵌入向量堆在一起得到的。</p>
<p>另外还有一个固定的历史窗口，比如这里的4是算法的超参数。如果使用一个4个词的历史窗口，这就意味着神经网络会输入一个1200维的特征变量到这个层中（上图编号4所示），然后再通过<strong>softmax</strong>来预测输出，选择有很多种，用一个固定的历史窗口就意味着你可以处理任意长度的句子，因为输入的维度总是固定的。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/100.png" alt="100" style="zoom:100%;"></p>
<p>如果目标不是学习语言模型本身的话，那么也可以选择其他的上下文。</p>
<h5 id="Word2Vec模型"><a href="#Word2Vec模型" class="headerlink" title="Word2Vec模型"></a>Word2Vec模型</h5><p><strong>word2vec</strong>模型是自然语言处理NLP中一个经典的模型，其将离散的词语映射到连续空间，同时能编码得出词语的上下文语义信息。一般而言，在机器学习算法中使用<strong>one-hot</strong>编码将一个离散型的词语编码为一条数值型的变量。在此基础上，<strong>word2vec</strong>采用神经网络中自动编码机<strong>Auto-Encoder</strong>的方法，包含 <strong>CBOW（Continuous Bag-Of-Words</strong>，即连续的词袋模型）和 <strong>Skip-Gram</strong>两种模型，将词语映像到同一坐标系，得出数值向量。</p>
<p><strong>CBOW</strong>是从原始语句推测目标字词；而<strong>Skip-Gram</strong>正好相反，是从目标字词推测出原始语句。<strong>CBOW</strong>对小型数据库比较合适，而<strong>Skip-Gram</strong>在大型语料中表现更好。 （下图左边为<strong>CBOW</strong>，右边为<strong>Skip-Gram</strong>）</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/101.png" alt="101" style="zoom:45%;"><img src="/2019/10/03/Recognize-Deeplearning.ai/102.png" alt="102" style="zoom:45%;"></p>
<p>在<strong>Skip-Gram</strong>模型中，我们要做的是抽取上下文和目标词配对，来构造一个监督学习问题。上下文不一定总是目标单词之前离得最近的$n$个单词。我们要的做的是随机选一个词作为上下文词然后我们要做的是随机在一定词距内选另一个词。于是我们将构造一个监督学习问题，它给定上下文词，要求你预测在这个词正负$n$个词距内随机选择的某个目标词。显然，这不是个非常简单的学习问题，因为在单词的正负$n$个词距之间，可能会有很多不同的单词。但是构造这个监督学习问题的目标并不是想要解决这个监督学习问题本身，而是想要使用这个学习问题来学到一个好的词嵌入模型。</p>
<p>模型细节和上述一样，输入<strong>one-hot</strong>向量<script type="math/tex">O_{c}</script>，嵌入矩阵$E$乘以向量<script type="math/tex">O_{c}</script>，然后得到了输入的上下文词的嵌入向量<script type="math/tex">e_{c}=EO_{c}</script>。通过<strong>softmax</strong>模型来预测不同词的概率：</p>
<script type="math/tex; mode=display">
Softmax:p\left( t \middle| c \right) = \frac{e^{\theta_{t}^{T}e_{c}}}{\sum_{j = 1}^{10,000}e^{\theta_{j}^{T}e_{c}}}</script><p>这里$\theta_{t}$是一个与输出$t$有关的参数，即某个词$t$和标签相符的概率是多少。最终<strong>softmax</strong>的损失函数就会像之前一样，用$y$表示目标词，这里用的$y$和$\hat y$都是用<strong>one-hot</strong>表示的，于是损失函数就会是：</p>
<script type="math/tex; mode=display">
L\left( \hat y,y \right) = - \sum_{i = 1}^{10,000}{y_{i}\log \hat y_{i}}</script><p>总结一下，这大体上就是一个可以找到词嵌入的简化模型和神经网络（上图编号2所示），其实就是个<strong>softmax</strong>单元。矩阵$E$将会有很多参数，所以矩阵$E$有对应所有嵌入向量<script type="math/tex">e_{c}</script>的参数（上图编号6所示），<strong>softmax</strong>单元也有<script type="math/tex">\theta_{t}</script>的参数（上图编号3所示）。如果优化这个关于所有这些参数的损失函数，你就会得到一个较好的嵌入向量集，这个就叫做<strong>Skip-Gram</strong>模型。</p>
<p>该模型存在的问题就是<strong>softmax</strong>层的计算速度很慢，解决方法主要有分级（<strong>hierarchical</strong>）的<strong>softmax</strong>分类器和<strong>负采样</strong>（<strong>Negative Sampling</strong>）</p>
<h6 id="hierarchical-softmax"><a href="#hierarchical-softmax" class="headerlink" title="hierarchical softmax"></a>hierarchical softmax</h6><p> <strong>hierarchical softmax</strong>的核心内容是哈夫曼树（Huffman Tree），树的核心概念是 出现概率越高的符号使用较短的编码（层次越浅），出现概率低的符号则使用较长的编码（层次越深）。 </p>
<h6 id="负采样"><a href="#负采样" class="headerlink" title="负采样"></a>负采样</h6><p><img src="/2019/10/03/Recognize-Deeplearning.ai/103.png" alt="103" style="zoom:100%;"></p>
<p>假设<strong>orange juice</strong>是一个正样本，然后需要做的是给定$K$次，我们将用相同的上下文词，再从字典中选取随机的词，<strong>king</strong>、<strong>book</strong>、<strong>the</strong>、<strong>of</strong>等，从词典中任意选取的词，并标记0，这些就会成为负样本。</p>
<p>接下来我们将构造一个监督学习问题，其中学习算法输入$x$，输入这对词，要去预测目标的标签，即预测输出$y$。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/104.png" alt="104" style="zoom:100%;"></p>
<p>为了定义模型，我们将使用记号$c$表示上下文词，记号$t$表示可能的目标词，我再用$y$表示0和1，表示是否是一对上下文-目标词。我们要做的就是定义一个逻辑回归模型，给定输入的$c$，$t$对的条件下，$y=1$的概率，即：</p>
<script type="math/tex; mode=display">
P\left( y = 1 \middle| c,t \right) = \sigma(\theta_{t}^{T}e_{c})</script><p>这个模型基于逻辑回归模型，但不同的是我们将一个<strong>sigmoid</strong>函数作用于<script type="math/tex">\theta_{t}^{T}e_{c}</script>，参数和之前一样，你对每一个可能的目标词有一个参数向量<script type="math/tex">\theta_{t}</script>和另一个参数向量<script type="math/tex">e_{c}</script>，即每一个可能上下文词的的嵌入向量，我们将用这个公式估计$y=1$的概率。</p>
<p>这个算法有一个重要的细节就是如何选取负样本，一个办法是对中间的这些词进行采样，即候选的目标词，可以根据其在语料中的经验频率进行采样，就是通过词出现的频率对其进行采样。但问题是这会导致在<strong>like</strong>、<strong>the</strong>、<strong>of</strong>、<strong>and</strong>诸如此类的词上有很高的频率。另一个极端就是用1除以词汇表总词数，即$\frac{1}{\left|v\right|}$，均匀且随机地抽取负样本，这对于英文单词的分布是非常没有代表性的。所以论文的作者<strong>Mikolov</strong>等人根据经验，他们发现这个经验值的效果最好，它位于这两个极端的采样方法之间，既不用经验频率，也就是实际观察到的英文文本的分布，也不用均匀分布，他们采用以下方式：</p>
<script type="math/tex; mode=display">
P\left( w_{i} \right) = \frac{f\left( w_{i} \right)^{\frac{3}{4}}}{\sum_{j = 1}^{10,000}{f\left( w_{j} \right)^{\frac{3}{4}}}}</script><p>进行采样，所以如果$f(w_{i})$是观测到的在语料库中的某个英文词的词频，通过$\frac{3}{4}$次方的计算，使其处于完全独立的分布和训练集的观测分布两个极端之间。</p>
<h5 id="GloVe-词向量（GloVe-Word-Vectors）"><a href="#GloVe-词向量（GloVe-Word-Vectors）" class="headerlink" title="GloVe 词向量（GloVe Word Vectors）"></a>GloVe 词向量（GloVe Word Vectors）</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/105.png" alt="105" style="zoom:100%;"></p>
<p><strong>GloVe</strong>代表用词表示的全局变量（<strong>global vectors for word representation</strong>）。假定<script type="math/tex">X_{ij}</script>是单词$i$在单词$j$上下文中出现的次数，那么这里$i$和$j$就和$t$和$c$的功能一样，所以可以认为<script type="math/tex">X_{ij}</script>等同于<script type="math/tex">X_{tc}</script>，<script type="math/tex">X_{ij}</script>是一个能够获取单词$i$和单词$j$出现位置相近时或是彼此接近的频率的计数器。<strong>GloVe</strong>模型做的就是进行优化，将他们之间的差距进行最小化处理：</p>
<script type="math/tex; mode=display">
\text{mini}\text{mize}\sum_{i = 1}^{10,000}{\sum_{j = 1}^{10,000}{f\left( X_{ij} \right)\left( \theta_{i}^{T}e_{j} + b_{i} + b_{j}^{'} - logX_{ij} \right)^{2}}}</script><p>加权项<script type="math/tex">f\left(X_{ij}\right)</script>用于如果<script type="math/tex">X_{ij}</script>等于0的话，则<script type="math/tex">f\left(X_{ij}\right)=0</script>，同时我们会用一个约定，即$0log0= 0$。其另一个作用是对于不频繁的词，也能给与有意义的运算；对于出现频繁的词更大但不至于过分的权重</p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><h5 id="情感分类"><a href="#情感分类" class="headerlink" title="情感分类"></a>情感分类</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/106.png" alt="106" style="zoom:100%;"></p>
<p>将词嵌入与<strong>RNN</strong>进行结合。</p>
<h5 id="词嵌入除偏"><a href="#词嵌入除偏" class="headerlink" title="词嵌入除偏"></a>词嵌入除偏</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/107.png" alt="107" style="zoom:100%;"></p>
<p>根据训练模型所使用的文本，词嵌入能够反映出性别、种族、年龄、性取向等其他方面的偏见。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/108.png" alt="108" style="zoom:100%;"></p>
<p>处理词嵌入的偏见主要有三个步骤：</p>
<ul>
<li>平均步骤，对于偏见词汇作差取平均。</li>
<li>中和步骤，对于那些定义不确切的词可以将其处理一下，避免偏见。</li>
<li>均衡步骤，假如有这样的词对，<strong>grandmother</strong>和<strong>grandfather</strong>，或者是<strong>girl</strong>和<strong>boy</strong>，对于这些词嵌入，你只希望性别是其区别。</li>
</ul>
<h2 id="序列模型和注意力机制"><a href="#序列模型和注意力机制" class="headerlink" title="序列模型和注意力机制"></a>序列模型和注意力机制</h2><h3 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/109.png" alt="109" style="zoom:100%;"></p>
<p>首先，建立一个网络，这个网络叫做编码网络（<strong>encoder network</strong>）（上图编号1所示），它是一个<strong>RNN</strong>的结构， <strong>RNN</strong>的单元可以是<strong>GRU</strong> 也可以是<strong>LSTM</strong>。每次只向该网络中输入一个法语单词，将输入序列接收完毕后，这个<strong>RNN</strong>网络会输出一个向量来代表这个输入序列。之后建立一个解码网络（上图编号2所示），它以编码网络的输出作为输入，编码网络是左边的黑色部分（上图编号1所示），之后它可以被训练为每次输出一个翻译后的单词，一直到它输出序列的结尾或者句子结尾标记，这个解码网络的工作就结束了。和往常一样把每次生成的标记都传递到下一个单元中来进行预测，就像之前用语言模型合成文本时一样。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/111.png" alt="111" style="zoom:100%;"></p>
<p>机器翻译相当于是建立一个条件语言模型，最上方是一个循环神经网络模型，这个模型能够估计句子的可能性，这就是语言模型所做的事情。机器翻译模型其实和语言模型非常相似，不同在于语言模型总是以零向量开始，而<strong>encoder</strong>网络会计算出一系列向量来表示输入的句子。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/110.png" alt="110" style="zoom:100%;"></p>
<p>机器翻译是建立一个条件语言模型，所以当使用这个模型来进行机器翻译时，并不是从得到的分布中进行随机取样，而是要找到一个英语句子$y$，使得条件概率最大化。所以在开发机器翻译系统时，需要做的一件事就是想出一个算法，用来找出合适的$y$值，使得该项最大化。</p>
<h3 id="集束搜索（Beam-Search）"><a href="#集束搜索（Beam-Search）" class="headerlink" title="集束搜索（Beam Search）"></a>集束搜索（Beam Search）</h3><p> <strong>Beam Search</strong>（集束搜索）是一种启发式图搜索算法，通常用在图的解空间比较大的情况下，为了减少搜索所占用的空间和时间，在每一步深度扩展的时候，剪掉一些质量比较差的结点，保留下一些质量较高的结点。这样减少了空间消耗，并提高了时间效率。 </p>
<p>算法的工作流程如下：</p>
<p>使用广度优先策略建立搜索树，在树的每一层，按照启发代价对节点进行排序，然后仅留下预先确定的个数（Beam Width-集束宽度）的节点，仅这些节点在下一层次继续扩展，其他节点就被剪掉了。</p>
<ul>
<li>将初始节点插入到list中</li>
<li>将给节点出堆，如果该节点是目标节点，则算法结束</li>
<li>否则扩展该节点，取集束宽度的节点入堆。然后到第二步继续循环</li>
<li>算法结束的条件是找到最优解或者堆为空。</li>
</ul>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/112.png" alt="112" style="zoom:100%;"></p>
<p>集束搜索第一步就是挑选出英文翻译句子中的第一个单词。过程是先将整个待翻译的句子输入到绿色的编码网络中，然后使用紫色的解码网络进行解码，结果是一个10000维的向量，用来表示第一个英文单词的概率，选择概率最大的3个（集束宽）单词存储在内存中。<script type="math/tex">P(Y^{<1>|x})</script>，其中$x$表示输入的法语句子，<script type="math/tex">y^{<1>}</script>表示输出的第一个英语单词。</p>
<p>对于第二个单词，是要在第一个单词确定的情况下进行搜索。假设第一个单词被设置为<strong>in</strong>或<strong>jane</strong>或<strong>September</strong>，将第一个单词<strong>in</strong>作为解码器的第一个节点的输出，并且将其作为第二个节点的输入。这样这个网络就能评估第二个词的概率了<script type="math/tex">P(y^{<2>}|x,"in")</script>，接下来要关注的是第一个和第二个单词的联合概率，即<script type="math/tex">P(y^{<1>}, y^{<2>}|x)=P(y^{<1>}|x)P(y^{<2>}|x,y^{<1>})</script>，同样对第一个翻译结果的其他候选词也进行如上操作，由于使用的集束宽为3，并且词汇表中单词的数量为10000，所以最终会有30000个可能的结果，再从这30000个结果中挑选出3个概率最大的结果。 集束搜索通过这种方法每次找到一个词，最终得到希望的结果。</p>
<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/113.png" alt="113" style="zoom:100%;"></p>
<ol>
<li>防止数值下溢（多个小于1的数相乘），取log值。</li>
<li>对于目标函数，因为多个小于1的数相乘，会导致模型倾向于选择更短的翻译结果。为了解决这个问题，可以对目标函数进行归一化，即通过除以翻译结果的单词数量，来减少对输出长的结果的惩罚。在实践中，有个探索性的方法，相比于直接除$T<em>{y}$，也就是输出句子的单词总数，我们有时会用一个更柔和的方法（<strong>a softer approach</strong>），在$T</em>{y}$上加上指数$a$，$a$可以等于0.7。如果$a$等于1，就相当于完全用长度来归一化，如果$a$等于0，$T_{y}$的0次幂就是1，就相当于完全没有归一化，这就是在完全归一化和没有归一化之间。$a$就是算法另一个超参数（<strong>hyper parameter</strong>），需要调整大小来得到最好的结果。另外集束宽的选择也是一个在准确率和计算速度之间trade-off的超参数。</li>
</ol>
<h4 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h4><p><img src="/2019/10/03/Recognize-Deeplearning.ai/114.png" alt="114" style="zoom:100%;"></p>
<p>RNN的功能是计算$P(y|x)$,所以可以通过比较 $P(y^*|x)$和$P(\hat y|x)$的值的大小来判断RNN和束搜索方法的好坏。 </p>
<h3 id="Bleu得分"><a href="#Bleu得分" class="headerlink" title="Bleu得分"></a>Bleu得分</h3><p><strong>BLEU</strong>代表<strong>bilingual evaluation understudy</strong> (双语评估替补)</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/116.png" alt="116" style="zoom:100%;"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/115.png" alt="115" style="zoom:100%;"></p>
<p>定义$n$元词组精确度<script type="math/tex">P_n</script>，如果机器翻译输出与参考1或是参考2完全一致的话，那么所有的这些<script type="math/tex">P_1</script>、<script type="math/tex">P_2</script>等等的值，都会等于1.0。</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/117.png" alt="117" style="zoom:100%;"></p>
<p>将所有$n$元组组合一下来构成最终的<strong>BLEU</strong>得分，按照惯例<strong>BLEU</strong>得分被定义为，$exp (\frac{1}{4}\sum\limits_{n=1}^{4}{P_n})$，对这个线性运算进行乘方运算，乘方是严格单调递增的运算，实际上会用额外的一个叫做<strong>BP</strong> 的惩罚因子（<strong>the BP penalty</strong>）来调整这项。<strong>BP</strong>的意思是“简短惩罚”（ <strong>brevity penalty</strong>）。</p>
<h3 id="注意力模型"><a href="#注意力模型" class="headerlink" title="注意力模型"></a>注意力模型</h3><p><img src="/2019/10/03/Recognize-Deeplearning.ai/118.png" alt="118" style="zoom:100%;"></p>
<p>假定有一个输入句子，并使用双向的<strong>RNN</strong>，在双向<strong>RNN</strong>已经计算了前向的特征值和后向的特征值，用$a^{<t>}$来一起表示这些联系。所以$a^{<t>}$就是时间步$t$上的特征向量。为了保持记号的一致性，用$t’$来索引法语里的词。$\alpha^{<t,t'>}$就是$y^{<t>}$应该在$t'$时，花在$a$上注意力的数量，$t$时间的上下文是特征向量的注意力加权求和$c^{<t>}=\sum_{t<code>&#125;\alpha^&#123;&lt;t,t</code>&gt;}a^{t`}$。</t></t></t,t'></t></t></p>
<p>下一步需要做的是定义注意力权重$\alpha^{&lt;t,t’&gt;}$的计算：</p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/119.png" alt="119" style="zoom:100%;"></p>
<p>$s^{<t>}$是时间步的隐藏状态，<script type="math/tex">e^{<t,t`>}</script>是一个通过神经网络学习的关于$s^{<t-1>}$和$a^{<t`>}$的结果。</t`></t-1></t></p>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><h5 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/120.png" alt="120" style="zoom:100%;"></p>
<p><img src="/2019/10/03/Recognize-Deeplearning.ai/121.png" alt="121" style="zoom:100%;"></p>
<h5 id="触发字检测"><a href="#触发字检测" class="headerlink" title="触发字检测"></a>触发字检测</h5><p><img src="/2019/10/03/Recognize-Deeplearning.ai/122.png" alt="122" style="zoom:100%;"></p>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Re-recognizing Machine Learning</title>
    <url>/2019/09/18/Re-recognizing-machine-learning/</url>
    <content><![CDATA[<p>这篇文章是我在网易云上学习吴恩达机器学习做的一些总结，虽然之前有学习过，但是感觉还是没有很好地吸收总结。另外有的不知道怎么组织语言的就参考了黄广海博士的翻译和笔记。</p>
<span id="more"></span>
<p><strong>Resource</strong></p>
<p>course:</p>
<p>网易云课堂：<a href="https://study.163.com/course/courseMain.htm?courseId=1004570029">吴恩达机器学习</a></p>
<p>PPT：<a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes">https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes</a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="机器学习解决的问题"><a href="#机器学习解决的问题" class="headerlink" title="机器学习解决的问题?"></a><strong>机器学习解决的问题?</strong></h2><p>不只是AI，也为其他计算机任务赋能，比如：</p>
<ul>
<li><p>数据库挖掘：点击流数据，医疗记录，计算生物学，工程领域</p>
</li>
<li><p><strong>简单编程无法完成的任务</strong>：自动驾驶，手写识别，自然语言处理，计算机视觉</p>
</li>
<li>自定义的任务：产品（Amazon，Netflix，iTunes Genius)推荐系统</li>
<li>理解人类的学习和了解大脑</li>
</ul>
<h2 id="机器学习的定义？"><a href="#机器学习的定义？" class="headerlink" title="机器学习的定义？"></a><strong>机器学习的定义？</strong></h2><p>TomMitchell (1998) Well-posed Learning Problem: A computer program is said to <em>learn</em> from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E. (一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。)</p>
<h1 id="符号表示"><a href="#符号表示" class="headerlink" title="符号表示"></a>符号表示</h1><ul>
<li><p>大写字母$A$：一般表示矩阵</p>
</li>
<li><p>小写字母$a$：一般表示向量，向量一般为列向量，故$\theta^{T}x$为标量</p>
</li>
<li><p>$x_i$：第i个样本</p>
</li>
<li><p>$x_i^{(j)}$：第i个样本的第j个特征</p>
</li>
<li><p>$\mathbb R$$^n$：n维向量</p>
</li>
</ul>
<p>神经网络中：</p>
<ul>
<li><p>$x^i$: 第i个训练样本</p>
</li>
<li><p>$z^{l}$: 第l层的Z值</p>
</li>
<li><p>$X^$: mini-batch gradient descent的抽样</p>
</li>
</ul>
<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="算法框架"><a href="#算法框架" class="headerlink" title="算法框架"></a>算法框架</h2><p>Hypothesis、Parameters、Cost Function、Goal</p>
<p>给定假设函数与参数，构造损失函数进行优化</p>
<script type="math/tex; mode=display">
\begin{align}
&Hpyothesis: \;h_\theta(x)=\theta_0+\theta_1x\\
&Parameters: \;\theta_0,\theta_1\\
&Cost\;Function: \;J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}(\sum^n_{j=1}\theta_j^2)\\
&Goal: \;\min_{\theta_0,\theta_1}\;J(\theta_0,\theta_1)
\end{align}</script><p>假设函数与损失函数的直观表示</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/2.png" width="75%" height="75%"></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Batch-梯度下降法"><a href="#Batch-梯度下降法" class="headerlink" title="(Batch)梯度下降法"></a><strong>(Batch)梯度下降法</strong></h3><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><p><img src="/2019/09/18/Re-recognizing-machine-learning/3.png" width="50%" height="50%"></p>
<h4 id="直观表现"><a href="#直观表现" class="headerlink" title="直观表现"></a>直观表现</h4><p><img src="/2019/09/18/Re-recognizing-machine-learning/4.png" width="75%" height="75%"></p>
<p>有点类似使用贪心算法下山</p>
<h4 id="实现描述"><a href="#实现描述" class="headerlink" title="实现描述"></a>实现描述</h4><ul>
<li>关键：同步更新</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/5.png" width="75%"></p>
<h4 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h4><ul>
<li><p>后一时刻的可以用$\theta$前一时刻的$\theta$进行递推</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/6.png" width="75%"></p>
</li>
<li><p>偏导数：斜率，作用是使参数朝着损失函数（局部/全局）最优解推进</p>
</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/7.png" width="75%"></p>
<ul>
<li>偏导数推导</li>
</ul>
<script type="math/tex; mode=display">
\begin{align}
\frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)
&=\frac{\partial}{\partial \theta_j}*\frac{1}{2m}\sum_{i=1}^n(h_\theta(x^{(i)})-y^{(i)})^2 \\
&=\frac{\partial}{\partial \theta_j}*\frac{1}{2m}\sum_{i=1}^n(\theta_0+\theta_1x^{(i)}-y^{(i)})^2\\
j = 0: \frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)
&=\frac{1}{m}\sum_{i=1}^n(h_\theta(x^{(i)})-y^{(i)}) \\
\theta_0&=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^n(h_\theta(x^{(i)})-y^{(i)}) \\
j = 1: \frac{\partial}{\partial \theta_j}J(\theta_0,\theta_1)
&=\frac{1}{m}\sum_{i=1}^n(h_\theta(x^{(i)})-y^{(i)})x_1^{(i)}\\
\theta_1&=\theta_1-\alpha\frac{1}{m}\sum_{i=1}^n(h_\theta(x^{(i)})-y^{(i)})x_1^{(i)} \\
\end{align}</script><ul>
<li>学习率：参数改变的幅度。太小，梯度下降速度慢；太大，收敛甚至发散</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/8.png" width="75%"></p>
<h4 id="梯度下降法的问题"><a href="#梯度下降法的问题" class="headerlink" title="梯度下降法的问题"></a>梯度下降法的问题</h4><ul>
<li>容易到达局部最优解</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/9.png" width="75%"></p>
<ul>
<li>如果学习率不变，收敛速度将越来越慢</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/10.png" width="75%"></p>
<ul>
<li><p>学习率太小：收敛太慢；学习率太大，可能不收敛甚至发散</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/14.png" width="75%"></p>
</li>
<li><p>“Batch”: 每次迭代需要遍历所有训练样本，若样本过大，速度会比较慢</p>
</li>
</ul>
<h4 id="梯度下降的技巧"><a href="#梯度下降的技巧" class="headerlink" title="梯度下降的技巧"></a>梯度下降的技巧</h4><ul>
<li><p>加快梯度下降收敛</p>
<p><strong>Feature Scaling</strong></p>
<p>$x_i=\frac{x_i}{max-min}$</p>
</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/11.png" width="75%"></p>
<p>​    <strong>Mean normalization</strong></p>
<p>​    $x_i=\frac{x_i-\bar{x}}{max-min}$</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/12.png" width="75%"></p>
<ul>
<li>学习率的选择：每10倍或者每3倍进行改变，直到选择到一个不太大也不太小的学习率，能使函数收敛并且运行速度较快</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/16.png" width="75%"></p>
<ul>
<li><p>自动收敛检验，如果前后两次损失函数小于$\epsilon$则认为计算收敛</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/17.png" width="75%"></p>
</li>
</ul>
<h3 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><ul>
<li>直观形式</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/18.png" width="75%"></p>
<ul>
<li><p>符号形式</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/19.png" width="75%"></p>
</li>
</ul>
<h4 id="X-TX-为非可逆矩阵的原因"><a href="#X-TX-为非可逆矩阵的原因" class="headerlink" title="$X^TX$为非可逆矩阵的原因"></a>$X^TX$为非可逆矩阵的原因</h4><p><img src="/2019/09/18/Re-recognizing-machine-learning/20.png" width="75%"></p>
<h3 id="梯度下降法和正规方程取舍"><a href="#梯度下降法和正规方程取舍" class="headerlink" title="梯度下降法和正规方程取舍"></a>梯度下降法和正规方程取舍</h3><ul>
<li>当特征数小于10000时更加倾向于使用正规方程求解参数$\theta$，当特征数大于10000时使用梯度下降直接迭代会更好</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/21.png" width="60%"></p>
<h1 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h1><h2 id="算法框架-1"><a href="#算法框架-1" class="headerlink" title="算法框架"></a>算法框架</h2><script type="math/tex; mode=display">
\begin{align}
Hypothesis&: h_\theta(x)=g(\theta^TX)\\
&\quad\;\ g(z)=\frac{1}{1+e^{-z}}\\
Parameters&:\theta\\
Cost\;Function&:J(\theta)=-\frac{1}{m}[\sum_{i=1}^ny^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]\\
goal&:\min_\theta J(\theta)
\end{align}</script><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>在分类问题中，我们希望输出$y$的取值为0或者1，如果使用线性回归，那么假设函数的输出值可能远大于1，或者远小于0。因此我们需要一个函数能够将输出值永远在0到1之间，即当假设函数大于等于0.5，预测$y=1$，当假设函数小于0.5，预测$y=0$。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/23.png" width="75%"></p>
<p>为此引入logistic回归<script type="math/tex">g(z)=\frac{1}{1+e^{-z}}\\</script></p>
<h2 id="决策界限"><a href="#决策界限" class="headerlink" title="决策界限"></a>决策界限</h2><p><img src="/2019/09/18/Re-recognizing-machine-learning/24.png" width="75%"></p>
<p>在逻辑斯蒂回归中，我们预测：</p>
<p>当$h_\theta(x)\ge0.5$时，预测 $y=1$。</p>
<p>当$h_\theta(x)\lt0.5$时，预测 $y=0$。</p>
<p>根据上面绘制出的 <strong>S</strong> 形函数图像，我们知道当</p>
<p>$z=0$时$g(z)=0.5$ </p>
<p>$z\gt0$ 时$g(z)\gt0.5$</p>
<p>$z\lt0$ 时$g(z)\lt0.5$</p>
<p>又$z=\theta^Tx$，即：$\theta^Tx\ge0$时，预测$y=1$；$\theta^Tx\lt0$时，预测$y=0$</p>
<p>现在假设我们有一个模型：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/25.png" width="70%"></p>
<p>当参数$\theta$是向量$[-3\;1\;1]$，则当$\theta_0+\theta_1x_1+\theta_2 x_2\ge0$，模型将预测$y=1$。我们可以绘制直线$x_1+x_2=3$，将预测为1的区域和预测为0的区域分隔开。</p>
<p>现在假设我们有另一个模型：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/26.png" width="75%"></p>
<p>当参数$\theta$是向量$[-1\;0\;0\;1\;1]$，则当$\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_2^{2}\ge0$，模型将预测$y=1$。我们可以绘制圆形$x_1^2+x_2^2=1$，将预测为1的区域和预测为0的区域分隔开。</p>
<p><strong>注意：决策界限不是训练集的属性，而是假设本身及其参数的属性，只要给定参数向量$\theta$，决策界限就确定了。</strong></p>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>对于线性回归模型，我们定义的代价函数是所有模型误差的平方和<script type="math/tex">J(\theta)=\frac{1}{m}\sum_{i=1}^m\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})</script>。理论上来说，我们也可以对逻辑回归模型沿用这个定义，但是问题在于，当我们将<script type="math/tex">h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}</script>带入到这样定义了的代价函数中时，我们得到的代价函数将是一个非凸函数（<strong>non-convexfunction</strong>）。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/27.png" width="75%"></p>
<p>这意味着我们的代价函数有许多局部最小值，这将影响梯度下降算法寻找全局最小值。因此我们需要重新定义逻辑回归的代价函数为</p>
<script type="math/tex; mode=display">
\begin{align}
J(\theta)&=\frac{1}{m}\sum_{i=1}^mCost(h_\theta(x^{(i)}),y^{(i)})\\
Cost(h_\theta(x^{(i)}),y^{(i)})&=
\begin{cases}
-log(h_\theta(x))&  if\;y=1 \\
-log(1-h_\theta(x))&  if\;y=0
\end{cases} \\
&=-[log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]\\
J(\theta)&=-\frac{1}{m}[\sum_{i=1}^ny^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]\\
\end{align}</script><p>这样做的意义就是希望当$y=1$的时候$h<em>\theta(x)$越接近1代价函数越小，越接近0代价函数越大；反之当$y=0$的时候$h</em>\theta(x)$越接近0代价函数越小，越接近1代价函数越大</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/28.png" width="75%"></p>
<p>在得到这样一个代价函数以后，我们便可以用梯度下降算法来求得能使代价函数最小的参数了。算法为</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/29.png" width="75%"></p>
<ul>
<li>偏导数推导</li>
</ul>
<script type="math/tex; mode=display">
\begin{align}
\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)
&=\frac{\partial}{\partial\theta_j}-\frac{1}{m}\sum_{i=1}^n[y^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]\\
&=\frac{\partial}{\partial \theta_j}-\frac{1}{m}\sum_{i=1}^n[y^{(i)}log(\frac{1}{1+e^{-\theta^Tx}})+(1-y^{(i)})log(1-\frac{1}{1+e^{-\theta^Tx}})]\\
&=\frac{\partial}{\partial \theta_j}-\frac{1}{m}\sum_{i=1}^n[-y^{(i)}log({1+e^{-\theta^Tx}})-(1-y^{(i)})log({1+e^{\theta^Tx}})]\\
&=-\frac{1}{m}\sum_{i=1}^n[-y^{(i)}\frac{-x_j^{(i)}e^{-\theta^Tx}}{1+e^{-\theta^Tx}}-(1-y^{(i)})\frac{x_j^{(i)}e^{\theta^Tx}}{1+e^{\theta^Tx}}]\\
&=-\frac{1}{m}\sum_{i=1}^n[y^{(i)}\frac{x_j^{(i)}}{1+e^{\theta^Tx}}-(1-y^{(i)})\frac{x_j^{(i)}e^{\theta^Tx}}{1+e^{\theta^Tx}}]\\
&=-\frac{1}{m}\sum_{i=1}^n[\frac{y^{(i)}{x_j^{(i)}-x_j^{(i)}e^{\theta^Tx}+y^{(i)}x_j^{(i)}e^{\theta^Tx}}}{1+e^{\theta^Tx}}]\\
&=-\frac{1}{m}\sum_{i=1}^n[\frac{y^{(i)}{-e^{\theta^Tx}+y^{(i)}e^{\theta^Tx}}}{1+e^{\theta^Tx}}x_j^{(i)}]\\
&=-\frac{1}{m}\sum_{i=1}^n[(y^{(i)}-\frac{e^{\theta^Tx}}{1+e^{\theta^Tx}})x_j^{(i)}]\\
&=-\frac{1}{m}\sum_{i=1}^n[(y^{(i)}-\frac{1}{1+e^{-\theta^Tx}})x_j^{(i)}]\\
&=\frac{1}{m}\sum_{i=1}^n[h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}]
\end{align}</script><h2 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h2><ul>
<li><p>Gradient descent</p>
</li>
<li><p>Conjugate gradient（共轭梯度-fminunc）</p>
<ul>
<li>一般函数</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/38.png" width="60%"></p>
<ul>
<li><p>加入了正则项</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/39.png" width="75%"></p>
</li>
</ul>
</li>
<li><p>BFGS</p>
</li>
<li><p>L-BFGS</p>
</li>
</ul>
<h2 id="多分类：一对多"><a href="#多分类：一对多" class="headerlink" title="多分类：一对多"></a>多分类：一对多</h2><p>一对多的思想就是构造一个伪数据集，将多个类的中一个类标记为正向类$(y=1)$，将其他所有类都标记为负向类，这个模型记作<script type="math/tex">h_\theta^{(1)}(x)</script>。然后选择另一个类标记为正向类$(y=2)$，再将其他类都标记为正向类，这个模型记作<script type="math/tex">h_\theta^{(2)}(x)</script>，以此类推。最后得到一系列分类器记为：<script type="math/tex">h_\theta^{(i)}(x)=p(y=i|x;\theta), i=(1,2,3...k)</script></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/31.png" width="75%"></p>
<p>在做预测的时候，将所有分类器都运行一遍，然后对于每个输出变量，都选择可能性最高的作为输出，即$\max<em>ih</em>\theta^{(i)}(x)$。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/30.png" width="75%"></p>
<h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><h2 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h2><p>由于<strong>特征维度过多，模型假设过于复杂，参数过多，训练数据过少，噪声过多</strong>，导致拟合的函数完美的预测训练集，但对新数据的测试集预测结果差。 过度的拟合了训练数据，而没有考虑到泛化能力。</p>
<ul>
<li>回归例子：</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/32.png" width="75%"></p>
<ul>
<li>分类例子：</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/33.png" width="75%"></p>
<p>解决过拟合的方法：</p>
<ol>
<li>丢弃一些不能帮助我们正确预测的特征。可以是手工选择保留哪些特征，或者使用一些模型选择的算法来帮忙（例如<strong>PCA</strong>）</li>
<li>正则化。 保留所有的特征，但是减少参数的大小（<strong>magnitude</strong>）。</li>
</ol>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在下面的右图中高次项的出现导致了过拟合的产生，所以如果我们能让这些高次项的系数接近于0的话，我们就能很好的拟合了。 所以我们要做的就是在一定程度上减小这些参数$\theta$的值，这就是正则化的基本方法。因此我们要做的就是修改代价函数，在$\theta_3$和$\theta_4$设置一点惩罚。这样的话，我们在尝试最小化代价函数的时候也需要将这个惩罚纳入考虑中，并最终导致选择较小一些的$\theta_3$和$\theta_4$。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/34.png" width="75%"></p>
<h2 id="引入正则项"><a href="#引入正则项" class="headerlink" title="引入正则项"></a>引入正则项</h2><p>但是在实际的问题中，我们并不知道哪些系数是相关性较低的，或者是高次项的需要选择出来进行惩罚，所以需要为所有的参数都设置惩罚进行优化，于是加上正则项后的优化目标就是</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/35.png" width="75%"></p>
<p>虽然这个函数并不是严格的二次函数，但是它相比原来的高次项函数更加地平滑。</p>
<p>对于$\lambda$的选择，如果$\lambda$选择过大，相当于对所有参数都进行了惩罚，那么最终优化的结果将会导致所有参数趋向于0，而假设函数就只剩下一个常数项，这将会导致欠拟合。以对于正则化，我们要取一个合理的  的值，这样才能更好的应用正则化。</p>
<h3 id="线性回归-1"><a href="#线性回归-1" class="headerlink" title="线性回归"></a>线性回归</h3><h4 id="梯度更新"><a href="#梯度更新" class="headerlink" title="梯度更新"></a>梯度更新</h4><script type="math/tex; mode=display">
\begin{align}
J(\theta)=\frac{1}{2m}\sum_{i=1}^{m}[((h_\theta(x^{(i)})-&y^{(i)})^{2})+\lambda\sum_{j=1}^{n}\theta_j^2)]\\
Repeat\;until\;convergence&\{\\
&\;\;\;\;\;\;\theta_0:={\theta_0}-a\frac{1}{m}\sum_{i=1}^{m}(({h_\theta}({x}^{(i)})-y^{(i)})x_0^{(i)}) \\
&\;\;\;\;\;\;\theta_j:={\theta_j}-a[\frac{1}{m}\sum_{i=1}^{m}({h_\theta}({x}^{(i)})-y^{(i)})x_{j}^{(i)}+\frac{\lambda }{m}\theta_j]\\
&\;\;\;\;\;\;for\;j=1,2,...n\\
&\}
\end{align}</script><h4 id="正规方程-1"><a href="#正规方程-1" class="headerlink" title="正规方程"></a>正规方程</h4><p>加入正则项后的矩阵一定是可逆的</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/37.png" width="75%"></p>
<p>如果特征数量是$n$那么方阵是一个$(n+1)*(n+1)$维的，并且对角元上除了第一个元素是0，其他元素都是1。</p>
<h3 id="logistic回归-1"><a href="#logistic回归-1" class="headerlink" title="logistic回归"></a>logistic回归</h3><h4 id="梯度更新-1"><a href="#梯度更新-1" class="headerlink" title="梯度更新"></a>梯度更新</h4><script type="math/tex; mode=display">
\begin{align}
J(\theta)=-\frac{1}{m}[\sum_{i=1}^ny^{(i)}log(h_\theta(x^{(i)}))&+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\\
Repeat\;until\;convergence\{\\
&\;\;\;\;\;\;\theta_0:=\theta_0-a\frac{1}{m}\sum_{i=1}^{m}({h_\theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}\\
&\;\;\;\;\;\;\theta_j:=\theta_j-a[\frac{1}{m}\sum_{i=1}^{m}({h_\theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}+\frac{\lambda }{m}{\theta_j}] \\
&\;\;\;\;\;\;for\;j=1,2,...n\\
&\}
\end{align}</script><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h2><ul>
<li>无论是线性回归和逻辑回归，当特征太多时，计算的负荷会非常大。</li>
<li>使用非线性的多项式项，能够建立更好的分类模型。</li>
<li>如果希望用特征构建非线性多项式模型，即便是两两特征组合，也会特征膨胀。</li>
</ul>
<h2 id="前向传播网络"><a href="#前向传播网络" class="headerlink" title="前向传播网络"></a>前向传播网络</h2><h3 id="算法框架-2"><a href="#算法框架-2" class="headerlink" title="算法框架"></a>算法框架</h3><p>前向传播网络的计算实质是函数优化</p>
<script type="math/tex; mode=display">
\begin{align}
Hypothesis&: h_\theta(x)=activation\; function\\
Parameters&:\Theta\\
Cost\;Function&:J(\Theta)=-\frac{1}{m}[\sum_{i=1}^m\sum_{K=1}^ky_k^{(i)}log(h_\Theta(x^{(i)}))_k+(1-y_k^{(i)})log(1-(h_\Theta(x^{(i)}))_k)]\\
&\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{s_l}\sum_{j=1}^{s_l+1}(\Theta_{ji}^{(l)})^2\\
goal&:\min_\Theta J(\Theta)\\
Need\;code\;to\;compute&:-J(\Theta)\\
&\;\;-\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)
\end{align}</script><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><p>神经网络模型建立在很多神经元之上，每一个神经元又是一个个学习模型。这些神经元（也叫激活单元，<strong>activation unit</strong>）采纳一些特征作为输出，并且根据本身的模型提供一个输出。下图是一个以逻辑回归模型作为自身学习模型的神经元示例，在神经网络中，参数又可被成为权重（<strong>weight</strong>）。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/40.png" width="75%"></p>
<p>于是设计出了类似于神经元的神经网络，效果如下：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/42.png" width="75%"></p>
<p>其中<script type="math/tex">x_1,x_2,x_3</script> 是输入单元（<strong>input units</strong>），我们将原始数据输入给它们。<script type="math/tex">a_1,a_2,a_3</script>是中间单元，它们负责将数据进行处理，然后呈递到下一层。 最后是输出单元，它负责计算<script type="math/tex">h_\theta(x)</script>。</p>
<p>神经网络模型是许多逻辑单元按照不同层级组织起来的网络，每一层的输出变量都是下一层的输入变量。下图为一个3层的神经网络，第一层成为输入层（<strong>Input Layer</strong>），最后一层称为输出层（<strong>Output Layer</strong>），中间一层成为隐藏层（<strong>Hidden Layers</strong>）。我们为每一层都增加一个偏差单位（<strong>bias unit</strong>），值永远为1：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/41.png" width="75%"></p>
<p>下面引入一些标记法来帮助描述模型：</p>
<ul>
<li><script type="math/tex">a_i^{(j)}</script>代表第$j$层的第$i$个激活单元。</li>
<li><script type="math/tex">\Theta^{(j)}</script>代表从第$j$层映射到第$j+1$层时的权重的矩阵，例如<script type="math/tex">\Theta^{(1)}</script>代表从第一层映射到第二层的权重的矩阵。其尺寸为：以第$j+1$层的激活单元数量为行数，以第$j$层的激活单元数加一为列数的矩阵。例如：上图所示的神经网络中<script type="math/tex">\Theta^{(1)}</script>的尺寸为 3*4。</li>
</ul>
<p>对于上图所示的模型，激活单元和输出分别表达为：</p>
<script type="math/tex; mode=display">
a_1^{(2)}=g(\Theta_{10}^{(1)}x_0+\Theta_{11}^{(1)}x_1+\Theta_{12}^{(1)}x_2+\Theta_{13}^{(1)}x_3)\\
a_2^{(2)}=g(\Theta_{20}^{(1)}x_0+\Theta_{21}^{(1)}x_1+\Theta_{22}^{(1)}x_2+\Theta_{23}^{(1)}x_3)\\
a_3^{(2)}=g(\Theta_{30}^{(1)}x_0+\Theta_{31}^{(1)}x_1+\Theta_{32}^{(1)}x_2+\Theta_{33}^{(1)}x_3)\\
h_\Theta(x)=g(\Theta_{10}^{(2)}a_0^{(2)}+\Theta_{11}^{(2)}a_1^{(2)}+\Theta_{12}^{(2)}a_2^{(2)}+\Theta_{13}^{(2)}a_3^{(2)})</script><p>上面进行的讨论中只是将特征矩阵中的一行（一个训练实例）喂给了神经网络，我们需要将整个训练集都喂给我们的神经网络算法来学习模型。我们可以知道：每一个$a$都是由上一层所有$x$的和每一个$x$所对应的决定的。我们把这样从左到右的算法称为前向传播算法( <strong>FORWARD PROPAGATION</strong> )，把$x$,$\Theta$,$a$ 分别用矩阵表示：</p>
<script type="math/tex; mode=display">
X=
\begin{bmatrix}
x_1 \\ 
x_2 \\ 
x_3 \\ 
x_4 \\ 
\end{bmatrix},\;
\Theta=
\begin{bmatrix}
\theta_{10} & \theta_{11} & \theta_{12} & \theta_{13}\\ 
\theta_{20} & \theta_{21} & \theta_{22} & \theta_{23}\\
\theta_{30} & \theta_{31} & \theta_{32} & \theta_{33}\\
\end{bmatrix},\;
a=
\begin{bmatrix}
a_1 \\ 
a_2 \\ 
a_3 \\ 
\end{bmatrix},\;</script><p>我们可以得到$g(\Theta*X)=a$。相对于使用循环来编码，利用向量化的方法会使得计算更为简便。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/50.png" width="75%"></p>
<h3 id="使用神经网络的计算来表示逻辑运算"><a href="#使用神经网络的计算来表示逻辑运算" class="headerlink" title="使用神经网络的计算来表示逻辑运算"></a>使用神经网络的计算来表示逻辑运算</h3><ul>
<li>与运算<strong>AND</strong></li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/43.png" width="75%"></p>
<ul>
<li>或运算<strong>OR</strong></li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/44.png" width="75%"></p>
<ul>
<li>非运算<strong>NOT</strong></li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/45.png" width="75%"></p>
<ul>
<li>异或运算<script type="math/tex">XNOR=(x_1ANDx_2)OR((NOTx_1)AND(NOTx_2))</script></li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/46.png" width="75%"></p>
<h3 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h3><p>网络结构如下：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/47.png" width="75%"></p>
<p>神经网络算法的输出结果为四种可能情形之一。</p>
<h3 id="代价函数-1"><a href="#代价函数-1" class="headerlink" title="代价函数"></a>代价函数</h3><p>首先引入一些便于稍后讨论的新标记方法：</p>
<p>假设神经网络的训练样本有$m$个，每个包含一组输入$x$和一组输出信号$y$，$L$表示神经网络层数，<script type="math/tex">S_I</script>表示每层的<strong>neuron</strong>个数(<script type="math/tex">S_l</script>表示输出层神经元个数)，<script type="math/tex">S_L</script>代表最后一层中处理单元的个数。</p>
<p>将神经网络的分类定义为两种情况：二类分类和多类分类，</p>
<p>二类分类：$S_L=1,y=0\;or\;1$表示哪一类；</p>
<p>$K$类分类：$S_L=k,y_i=1$表示分到第$i$类$(k&gt;2)$；</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/48.png" width="75%"></p>
<p>我们回顾逻辑回归问题中我们的代价函数为：</p>
<script type="math/tex; mode=display">
J(\theta)=-\frac{1}{m}[\sum_{i=1}^ny^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2\\</script><p>在逻辑回归中，我们只有一个输出变量，又称标量（<strong>scalar</strong>），也只有一个因变量$y$，但是在神经网络中，我们可以有很多输出变量，我们的<script type="math/tex">h_\theta(x)</script>是一个维度为$K$的向量，并且我们训练集中的因变量也是同样维度的一个向量，因此我们的代价函数会比逻辑回归更加复杂一些，为：  </p>
<script type="math/tex; mode=display">
\begin{align}
&h_\theta(x)\in\mathbb R^K\\
&h_\theta(x)_i=i^{th}output\\
J(\Theta)=-\frac{1}{m}[\sum_{i=1}^m\sum_{K=1}^ky_k^{(i)}&log(h_\Theta(x^{(i)}))_k+(1-y_k^{(i)})log(1-(h_\Theta(x^{(i)}))_k)]+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{s_l}\sum_{j=1}^{s_l+1}(\Theta_{ji}^{(l)})^2
\end{align}</script><p>这个看起来复杂很多的代价函数背后的思想还是一样的，我们希望通过代价函数来观察算法预测的结果与真实情况的误差有多大，唯一不同的是，对于每一行特征，我们都会给出$K$个预测，基本上我们可以利用循环，对每一行特征都预测$K$个不同结果，然后在利用循环在$K$个预测中选择可能性最高的一个，将其与$y$中的实际数据进行比较。</p>
<p>正则化的那一项只是排除了每一层<script type="math/tex">\Theta_0</script>后，每一层的$\Theta$矩阵的和。最里层的循环$j$循环所有的行（由<script type="math/tex">s_l+1</script>层的激活单元数决定），循环则循环所有的列，由该层（<script type="math/tex">s_l</script>层）的激活单元数所决定。</p>
<p>总的来说，损失函数包括两项：</p>
<ul>
<li><script type="math/tex">h_\theta(x)</script>与真实值之间的距离为每个样本-每个类输出的加和。</li>
<li>对参数进行<strong>regularization</strong>的非<strong>bias</strong>项所有参数的平方和。</li>
</ul>
<h2 id="反向传播网络"><a href="#反向传播网络" class="headerlink" title="反向传播网络"></a>反向传播网络</h2><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><script type="math/tex; mode=display">
\begin{align}
&Traning\;set\{(x^{(i)},y^{(i)}),...,(x^{(m)},y^{(m)}\}\\
&set\;\Delta_{ij}^{(l)}=0\;(for\;all\;l,i,j).\\
&for\;i=1\;to\;m\\
&\;\;\;\;\;\;\;\;set\;a^{(i)}=x^{(i)}\\
&\;\;\;\;\;\;\;\;perform\;forward\;propagation\;to\;compute\;all\;previous\;layer\;error\;vector\\
&\;\;\;\;\;\;\;\;using\;y^{(i)},compute\;\delta^{(L)}=a^{(L)}-y^{(i)}\\
&\;\;\;\;\;\;\;\;compute\;\delta^{(L-1)},\delta^{(L-2)},...,\delta^{(2)}\\
&\;\;\;\;\;\;\;\;\Delta_{ij}^{(l)}:=\Delta_{ij}^{l}+a_J^{(l)}\delta_i^{(l+1)}\\
&assume:\;\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)=D_{ij}^{(l)}\\
&D_{ij}^{(l)}:=\frac{1}{m}\Delta_{ij}^{(l)}+\lambda\Theta_ij^{(l)}\;\;if\;j\ne0\\
&D_{ij}^{(l)}:=\frac{1}{m}\Delta_{ij}^{(l)}\;\;if\;j=0
\end{align}</script><h3 id="模型建立-1"><a href="#模型建立-1" class="headerlink" title="模型建立"></a>模型建立</h3><p>回顾前向传播算法：</p>
<ul>
<li>$z^{(l)}$是第$l$层没通过激活函数的值</li>
<li>$a^{(l)}$是第$l$层通过激活函数后的值</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/50.png" width="75%"></p>
<p>后向传播算法：</p>
<ul>
<li>$l$代表目前所计算的是第几层。</li>
<li>$j$代表目前计算层中的激活单元的下标，也将是下一层的第个输入变量的下标。</li>
<li>$i$ 代表下一层中误差单元的下标，是受到权重矩阵中第行影响的下一层中的误差单元的下标。</li>
<li><script type="math/tex">\delta_j^{(l)}</script>是第$l$层结点$j$ 的误差</li>
</ul>
<p>我们从最后一层的误差开始计算，误差是激活单元的预测（<script type="math/tex">a^{(4)}</script>）与实际值（$y^k$）之间的误差，（$k=1:k$）。 我们用来表示误差，则： <script type="math/tex">\delta^{(4)}=a^{(4)}-y</script>，我们利用这个误差值来计算前一层的误差：<script type="math/tex">\delta^{(3)}=(\Theta^{(3)})^T\delta^{(4)}*g'(z^{(3)})</script> 其中<script type="math/tex">g'(z^{(3)})</script>是$S$形函数的导数，<script type="math/tex">g'(z^{(3)})=a^{(3)}*(1-a^{(3)})</script>（这里需要推导证明）。而<script type="math/tex">(\Theta^{(3)})^T\delta^{(4)}</script>则是权重导致的误差的和。下一步是继续计算第二层的误差：<script type="math/tex">\delta^{(2)}=(\Theta^{(2)})^T\delta^{(3)}*g'(z^{(2)})</script>因为第一层是输入变量，不存在误差。我们有了所有的误差的表达式后，便可以计算代价函数的偏导数了，假设$\lambda=0$，即我们不做任何正则化处理时有<script type="math/tex">\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)=a_j^{(l)}\delta_i^{(l+1)}</script>。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/51.png" width="75%"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/53.png" width="75%"></p>
<h2 id="梯度检测"><a href="#梯度检测" class="headerlink" title="梯度检测"></a>梯度检测</h2><h3 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h3><p>导数可以由双侧差分来近似</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/54.png" width="75%"></p>
<h3 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h3><p>推广到偏导数也可以计算得到一个双侧差分矩阵</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/55.png" width="75%"></p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>最终将上述得到的近似梯度矩阵与反向传播得到的偏导数矩阵<script type="math/tex">D_{ij}^{(l)}</script>进行比较</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/56.png" width="75%"></p>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p><img src="/2019/09/18/Re-recognizing-machine-learning/57.png" width="75%"></p>
<h2 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h2><h3 id="对称权重问题"><a href="#对称权重问题" class="headerlink" title="对称权重问题"></a>对称权重问题</h3><p>到目前为止我们都是初始所有参数为0，这样的初始方法对于逻辑回归来说是可行的，但是对于神经网络来说是不可行的。如果我们令所有的初始参数都为0，这将意味着我们第二层的所有激活单元都会有相同的值。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/58.png" width="75%"></p>
<h3 id="更好的初始化"><a href="#更好的初始化" class="headerlink" title="更好的初始化"></a>更好的初始化</h3><p>将初始值设置为<script type="math/tex">[-\epsilon,\,\epsilon]</script></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/59.png" width="75%"></p>
<h2 id="神经网络的训练"><a href="#神经网络的训练" class="headerlink" title="神经网络的训练"></a>神经网络的训练</h2><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p>第一层的单元数即我们训练集的特征数量。</p>
<p>最后一层的单元数是我们训练集的结果的类的数量。</p>
<p>如果隐藏层数大于1，确保每个隐藏层的单元个数相同，通常情况下隐藏层单元的个数越多越好。</p>
<p>我们真正要决定的是隐藏层的层数和每个中间层的单元数。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/60.png" width="75%"></p>
<h3 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h3><ol>
<li>参数的随机初始化</li>
<li>利用正向传播方法计算所有的$h_\theta(x)$</li>
<li>编写计算代价函数$J$的代码</li>
<li>利用反向传播方法计算所有偏导数</li>
<li>利用数值检验方法检验这些偏导数</li>
<li>使用优化算法来最小化代价函数</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/61.png" width="75%"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/62.png" width="75%"></p>
<h1 id="算法性能优化"><a href="#算法性能优化" class="headerlink" title="算法性能优化"></a>算法性能优化</h1><h2 id="错误的方向"><a href="#错误的方向" class="headerlink" title="错误的方向"></a>错误的方向</h2><p>我们不应该随机选择下述的某种方法来改进我们的算法，而是运用一些机器学习诊断法来帮助我们知道上面哪些方法对我们的算法是有效的。</p>
<ol>
<li>获得更多的训练样本——通常是有效的，但代价较大，下面的方法也可能有效，可考虑先采用下面的几种方法。</li>
<li>尝试减少特征的数量</li>
<li>尝试获得更多的特征</li>
<li>尝试增加多项式特征</li>
<li>尝试减少正则化程度$\lambda$</li>
<li>尝试增加正则化程度$\lambda$</li>
</ol>
<h2 id="正确的建议"><a href="#正确的建议" class="headerlink" title="正确的建议"></a>正确的建议</h2><ol>
<li><p><strong>评估一个假设</strong>：将数据分成训练集和测试集，通过训练集让我们的模型学习得出其参数后，计算得到误差最小的，对测试集运用该模型。</p>
</li>
<li><p><strong>模型选择和交叉验证集</strong>：将数据分成训练集、测试集和交叉验证集，通过训练集让我们的不同模型学习得出其参数后，使用交叉验证集运用这些模型，计算得到误差最小的，对测试集使用该模型。</p>
</li>
<li><p><strong>诊断偏差和方差</strong></p>
<p>偏差：是指一个模型的在不同训练集上的平均性能和最优模型的差异。偏差可以用来衡量一个模型的拟合能力。偏差越大，预测值平均性能越偏离最优模型。</p>
<p>方差：描述的是 一个模型在不同训练集上的差异，描述的是一个模型在不同训练集之间的差异，表示模型的泛化能力，方差越小，模型的泛化能力越强。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/70.png" width="75%"></p>
<p>高偏差：欠拟合</p>
<p>高方差：过拟合</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/63.png" width="75%"></p>
<p>高偏差，验证集和训练集的损失函数很接近</p>
<p>高方差，验证集的损失函数远远大于训练集</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/64.png" width="75%"></p>
</li>
<li><p><strong>正则化和偏差/方差</strong></p>
<p>选择$\lambda$的方法为：</p>
<ol>
<li>使用训练集训练出n个不同程度正则化的模型</li>
<li>用n个模型分别对交叉验证集计算的出交叉验证误差</li>
<li>选择得出交叉验证误差<strong>最小</strong>的模型</li>
<li>运用步骤3中选出模型对测试集计算得出推广误差，我们也可以同时将训练集和交叉验证集模型的代价函数误差与λ的值绘制在一张图表上：</li>
</ol>
</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/65.png" width="75%"></p>
<ol>
<li><p><strong>学习曲线</strong></p>
<p>学习曲线就是一种很好的工具，我经常使用学习曲线来判断某一个学习算法是否处于偏差、方差问题。学习曲线是学习算法的一个很好的<strong>合理检验</strong>（<strong>sanity check</strong>）。学习曲线是将训练集误差和交叉验证集误差作为训练集样本数量（$m$）的函数绘制的图表。</p>
</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/66.png" width="75%"></p>
<p>​    在高偏差/欠拟合的情况下，增加数据到训练集不一定能有帮助。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/67.png" width="75%"></p>
<p>​    在高方差/过拟合的情况下，增加更多数据到训练集可能可以提高算法效果。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/68.png" width="75%"></p>
<ol>
<li><p><strong>有针对的做法</strong></p>
<ol>
<li><p>获得更多的训练样本——解决高方差</p>
</li>
<li><p>尝试减少特征的数量——解决高方差</p>
</li>
<li><p>尝试获得更多的特征——解决高偏差</p>
</li>
<li><p>尝试增加多项式特征——解决高偏差</p>
</li>
<li><p>尝试减少正则化程度λ——解决高偏差</p>
</li>
<li><p>尝试增加正则化程度λ——解决高方差</p>
<p>对于神经网络：</p>
<p>使用较小的神经网络，类似于参数较少的情况，容易导致高偏差和欠拟合，但计算代价较小；使用较大的神经网络，类似于参数较多的情况，容易导致高方差和过拟合，虽然计算代价比较大，但是可以通过正则化手段来调整而更加适应数据。</p>
<p>对于神经网络中的隐藏层的层数的选择，通常从一层开始逐渐增加层数，为了更好地作选择，可以把数据分为训练集、交叉验证集和测试集，针对不同隐藏层层数的神经网络训练神经网络，然后选择交叉验证集代价最小的神经网络。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/69.png" width="75%"></p>
</li>
</ol>
</li>
</ol>
<h1 id="机器学习系统设计"><a href="#机器学习系统设计" class="headerlink" title="机器学习系统设计"></a>机器学习系统设计</h1><ul>
<li><p>给定机器学习任务，首先要做什么？</p>
<p>以一个垃圾邮件分类器算法为例进行讨论为了构建这个分类器算法，我们可以做很多事，例如：</p>
<ol>
<li><p>收集更多的数据，让我们有更多的垃圾邮件和非垃圾邮件的样本</p>
</li>
<li><p>基于邮件的路由信息开发一系列复杂的特征</p>
</li>
<li><p>基于邮件的正文信息开发一系列复杂的特征，包括考虑截词的处理</p>
</li>
<li><p>为探测刻意的拼写错误（把<strong>watch</strong> 写成<strong>w4tch</strong>）开发复杂的算法</p>
</li>
</ol>
<p>总结一下就是：</p>
<ol>
<li><p>数据获取</p>
</li>
<li><p>特征提取</p>
</li>
</ol>
</li>
<li><p>其次，构建一个学习算法的推荐方法为：</p>
<ol>
<li><p>从一个简单的能快速实现的算法开始，实现该算法并用交叉验证集数据测试这个算法</p>
</li>
<li><p>绘制学习曲线，决定是增加更多数据，或者添加更多特征，还是其他选择</p>
</li>
<li><p>进行误差分析：人工检查交叉验证集中我们算法中产生预测误差的样本，看看这些样本是否有某种系统化的趋势</p>
</li>
</ol>
<p>总结一下就是：</p>
<p>快速实现一个较为简单快速、即便不是那么完美的算法。看看算法造成的错误，通过误差分析，来看看他犯了什么错，提出新的想法，快速地发现你尝试的这些想法是否能够提高算法的表现，从而你会更快地做出决定，在算法中放弃什么，吸收什么误差分析可以帮助我们系统化地选择该做什么。</p>
</li>
<li><p>既然我们要做误差分析就需要构建评价指标，但在构建之前我们需要解决类偏斜(skewed classes)问题，即样本分布极度不均衡。</p>
<p><strong>查准率</strong>（<strong>Precision</strong>）和<strong>查全率</strong>（<strong>Recall</strong>） 我们将算法预测的结果分成四种情况：</p>
<ol>
<li><p><strong>正确肯定</strong>（<strong>True Positive,TP</strong>）：预测为真，实际为真</p>
</li>
<li><p><strong>正确否定</strong>（<strong>True Negative,TN</strong>）：预测为假，实际为假</p>
</li>
<li><p><strong>错误肯定</strong>（<strong>False Positive,FP</strong>）：预测为真，实际为假</p>
</li>
<li><p><strong>错误否定</strong>（<strong>False Negative,FN</strong>）：预测为假，实际为真</p>
</li>
</ol>
<p>查准率(精确率)=<script type="math/tex">\frac{TP}{(TP+FP)}</script>。例，在所有我们预测有恶性肿瘤的病人中，实际上有恶性肿瘤的病人的百分比，越高越好。</p>
<p>查全率(召回率)=<script type="math/tex">\frac{TP}{(TP+FN)}</script>。例，在所有实际上有恶性肿瘤的病人中，成功预测有恶性肿瘤的病人的百分比，越高越好。</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th><strong>预测值</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td><strong>Positive</strong></td>
<td><strong>Negtive</strong></td>
</tr>
<tr>
<td><strong>实际值</strong></td>
<td><strong>Positive</strong></td>
<td><strong>TP</strong></td>
<td><strong>FN</strong></td>
</tr>
<tr>
<td></td>
<td><strong>Negtive</strong></td>
<td><strong>FP</strong></td>
<td><strong>TN</strong></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>查准率和查全率之间的权衡</p>
<p>如果我们希望更高的查准率，我们可以使用比0.5更大的阀值，如0.7，0.9。这样做我们会减少错误预测病人为恶性肿瘤的情况，同时却会增加未能成功预测肿瘤为恶性的情况。</p>
<p>如果我们希望提高查全率，尽可能地让所有有可能是恶性肿瘤的病人都得到进一步地检查、诊断，我们可以使用比0.5更小的阀值，如0.3,0.1。</p>
<p>我们可以将不同阀值情况下，查全率与查准率的关系绘制成图表，曲线的形状根据数据的不同而不同：</p>
</li>
</ul>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/71.png" width="75%"></p>
<ul>
<li><p>得到<strong>大量的数据</strong>并在某种类型的学习算法中进行训练，可以是一种有效的方法来获得一个具有良好性能的学习算法。大部分算法，都具有相似的性能，其次，随着训练数据集的增大，算法的性能也都对应地增强了。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/72.png" width="50%"></p>
<p>这些结果表明，许多不同的学习算法有时倾向于表现出非常相似的表现，这还取决于一些细节，但是真正能提高性能的，是你能够给一个算法大量的训练数据。像这样的结果，引起了一种在机器学习中的普遍共识：”取得成功的人不是拥有最好算法的人，而是拥有最多数据的人”。</p>
<p>在训练参数较多的模型时，如果训练集比参数的数量还大，甚至是更多，那么这些算法就不太可能会过度拟合。也就是说<strong>训练误差有希望接近测试误差</strong>。因此偏差问题，我么将通过确保有一个具有很多参数的学习算法来解决，以便我们能够得到一个较低偏差的算法，并且通过用非常大的训练集来保证。在此没有方差问题，我们的算法将没有方差，并且通过将这两个值放在一起，我们最终可以得到一个<strong>低误差和低方差</strong>的学习算法。</p>
</li>
</ul>
<h1 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h1><h2 id="算法框架-3"><a href="#算法框架-3" class="headerlink" title="算法框架"></a>算法框架</h2><p>SVM without Kernels</p>
<script type="math/tex; mode=display">
\begin{align}
&Hpyothesis: Given\;x
\begin{cases}
Predict\;"y^{(i)}=1", & if\;\theta^Tx^{(i)}\ge1  \\
Predict\;"y^{(i)}=0", & if\;\theta^Tx^{(i)}\le-1
\end{cases}\\

&Parameters: \;\theta\\
&Cost\;Function: \;J(\theta)=C\sum^m_{i=1}y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})+\frac{1}{2}\sum_{j=1}^n\theta^2_j\\
&Goal: \;\min_{\theta}\;J(\theta)
\end{align}</script><p>SVM with Kernels</p>
<script type="math/tex; mode=display">
\begin{align}
&Hpyothesis: Given\;x,compute\;features\;f\in {\mathbb R}^{(m+1)}
\begin{cases}
Predict\;"y^{(i)}=1", & if\;\theta^Tf\ge1  \\
Predict\;"y^{(i)}=0", & if\;\theta^Tf\le-1
\end{cases}\\

&Parameters: \;\theta\\
&Cost\;Function: \;J(\theta)=C\sum^m_{i=1}y^{(i)}cost_1(\theta^Tf^{(i)})+(1-y^{(i)})cost_0(\theta^Tf^{(i)})+\frac{1}{2}\sum_{j=1}^n\theta^2_j\\
&Goal: \;\min_{\theta}\;J(\theta)
\end{align}</script><h2 id="模型建立-2"><a href="#模型建立-2" class="headerlink" title="模型建立"></a>模型建立</h2><p>从logistic回归出发进行修改得到本质上的SVM。</p>
<p>如果有一个 $y=1$的样本，现在我们希望$h<em>\theta(x)$ 趋近1。因为我们想要正确地将此样本分类，这就意味着当 $h</em>\theta(x)$趋近于1时，$\theta^Tx$ 应当远大于0。相反地，如果我们有另一个样本，即$y=0$。我们希望假设函数的输出值将趋近于0，这对应于$\theta^Tx$则希望其远小于0，</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/85.png" width="75%"></p>
<p>假如将损失函数近似为一个线性函数，简化的同时也更加有利于求解速度</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/73.png" width="75%"></p>
<p>因此优化目标从</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/74.png" width="70%"></p>
<p>变成了（注意$\lambda(C)$和$m$的变化，可以理解为同除某数优化结果不变）上图左边的函数为$cost_1$，右图为$cost_2$。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/75.png" width="70%"></p>
<h2 id="安全距离"><a href="#安全距离" class="headerlink" title="安全距离"></a>安全距离</h2><p>事实上，如果有一个正样本$y=1$，则其实仅仅要求$\theta^Tx$大于等于0，就能将该样本恰当分出，这是因为如果$\theta^Tx$>1的话，我们的模型代价函数值为0，类似地，如果你有一个负样本，则仅需要$\theta^Tx$\&lt;=0就会将负例正确分离，但是，支持向量机的要求更高，不仅仅要能正确分开输入的样本，即不仅仅要求$\theta^Tx$>0，我们需要的是比0值大很多，比如大于等于1，我也想这个比0小很多，比如我希望它小于等于-1，这就相当于在支持向量机中嵌入了一个额外的安全因子，或者说安全的间距因子。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/76.png" width="75%"></p>
<p>另外，如果 $C$非常大，则最小化代价函数的时候，将会很希望找到一个使第一项为0的最优解。因此对这样的一个数据集，也许我们将选择这样的决策界，从而最大间距地分离开正样本和负样本。那么在让代价函数最小化的过程中，我们希望找出在$y=1$和$y=0$两种情况下都使得代价函数中左边的这一项尽量为零的参数。如果我们找到了这样的参数，则我们的最小化问题便转变成：</p>
<script type="math/tex; mode=display">
\min\frac{1}{2}\sum_{j=1}^{n}\theta_j^2\;\;s.t\;
\begin{cases}
\theta^Tx^{(l)}\ge1, & if\;y^{(l)}=1\\
\theta^Tx^{(l)}\le-1, & if\;y^{(l)}=0\\
\end{cases}</script><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>事实上，支持向量机现在要比这个大间距分类器所体现得更成熟，尤其是当你使用大间距分类器的时候，你的学习算法会受异常点(outlier) 的影响。比如我们加入一个额外的正样本。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/77.png" width="75%"></p>
<p>在这里，如果加了这个样本，为了将样本用最大间距分开，也许最终会得到一条类似这样的决策界，对么？就是这条粉色的线，仅仅基于一个异常值，仅仅基于一个样本，就将我决策界从这条黑线变到这条粉线，这实在是不明智的。而如果正则化参数$C$，设置的非常大，这事实上正是支持向量机将会做的。它将决策界，从黑线变到了粉线，但是如果$C$ 设置的小一点，<strong>如果将C设置的不要太大，则最终会得到这条黑线，</strong>当然数据如果不是线性可分的，如果你在这里有一些正样本或者你在这里有一些负样本，则支持向量机也会将它们恰当分开。因此，大间距分类器的描述，仅仅是从直观上给出了正则化参数$C$非常大的情形，同时，要提醒你$C$的作用类似于$\frac{1}{\lambda}$，$\lambda$是我们之前使用过的正则化参数。这只是$C$非常大的情形，或者等价地 $\lambda$ 非常小的情形。你最终会得到类似粉线这样的决策界，但是实际上应用支持向量机的时候，<strong>当$C$不是非常非常大的时候，它可以忽略掉一些异常点的影响，得到更好的决策界。</strong>甚至当数据不是线性可分的时候，支持向量机也可以给出好的结果。</p>
<p>回顾 $C=\frac{1}{\lambda}$，因此：</p>
<p>$C$ 较大时，相当于 $\lambda$ 较小，可能会导致过拟合，高方差。</p>
<p>$C$ 较小时，相当于$\lambda$较大，可能会导致低拟合，高偏差。</p>
<h2 id="数学含义"><a href="#数学含义" class="headerlink" title="数学含义"></a>数学含义</h2><p>向量内积的含义：一个向量在另一个向量上投影的长度。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/78.png" width="75%"></p>
<p>而支持向量机做的全部事情，就是极小化参数向量 <script type="math/tex">{\theta}</script> 范数的平方，或者说长度的平方。这相当于最大化<script type="math/tex">x^{(i)}</script>在向量<script type="math/tex">\theta</script>上的投影<script type="math/tex">(p^{(i)})</script>，即最大化间距（margin）,如图所示。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/79.png" width="75%"></p>
<h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p>对于无法用直线进行分隔的分类问题，可以使用高级数的多项式模型来解决</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/80.png" width="30%"></p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>为了获得上图所示的判定边界，我们的模型可能是<script type="math/tex">{\theta }_{0}+{\theta }_{1}{x}_{1}+{\theta }_{2}{x}_{2}+{\theta }_{3}{x}_{1}{x}_{2}+{\theta }_{4}x_{1}^{2}+{\theta }_{5}x_{2}^{2}+\cdots</script>的形式。我们可以用一系列的新的特征$f$来替换模型中的每一项。例如令：<script type="math/tex">{f}_{1}={x}_{1},{f}_{2}={x}_{2},{f}_{3}={x}_{1}{x}_{2},{f}_{4}=x_{1}^{2},{f}_{5}=x_{2}^{2}...</script>得到 <script type="math/tex">h_θ(x)={\theta }_{1}f_1+{\theta }_{2}f_2+...+{\theta }_{n}f_n</script>。然而，除了对原有的特征进行组合以外，有没有更好的方法来构造<script type="math/tex">f_1,f_2,f_3</script>？我们可以利用核函数来计算出新的特征。</p>
<p>给定一个训练样本，我们利用的各个特征与我们预先选定的<strong>地标</strong>(<strong>landmarks</strong>)的近似程度来选取新的特征。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/81.png" width="30%"></p>
<p>例如：${f}_{1}=similarity(x,{l}^{(1)})=e(-\frac{\begin{Vmatrix}x-l^{(l)}\end{Vmatrix}^2}{2{\sigma }^2})$</p>
<p>其中：$\begin{Vmatrix}x-l^{(l)}\end{Vmatrix}^2=\sum_{j=1}^n(x_j-l_j^{(l)})^2$，为实例$x$中所有特征与地标$l^{(1)}$之间的距离的和。上例中的$similarity(x,{l}^{(1)})$就是核函数，具体而言，这里是一个<strong>高斯核函数</strong>(<strong>Gaussian Kernel</strong>)。</p>
<p>这些地标的作用在于：如果一个训练样本与地标之间的距离近似于0，则新特征$f$近似于$e^{-0}=1$，如果训练样本$x$与地标$l$之间距离较远，则$f$近似于$e^{-(一个较大的数)}=0$。</p>
<h3 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h3><p>假设我们的训练样本含有两个特征[$x_{1}$ $x{_2}$]，给定地标$l^{(1)}$与不同的$\sigma$值，见下图：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/82.png" width="75%"></p>
<p>图中水平面的坐标为 <script type="math/tex">x_{1}</script>，<script type="math/tex">x_{2}</script>而垂直坐标轴代表$f$。可以看出，只有当$x$与<script type="math/tex">l^{(1)}</script><strong>重合</strong>时$f$才具有最大值。随着$x$的改变$f$值<strong>改变的速率</strong>受到$\sigma^2$的控制。</p>
<p>在下图中，当样本处于洋红色的点位置处，因为其离更近，但是离和较远，因此接近1，而,接近0。因此，因此预测。同理可以求出，对于离较近的绿色点，也预测，但是对于蓝绿色的点，因为其离三个地标都较远，预测。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/83.png" width="75%"></p>
<p>这样，图中红色的封闭曲线所表示的范围，便是我们依据一个单一的训练样本和我们选取的地标所得出的判定边界，在预测时，我们采用的特征不是训练样本本身的特征，而是通过核函数计算出的新特征$f_1,f_2,f_3$。</p>
<h3 id="构建核函数SVM"><a href="#构建核函数SVM" class="headerlink" title="构建核函数SVM"></a>构建核函数SVM</h3><p>对于地标的选择，通常是根据训练集的数量选择地标的数量，即如果训练集中有个样本，则我们选取个地标，并且令:$l^{(1)}=x^{(1)},l^{(2)}=x^{(2)},…..,l^{(m)}=x^{(m)}$。这样做的好处在于：现在我们得到的新特征是建立在原有特征与训练集中所有其他特征之间距离的基础之上的，即：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/84.png"></p>
<p>下面我们将核函数运用到支持向量机中，修改我们的支持向量机假设为：</p>
<p>• 给定$x$，计算新特征$f$，当$θ^Tf\ge0$ 时，预测 $y=1$，否则反之。 </p>
<p>相应地修改代价函数为：</p>
<script type="math/tex; mode=display">
\begin{align}

&\sum_{j=1}^{n=m}\theta_j^2=\theta^T\theta\\
&\;\min_\theta C\sum^m_{i=1}y^{(i)}cost_1(\theta^Tf^{(i)})+(1-y^{(i)})cost_0(\theta^Tf^{(i)})+\frac{1}{2}\sum_{j=1}^n\theta^2_j\\
\end{align}</script><p>在具体实施过程中，还需要对最后的正则化项进行些微调整，在计算<script type="math/tex">\sum_{j=1}^{n=m}\theta_{j}^{2}={\theta}^{T}\theta</script>时，我们用$θ^TMθ$代替$θ^Tθ$，其中$M$是根据选择的核函数而不同的一个矩阵。这样做的原因是为了简化计算。</p>
<p>理论上讲，可以在逻辑回归中使用核函数，但是上面使用 $M$来简化计算的方法不适用与逻辑回归，因此计算将非常耗费时间。</p>
<p>在此，使用现有的软件包（如<strong>liblinear</strong>,<strong>libsvm</strong>等）。在使用这些软件包最小化我们的代价函数之前，通常需要编写核函数，并且如果使用高斯核函数，那么在使用之前进行<strong>特征缩放</strong>是非常必要的。</p>
<p>另外，支持向量机也可以不使用核函数，不使用核函数又称为<strong>线性核函数</strong>(<strong>linear kernel</strong>)，当不采用非常复杂的函数，或者训练集特征非常多而样本非常少的时候，可以采用这种不带核函数的支持向量机。</p>
<h3 id="SVM参数-结合参数含义"><a href="#SVM参数-结合参数含义" class="headerlink" title="SVM参数(结合参数含义)"></a>SVM参数(结合参数含义)</h3><p>下面是支持向量机的两个参数$C$和$\sigma$的影响：</p>
<p>$C=\frac{1}{\lambda}$</p>
<p>$C$ 较大时，相当于$\lambda$较小，可能会导致过拟合，高方差；</p>
<p>$C$ 较小时，相当于$\lambda$较大，可能会导致低拟合，高偏差；</p>
<p>$\sigma$较大时，可能会导致低方差，高偏差；</p>
<p>$\sigma$较小时，可能会导致低偏差，高方差。</p>
<h2 id="使用支持向量机"><a href="#使用支持向量机" class="headerlink" title="使用支持向量机"></a>使用支持向量机</h2><h3 id="其他核函数"><a href="#其他核函数" class="headerlink" title="其他核函数"></a>其他核函数</h3><p>不是所有的相似函数都能成为核函数，其还必须满足默塞尔定理(Mercer’s<br>Theorem)</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/86.png" width="75%"></p>
<p>在高斯核函数之外我们还有其他一些选择，如：</p>
<p>多项式核函数（<strong>Polynomial Kerne</strong>l）</p>
<p>字符串核函数（<strong>String kernel</strong>）</p>
<p>卡方核函数（ <strong>chi-square kernel</strong>）</p>
<p>直方图交集核函数（<strong>histogram intersection kernel</strong>）</p>
<p>等等…</p>
<p>这些核函数的目标也都是根据训练集和地标之间的距离来构建新特征，这些核函数需要满足Mercer’s定理，才能被支持向量机的优化软件正确处理。</p>
<h3 id="多类分类问题"><a href="#多类分类问题" class="headerlink" title="多类分类问题"></a>多类分类问题</h3><p>假设我们利用之前介绍的一对多方法来解决一个多类分类问题。如果一共有$k$个类，则我们需要$k$个模型，以及$k$个参数向量${\theta}$。我们同样也可以训练$k$个支持向量机来解决多类分类问题。但是大多数支持向量机软件包都有内置的多类分类功能，我们只要直接使用即可。</p>
<h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>尽管你不去写你自己的<strong>SVM</strong>的优化软件，但是你也需要做几件事：</p>
<p>1、是提出参数$C$的选择。我们在之前的视频中讨论过误差/方差在这方面的性质。</p>
<p>2、你也需要选择内核参数或你想要使用的相似函数，其中一个选择是：我们选择不需要任何内核参数，没有内核参数的理念，也叫线性核函数。因此，如果有人说他使用了线性核的<strong>SVM</strong>（支持向量机），这就意味这他使用了不带有核函数的<strong>SVM</strong>（支持向量机）。</p>
<h3 id="SVM-v-s-logistic-regression"><a href="#SVM-v-s-logistic-regression" class="headerlink" title="SVM v.s logistic regression"></a>SVM v.s logistic regression</h3><p>从逻辑回归模型，我们得到了支持向量机模型，在两者之间，我们应该如何选择呢？</p>
<p><strong>下面是一些普遍使用的准则：</strong></p>
<p>$n$为特征数，$m$为训练样本数。</p>
<p>(1)如果相较于$m$而言，$n$要大许多，即训练集数据量不够支持我们训练一个复杂的非线性模型，我们选用逻辑回归模型或者不带核函数的支持向量机。</p>
<p>(2)如果$n$较小，而且$m$大小中等，例如$n$在 1-1000 之间，而$m$在10-10000之间，使用高斯核函数的支持向量机。</p>
<p>(3)如果$n$较小，而$m$较大，例如$n$在1-1000之间，而$m$大于50000，则使用支持向量机会非常慢，解决方案是创造、增加更多的特征，然后使用逻辑回归或不带核函数的支持向量机。</p>
<p>值得一提的是，神经网络在以上三种情况下都可能会有较好的表现，但是训练神经网络可能非常慢，选择支持向量机的原因主要在于它的代价函数是凸函数，不存在局部最小值。</p>
<h1 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h1><h2 id="算法框架-4"><a href="#算法框架-4" class="headerlink" title="算法框架"></a>算法框架</h2><script type="math/tex; mode=display">
\begin{align}&c^{(i)}=index\;of\;cluster\;(1,2,...,K)\;to\;which\;example\;x^{(i)}\;is\;currently\;assigned\\&\mu_k=cluster\;centroid\;k\;(\mu_k\in\mathbb {R}^n)\\&\mu_c^{(i)}=cluster\;centroid\;of\;cluster\;to\;which\;example\;x^{(i)}\;has\;been\;assigned\\&Optimization\;objective:\\&\;\;\;\;J(c^{(1)},...,c^{(m)},\mu_1,...,\mu_K)=\frac{1}{m}\sum^m_{i=1}\begin{Vmatrix}x^{(i)}-\mu_c(i)\end{Vmatrix}^2\\&\;\;\;\;min_{c^{(i)},...,c^{(m)}\\\mu_1,...,\mu_K}J(c^{(1)},...,c^{(m)},\mu_1,...,\mu_K)\end{align}</script><p>注：$K$是指簇中心数量，$k$是指簇中心索引</p>
<h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><script type="math/tex; mode=display">
\begin{align}&Input: \\&\;\;-\;K(number\;of\;clusters)\\&\;\;-\;Training\;set\;\{x^{(1)},x^{(2)},...,x^{(m)}\}\\&\;\;x^{(i)}\in {\mathbb R}^n\;(drop\;x_0=1\;convention)\\&Randomly\;initialize\;K\;cluster\;centorids\;\mu_1,\mu_2,...,\mu_K\in{\mathbb R}^n\\&Repeat:\{\\&\;\;\;\;\;for\;i=1\;to\;m \\&\;\;\;\;\;\;\;\;\;\;\;c^{(i)}:=index(from\;1\;to\;K)\;of\;cluster\;centroid\;closest\;to\;x{(i)}\\&\;\;\;\;\;for\;k=1\;to\;K \\&\;\;\;\;\;\;\;\;\;\;\;\mu_k:=average\;(mean)\;of\;points\;assigned\;to\;cluster\;k\\&\}\end{align}</script><p>算法分为两个步骤，第一个<strong>for</strong>循环是赋值步骤，即：对于每一个样例$i$，计算其应该属于的类。第二个<strong>for</strong>循环是聚类中心的移动，即：对于每一个类$K$，重新计算该类的质心。</p>
<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>迭代1次</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/87.png"></p>
<p>迭代3次</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/88.png"></p>
<p>迭代10次</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/89.png"></p>
<h2 id="随机初始化-1"><a href="#随机初始化-1" class="headerlink" title="随机初始化"></a>随机初始化</h2><p>随机选择$k$个样本点作为初始簇中心</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/90.png" width="75%"></p>
<p>局部最优问题，解决方法是多次随机初始化，选择cost最低的结果</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/91.png" width="75%"></p>
<p>算法步骤</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/92.png" width="75%"></p>
<h2 id="K的选择"><a href="#K的选择" class="headerlink" title="K的选择"></a>K的选择</h2><p>“Elbow method”</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/93.png" width="75%"></p>
<p>later purpose</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/94.png" width="75%"></p>
<h1 id="主成分分析PCA"><a href="#主成分分析PCA" class="headerlink" title="主成分分析PCA"></a>主成分分析PCA</h1><h2 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h2><ul>
<li>数据压缩</li>
<li>数据可视化</li>
</ul>
<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>在<strong>PCA</strong>中，我们要做的是找到一个方向向量（<strong>Vector direction</strong>），当我们把所有的数据都投射到该向量上时，我们希望投射平均均方误差能尽可能地小。方向向量是一个经过原点的向量，而投射误差是从特征向量向该方向向量作垂线的长度。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/95.png" width="75%"></p>
<p>主成分分析与线性回归是两种不同的算法。主成分分析最小化的是投射误差（<strong>Projected Error</strong>），而线性回归尝试的是最小化预测误差。线性回归的目的是预测结果，而主成分分析不作任何预测。</p>
<h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><p><strong>PCA</strong>将$n$个特征降维到$k$个，可以用来进行数据压缩，如果100维的向量最后可以用10维来表示，那么压缩率为90%。同样图像处理领域的<strong>KL变换</strong>使用<strong>PCA</strong>做图像压缩。但<strong>PCA</strong> 要保证降维后，还要保证数据的特性损失最小。</p>
<p><strong>PCA</strong>技术的一大好处是对数据进行降维的处理。我们可以对新求出的“主元”向量的重要性进行排序，根据需要取前面最重要的部分，将后面的维数省去，可以达到降维从而简化模型或是对数据进行压缩的效果。同时最大程度的保持了原有数据的信息。</p>
<p><strong>PCA</strong>技术的一个很大的优点是，它是完全无参数限制的。在<strong>PCA</strong>的计算过程中完全不需要人为的设定参数或是根据任何经验模型对计算进行干预，最后的结果只与数据相关，与用户是独立的。</p>
<p>但是，这一点同时也可以看作是缺点。如果用户对观测对象有一定的先验知识，掌握了数据的一些特征，却无法通过参数化等方法对处理过程进行干预，可能会得不到预期的效果，效率也不高。</p>
<h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><script type="math/tex; mode=display">
\begin{align}
&Reduce\;data\;from\;n-dimensions\;to\;k-dimensions\\
&1. Data\;preprocessing\\
&\;\;\;\;\;\;\;\;Training\;set:\;x^{(1)},x^{(2)},...,x^{(m)}\\
&\;\;\;\;\;\;\;\;Preprocessing(feature\;scaling/mean\;normalization)\\
&\;\;\;\;\;\;\;\;x^{(i)}_j=x^{(i)}_j-\frac{1}{m}\sum_{i=1}^mx_j^{(i)}\\
&\;\;\;\;\;\;\;\;If\;different\;feature\;on\;different\;scales\\
&\;\;\;\;\;\;\;\;scale\;features\;to\;have\;comparable\;range\;of\;values.\\
&\;\;\;\;\;\;\;\;x^{(i)}=\frac{x_j^{(i)}}{s_j}\\
&2. Compute\;"convariance\;matrix":\\
&\;\;\;\;\;\;\;\;\Sigma=\frac{1}{m}\sum_{i=1}^n(x^{(i)})(x^{(i)})^T\\
&3. Compute\;"eigenvectors"\;of\;matrix\;\Sigma:\\
&\;\;\;\;\;\;\;\;[U,S,V]=svd(\Sigma):\\
&4. Selecting\;the\;first\;k\;vectors\;from\;U\\
&\;\;\;\;\;\;\;\;U_{reduce}=U(:,1:k);\\
&5. Compute\;k-dimensions\;data\\
&\;\;\;\;\;\;\;\;z=U_{reduce}^T*x
\end{align}</script><p><img src="/2019/09/18/Re-recognizing-machine-learning/96.png" width="75%"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/97.png" width="75%"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/98.png" width="75%"></p>
<p>对于一个 $n×n$维度的矩阵，上式中的$U$是一个具有与数据之间最小投射误差的方向向量构成的矩阵。如果我们希望将数据从$n$维降至$k$维，我们只需要从$U$中选取前$k$个向量，获得一个$n×k$维度的矩阵，我们用<script type="math/tex">U_{reduce}</script>表示，然后通过如下计算获得要求的新特征向量$z^{(i)}$:<script type="math/tex">z^{(i)}=U^{T}_{reduce}*x^{(i)}</script>，其中$x$是$n×1$维的，因此结果为$k×1$维度。注，我们不对方差特征进行处理。</p>
<h2 id="选择主成分的数量"><a href="#选择主成分的数量" class="headerlink" title="选择主成分的数量"></a>选择主成分的数量</h2><p>主要成分分析是减少投射的平均均方误差：</p>
<p>训练集的方差为：$\frac{1}{m}\sum_{i=1}^m\begin{Vmatrix}x^{(i)}\end{Vmatrix}^2$</p>
<p>我们希望在平均均方误差与训练集方差的比例尽可能小的情况下选择尽可能小的$k$值。</p>
<p>如果我们希望这个比例小于1%，就意味着原本数据的偏差有99%都保留下来了，如果我们选择保留95%的偏差，便能非常显著地降低模型中特征的维度了。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/99.png" width="75%"></p>
<p>我们可以先令$k=1$，然后进行主要成分分析，获得$U_{reduce}$和$z$，然后计算比例是否小于1%。如果不是的话再令$k=2$，如此类推，直到找到可以使得比例小于1%的最小$k$ 值（原因是各个特征之间通常情况存在某种相关性）。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/100.png" width="75%"></p>
<p>还有一些更好的方式来选择$k$，当我们在<strong>Octave</strong>中调用“<strong>svd</strong>”函数的时候，我们获得三个参数：<code>[U, S, V] = svd(sigma)</code>。</p>
<p>其中的$S$是一个$n×n$的矩阵，只有对角线上有值，而其它单元都是0，我们可以使用这个矩阵来计算平均均方误差与训练集方差的比例：</p>
<script type="math/tex; mode=display">
\frac{\frac{1}{m}\sum^m_{i=1}\begin{Vmatrix}x^{(i)}-x_{approve}^{(i)}\end{Vmatrix}^2}{\frac{1}{m}\sum^m_{i=1}\begin{Vmatrix}x^{(i)}\end{Vmatrix}^2}=1-\frac{\sum_{i=1}^kS_{ii}}{\sum_{i=1}^mS_{ii}}\le1\%</script><p>也就是</p>
<script type="math/tex; mode=display">
\frac{\sum_{i=1}^kS_{ii}}{\sum_{i=1}^mS_{ii}}\ge0.99</script><p>在压缩过数据后，我们可以采用如下方法来近似地获得原有的特征：$x<em>{appox}^{(i)}=U</em>{reduce}z^{(i)}$</p>
<h2 id="重建的压缩表示"><a href="#重建的压缩表示" class="headerlink" title="重建的压缩表示"></a>重建的压缩表示</h2><p>在以前的视频中，我们谈论<strong>PCA</strong>作为压缩算法。在那里你可能需要把1000维的数据压缩100维特征，或具有三维数据压缩到一二维表示。所以，如果这是一个压缩算法，应该能回到这个压缩表示，回到你原有的高维数据的一种近似。</p>
<p>我们知道<script type="math/tex">z=U^{T}_{reduce}x</script>，相反的方程为：<script type="math/tex">x_{appox}=U_{reduce}\cdot z</script>,<script type="math/tex">x_{appox}\approx x</script>。如图：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/101.png" width="75%"></p>
<h2 id="PCA的应用建议"><a href="#PCA的应用建议" class="headerlink" title="PCA的应用建议"></a>PCA的应用建议</h2><ol>
<li>当训练集特征维数较大时使用PCA将数据压缩至较少特征，然后对训练集运行学习算法。在预测时，采用之前学习而来的$U_{reduce}$将输入的特征$x$转换成特征向量$z$，然后再进行预测。</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/102.png" width="75%"></p>
<ol>
<li>错误使用PCA的情况：将其用于减少过拟合（减少了特征的数量）。这样做非常不好，还不如尝试正则化处理。原因在于PCA只是近似地丢弃一些特征，其并不考虑任何与结果变量有关的信息，因此可能会丢失非常重要的特征。然而我们进行正则化处理时，会考虑到结果变量，不会丢掉重要的数据。</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/103.png" width="75%"></p>
<ol>
<li>另一个常见的错误是，默认地将主成分分析作为学习过程中的一部分，这虽然很多时候有效果。但是最好还是从所有原始特征开始，只有在必要的时候（算法运行太慢或者占用太多内存）才考虑采用PCA。</li>
</ol>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/104.png" width="75%"></p>
<h1 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h1><h2 id="基于高斯分布"><a href="#基于高斯分布" class="headerlink" title="基于高斯分布"></a>基于高斯分布</h2><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p><img src="/2019/09/18/Re-recognizing-machine-learning/105.png" width="75%"></p>
<p>我们选择一个$\varepsilon$，将$p(x) = \varepsilon$作为我们的判定边界，当$p(x) &gt; \varepsilon$时预测数据为正常数据，否则为异常。</p>
<h3 id="开发和评价一个异常检测系统"><a href="#开发和评价一个异常检测系统" class="headerlink" title="开发和评价一个异常检测系统"></a>开发和评价一个异常检测系统</h3><p>异常检测算法是一个非监督学习算法，意味着我们无法根据结果变量 $ y$ 的值来告诉我们数据是否真的是异常的。我们需要另一种方法来帮助检验算法是否有效。当我们开发一个异常检测系统时，我们从带标记（异常或正常）的数据着手，我们从其中选择一部分正常数据用于构建训练集，然后用剩下的正常数据和异常数据混合的数据构成交叉检验集和测试集。下图中60%，20%，20%是推荐的方法，而后者不推荐。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/106.png" width="75%"></p>
<p>具体的评价方法如下：</p>
<ol>
<li>根据测试集数据，我们估计特征的平均值和方差并构建$p(x)$函数</li>
<li>对交叉检验集，我们尝试使用不同的$\varepsilon$值作为阀值，并预测数据是否异常，根据$F1$值或者查准率与查全率的比例来选择 $\varepsilon$</li>
<li>选出 $\varepsilon$ 后，针对测试集进行预测，计算异常检验系统的$F1$值，或者查准率与查全率之比</li>
</ol>
<h3 id="异常检测与监督学习对比"><a href="#异常检测与监督学习对比" class="headerlink" title="异常检测与监督学习对比"></a>异常检测与监督学习对比</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>异常检测</th>
<th>监督学习</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据特征</td>
<td>非常少量的正向类（异常数据 $y=1$）, 大量的负向类（$y=0$）</td>
<td>时有大量的正向类和负向类</td>
</tr>
<tr>
<td>异常特征提取的难易程度</td>
<td>有许多不同种类的异常，对于任何算法都比较难去从正样本中学习异常的状况。未来遇到的异常可能与已掌握的异常、非常的不同。</td>
<td>有足够多的正向类实例，足够用于训练算法，未来遇到的正向类实例可能与训练集中的非常近似。</td>
</tr>
<tr>
<td>例子</td>
<td>欺诈行为检测、生产（例如飞机引擎）、检测数据中心的计算机运行状况</td>
<td>邮件过滤器、天气预报、肿瘤分类</td>
</tr>
</tbody>
</table>
</div>
<h3 id="特征选择和处理"><a href="#特征选择和处理" class="headerlink" title="特征选择和处理"></a>特征选择和处理</h3><p>异常检测假设特征分布符合高斯分布，如果数据的分布不是高斯分布，异常检测算法也能够工作，但是最好还是将数据转化成高斯分布，例如使用对数函数：$x= log(x+c)$，其中 $c$ 为非负常数； 或者 $x=x^c$，$c$为 0-1 之间的一个分数，等方法。(在<strong>python</strong>中，通常用<code>np.log1p()</code>函数，$log1p$就是 $log(x+1)$，可以避免出现负数结果，反向函数就是<code>np.expm1()</code>)</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/107.png" width="75%"></p>
<h3 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h3><p>一个常见的问题只分析异常的数据的单一特征可能也会有较高的$p(x)$值，因而被算法认为是正常的。这种情况下误差分析能够帮助我们，我们也许能从问题中发现我们需要增加一些新的特征，增加这些新特征后获得的新算法能够帮助我们更好地进行异常检测。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/108.png" width="75%"></p>
<p>我们通常可以通过将一些相关的特征进行组合，来获得一些新的更好的特征（异常数据的该特征值异常地大或小），例如，在检测数据中心的计算机状况的例子中，我们可以用<strong>CPU</strong>负载与网络通信量的比例作为一个新的特征，如果该值异常地大，便有可能意味着该服务器是陷入了一些问题中。</p>
<h2 id="基于多元高斯分布"><a href="#基于多元高斯分布" class="headerlink" title="基于多元高斯分布"></a>基于多元高斯分布</h2><h3 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h3><p>在一般的高斯分布模型中，计算 $p(x)$ 的方法是：通过分别计算每个特征对应的几率然后将其累乘起来，在多元高斯分布模型中，将构建特征的协方差矩阵，用所有的特征一起来计算 $p(x)$。</p>
<p>有一组样本$x^{(1)},x^{(2)},…,x^{(m)}$是一个$n$维向量，假设样本来自一个多元高斯分布。如何尝试估计参数 $\mu$ 和 $\Sigma$ 以及标准公式？如何把所有这一切共同开发一个异常检测算法？</p>
<p>首先计算所有特征的平均值，然后再计算协方差矩阵：</p>
<script type="math/tex; mode=display">
\mu=\frac{1}{m}\sum_{i=1}^mx^i\\
\Sigma=\frac{1}{m}\sum_{i=1}^m(x^{(i)}-\mu)(x^{(i)}-\mu)^T=\frac{1}{m}(X-\mu)^T(X-\mu)</script><p>注:其中$\mu $ 是一个向量，其每一个单元都是原特征矩阵中一行数据的均值。最后我们计算多元高斯分布的$p\left( x \right)$:</p>
<script type="math/tex; mode=display">
\begin{align}
&p(x)=\prod_{j=1}^np(x_j;\mu,\sigma^2_j)=\prod_{j=1}^n\frac{1}{\sqrt{2\pi}\sigma^2}exp(-\frac{(x_j-\mu_j)^2}{2\sigma^j})\\
&p(x)=\frac{1}{(2\pi)^\frac{n}{2}|\Sigma|^\frac{1}{2}}exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))
\end{align}</script><p>其中：</p>
<ul>
<li>$|\Sigma|$是定矩阵，在 <strong>Octave</strong> 中用 <code>det(sigma)</code>计算</li>
<li>$\Sigma^{-1}$ 是逆矩阵</li>
</ul>
<p>最后见上述<strong>开发和评价一个异常检测系统</strong>内容开发一个异常检测算法</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/111.png" width="75%"></p>
<h3 id="参数可视化"><a href="#参数可视化" class="headerlink" title="参数可视化"></a>参数可视化</h3><p>下面我们来看看协方差矩阵是如何影响模型的：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/109.jpg"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/110.png" width="40%"></p>
<p>上图是6个不同的模型，从左往右依次分析：</p>
<ol>
<li>是一个一般的高斯分布模型</li>
<li>通过协方差矩阵，令特征1拥有较小的偏差，同时保持特征2的偏差</li>
<li>通过协方差矩阵，令特征2拥有较大的偏差，同时保持特征1的偏差</li>
<li>通过协方差矩阵，在不改变两个特征的原有偏差的基础上，增加两者之间的正相关性</li>
<li>通过协方差矩阵，在不改变两个特征的原有偏差的基础上，增加两者之间的负相关性</li>
<li>通过$\mu$，在不改变两个特征的原有偏差的基础上，改变特征1和特征2的均值</li>
</ol>
<h2 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h2><p>多元高斯分布模型与原高斯分布模型的关系：</p>
<p>可以证明的是，原本的高斯分布模型是多元高斯分布模型的一个子集，如果协方差矩阵只在对角线的单位上有非零的值时，即为原本的高斯分布模型了。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/112.png" width="75%"></p>
<p>原高斯分布模型和多元高斯分布模型的比较：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>原高斯分布模型</th>
<th>多元高斯分布模型</th>
</tr>
</thead>
<tbody>
<tr>
<td>不能捕捉特征之间的相关性 但可以通过将特征进行组合的方法来解决</td>
<td>自动捕捉特征之间的相关性</td>
</tr>
<tr>
<td>计算代价低，能适应大规模的特征</td>
<td>计算代价较高，训练集较小时比较适用</td>
</tr>
<tr>
<td>即使训练样本$m$较小也能很好地运作</td>
<td>必须要有 $m&gt;n$，不然的话协方差矩阵$\Sigma$不可逆的，通常需要 $m&gt;10n$ 另外特征冗余也会导致协方差矩阵不可逆</td>
</tr>
</tbody>
</table>
</div>
<p>原高斯分布模型被广泛使用着，如果特征之间在某种程度上存在相互关联的情况，我们可以通过构造新新特征的方法来捕捉这些相关性。</p>
<p>如果训练集不是太大，并且没有太多的特征，我们可以使用多元高斯分布模型。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/113.png" width="75%"></p>
<h1 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h1><h2 id="基于内容的推荐算法"><a href="#基于内容的推荐算法" class="headerlink" title="基于内容的推荐算法"></a>基于内容的推荐算法</h2><p>在一个基于内容的推荐系统算法中，我们假设对于我们希望推荐的东西有一些数据，这些数据是有关这些东西的特征。在我们的例子中，我们可以假设每部电影都有两个特征，如<script type="math/tex">x_1</script>代表电影的浪漫程度，<script type="math/tex">x_2</script>代表电影的动作程度。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/114.png" width="75%"></p>
<p>则每部电影都有一个特征向量，如<script type="math/tex">x^{(1)}</script>是第一部电影的特征向量为[0.9 0]。</p>
<p>下面我们要基于这些特征来构建一个推荐系统算法。<br>假设我们采用线性回归模型，我们可以针对每一个用户都训练一个线性回归模型，如<script type="math/tex">{\theta }^{(1)}</script>是第一个用户的模型的参数。<br>于是，我们有：</p>
<script type="math/tex; mode=display">\theta^{(j)}$$用户 $j$ 的参数向量

$$x^{(i)}$$电影 $i$ 的特征向量

对于用户 $j$ 和电影 $i$，我们预测评分为：$$(\theta^{(j)})^T x^{(i)}</script><p>代价函数</p>
<p>针对用户 $j$，该线性回归模型的代价为预测误差的平方和，加上正则化项：</p>
<script type="math/tex; mode=display">
\min_{\theta_(j)}\frac{1}{2}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}(\theta_k^{(j)})^2</script><p>其中 $i:r(i,j)$表示我们只计算那些用户 $j$ 评过分的电影。在一般的线性回归模型中，误差项和正则项应该都是乘以$\frac{1}{2m}$，在这里我们将$m$去掉。并且我们不对方差项$\theta_0$进行正则化处理。</p>
<p>上面的代价函数只是针对一个用户的，为了学习所有用户，我们将所有用户的代价函数求和：</p>
<script type="math/tex; mode=display">
\min_{\theta^{(1)},...,\theta^{n_u}}\frac{1}{2}\sum^{n_u}_{j=1}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,,j)})^2+\frac{\lambda}{2}\sum^{n_u}_{j=1}\sum^n_{k=1}(\theta^{(j)}_k)^2</script><p>如果我们要用梯度下降法来求解最优解，我们计算代价函数的偏导数后得到梯度下降的更新公式为：</p>
<script type="math/tex; mode=display">
\theta_k^{(j)}:=\theta_k^{(j)}-\alpha\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,,j)})x_k^{(i)}\;(for\;k=0)\\
\theta_k^{(j)}:=\theta^{(j)}_k-\alpha(\sum_{i:r(i,j)=1}((\theta^{(i)})^Tx^{(i)}-y^{(i,j)}x_k^{(i)}+\lambda\theta_k^{(i)})\;(for\;k\ne0)</script><h2 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h2><p>在之前的基于内容的推荐系统中，对于每一部电影，我们都掌握了可用的特征，使用这些特征训练出了每一个用户的参数。相反地，如果我们拥有用户的参数，我们可以学习得出电影的特征。</p>
<script type="math/tex; mode=display">
\min_{x^{(1)},...,x^{n_m}}\frac{1}{2}\sum^{n_u}_{i=1}\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,,j)})^2+\frac{\lambda}{2}\sum^{n_m}_{j=1}\sum^n_{k=1}(x^{(i)}_k)^2</script><p>但是如果我们既没有用户的参数，也没有电影的特征，这两种方法都不可行了。协同过滤算法可以同时学习这两者。我们的优化目标便改为同时针对$x$和$\theta$进行。</p>
<script type="math/tex; mode=display">
J(x^{(1)},...,x^{(n_m)},\theta^{(1)},...,\theta^{(n_u)})=\frac{1}{2}\sum_{(i,j):r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_m}_{j=1}\sum^n_{k=1}(x^{(j)}_k)^2+\frac{\lambda}{2}\sum^{n_u}_{j=1}\sum^n_{k=1}(\theta^{(j)}_k)^2</script><p>对代价函数求偏导数的结果如下：</p>
<script type="math/tex; mode=display">
x_k^{(j)}:=x^{(j)}_k-\alpha(\sum_{j:r(i,j)=1}((\theta^{(i)})^Tx^{(i)}-y^{(i,j)}\theta_k^{(i)}+\lambda\theta_k^{(i)})\\
\theta_k^{(j)}:=\theta^{(j)}_k-\alpha(\sum_{i:r(i,j)=1}((\theta^{(i)})^Tx^{(i)}-y^{(i,j)}x_k^{(i)}+\lambda\theta_k^{(j)})</script><p>注：在协同过滤从算法中，我们通常不使用方差项，如果需要的话，算法会自动学得。<br>协同过滤算法使用步骤如下：</p>
<ol>
<li>初始 <script type="math/tex">x^{(1)},x^{(1)},...x^{(nm)},\ \theta^{(1)},\theta^{(2)},...,\theta^{(n_u)}</script>为一些随机小值</li>
<li>使用梯度下降算法最小化代价函数</li>
<li>在训练完算法后，我们预测<script type="math/tex">(\theta^{(j)})^Tx^{(i)}</script>为用户 $j$ 给电影 $i$ 的评分</li>
</ol>
<p>通过这个学习过程获得的特征矩阵包含了有关电影的重要数据，这些数据不总是人能读懂的，但是我们可以用这些数据作为给用户推荐电影的依据。</p>
<p>例如，如果一位用户正在观看电影 $x^{(i)}$，我们可以寻找另一部电影$x^{(j)}$，依据两部电影的特征向量之间的距离<script type="math/tex">||x^{(i)}-x^{(j)}||</script>的大小。</p>
<h2 id="协同过滤算法"><a href="#协同过滤算法" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h2><h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>给定$x^{(1)},…,x^{(n_m)}$，估计$\theta^{(1)},…,\theta^{(n_u)}$：</p>
<script type="math/tex; mode=display">
\min_{\theta^{(1)},...,\theta^{(n_u)}}\frac{1}{2}\sum_{j=1}^{n_u}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^{n}(\theta_k^{(j)})^2</script><p>给定$\theta^{(1)},…,\theta^{(n_u)}$，估计$x^{(1)},…,x^{(n_m)}$：</p>
<p>同时最小化$x^{(1)},…,x^{(n_m)}$和$\theta^{(1)},…,\theta^{(n_u)}$：</p>
<script type="math/tex; mode=display">
J(x^{(1)},...,x^{(n_m)},\theta^{(1)},...,\theta^{(n_u)})=\frac{1}{2}\sum_{(i,j):r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^{n}(x_k^{(i)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^{n}(\theta_k^{(j)})^2\\
\min_{x^{(1)},...,x^{(n_m)} \\\ \theta^{(1)},...,\theta^{(n_u)}}J(x^{(1)},...,x^{(n_m)},\theta^{(1)},...,\theta^{(n_u)}</script><h3 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h3><script type="math/tex; mode=display">
\begin{align}
&1.Initialze\;x^{(1)},...,x^{(n_m)},\theta^{(1)},...,\theta^{(n_u)}\;to\;small\;random\;values.\\
&2.Minimize\;J(x^{(1)}),...,x^{(n_m)},\theta^{(1)},...,\theta^{(n_u)})\;using\;gradien\\
\;\;\;\;&descent\;(or\;an\;advanced\;optimization\;algorithm).\;E.g.\;for\\
&every\;j=1,...,n_u,i,...,n_m:\\
&\;\;\;\;\;\;\;\;x_k^{(i)}:=x_k^{(i)}-\alpha(\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})\theta_k^{(j)}+\lambda x_k^{(i)})\\
&\;\;\;\;\;\;\;\;\theta^{(j)}_k:=\theta^{(j)}_k-\alpha(\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}+\lambda \theta_k^{(j)})\\
&3.For\;a\;user\;with\;parameters\;\theta\;and\;a\;movie\;with\;(learned)\;\\
&feature\;x,\;predict\;a\;star\;rating\;of\;\theta^Tx.
\end{align}</script><h2 id="向量化：低秩矩阵分解"><a href="#向量化：低秩矩阵分解" class="headerlink" title="向量化：低秩矩阵分解"></a>向量化：低秩矩阵分解</h2><p>在上几节视频中，我们谈到了协同过滤算法，本节视频中我将会讲到有关该算法的向量化实现，以及说说有关该算法你可以做的其他事情。</p>
<p>举例子：</p>
<ol>
<li>当给出一件产品时，你能否找到与之相关的其它产品。</li>
<li>一位用户最近看上一件产品，有没有其它相关的产品，你可以推荐给他。</li>
</ol>
<p>我将要做的是：实现一种选择的方法，写出协同过滤算法的预测情况。</p>
<p>我们有关于五部电影的数据集，我将要做的是，将这些用户的电影评分，进行分组并存到一个矩阵中。</p>
<p>我们有五部电影，以及四位用户，那么 这个矩阵 $Y$ 就是一个5行4列的矩阵，它将这些电影的用户评分数据都存在矩阵里：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Movie</strong></th>
<th><strong>Alice (1)</strong></th>
<th><strong>Bob (2)</strong></th>
<th><strong>Carol (3)</strong></th>
<th><strong>Dave (4)</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Love at last</td>
<td>5</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>Romance forever</td>
<td>5</td>
<td>?</td>
<td>?</td>
<td>0</td>
</tr>
<tr>
<td>Cute puppies of love</td>
<td>?</td>
<td>4</td>
<td>0</td>
<td>?</td>
</tr>
<tr>
<td>Nonstop car chases</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>4</td>
</tr>
<tr>
<td>Swords vs. karate</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>?</td>
</tr>
</tbody>
</table>
</div>
<p>推出评分：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/117.png" width="75%"></p>
<p>通过最小距离找到相关影片：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/118.png" width="75%"></p>
<h2 id="推行工作上的细节：均值归一化"><a href="#推行工作上的细节：均值归一化" class="headerlink" title="推行工作上的细节：均值归一化"></a>推行工作上的细节：均值归一化</h2><p>让我们来看下面的用户评分数据：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/119.png" width="75%"></p>
<p>如果我们新增一个用户 <strong>Eve</strong>，并且 <strong>Eve</strong> 没有为任何电影评分，那么我们以什么为依据为<strong>Eve</strong>推荐电影呢？</p>
<p>我们首先需要对结果 $Y $矩阵进行均值归一化处理，将每一个用户对某一部电影的评分减去所有用户对该电影评分的平均值：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/120.png" width="75%"></p>
<p>然后我们利用这个新的 $Y$ 矩阵来训练算法。<br>如果我们要用新训练出的算法来预测评分，则需要将平均值重新加回去，预测<script type="math/tex">(\theta^{(j)})^T x^{(i)}+\mu_i</script>，对于<strong>Eve</strong>，我们的新模型会认为她给每部电影的评分都是该电影的平均分。</p>
<h1 id="大规模机器学习"><a href="#大规模机器学习" class="headerlink" title="大规模机器学习"></a>大规模机器学习</h1><h2 id="大型数据集的学习"><a href="#大型数据集的学习" class="headerlink" title="大型数据集的学习"></a>大型数据集的学习</h2><p>如果我们有一个低方差的模型，增加数据集的规模可以帮助你获得更好的结果。我们应该怎样应对一个有100万条记录的训练集？</p>
<p>以线性回归模型为例，每一次梯度下降迭代，我们都需要计算训练集的误差的平方和，如果我们的学习算法需要有20次迭代，这便已经是非常大的计算代价。</p>
<p>首先应该做的事是去检查一个这么大规模的训练集是否真的必要，也许我们只用1000个训练集也能获得较好的效果，我们可以绘制学习曲线来帮助判断。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/121.png" width="75%"></p>
<h2 id="随机梯度下降法-Stochastic-Gradient-Descent"><a href="#随机梯度下降法-Stochastic-Gradient-Descent" class="headerlink" title="随机梯度下降法(Stochastic Gradient Descent)"></a>随机梯度下降法(Stochastic Gradient Descent)</h2><p>如果我们一定需要一个大规模的训练集，我们可以尝试使用随机梯度下降法来代替批量梯度下降法。</p>
<p>在随机梯度下降法中，我们定义代价函数为一个单一训练实例的代价：</p>
<script type="math/tex; mode=display">
cost(\theta,(x^{(i)},y^{(i)}))=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2</script><p><img src="/2019/09/18/Re-recognizing-machine-learning/122.png" width="75%"></p>
<p>随机梯度下降算法在每一次计算之后便更新参数 $$ ，而不需要首先将所有的训练集求和，在梯度下降算法还没有完成一次迭代时，随机梯度下降算法便已经走出了很远。但是这样的算法存在的问题是，不是每一步都是朝着”正确”的方向迈出的。因此算法虽然会逐渐走向全局最小值的位置，但是可能无法站到那个最小值的那一点，而是在最小值点附近徘徊。</p>
<h2 id="小批量梯度下降-Mini-Batch-Gradient-Descent"><a href="#小批量梯度下降-Mini-Batch-Gradient-Descent" class="headerlink" title="小批量梯度下降(Mini-Batch Gradient Descent)"></a>小批量梯度下降(Mini-Batch Gradient Descent)</h2><p>小批量梯度下降算法是介于批量梯度下降算法和随机梯度下降算法之间的算法，每计算常数$b$次训练实例，便更新一次参数  $$ 。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/123.png" width="40%"></p>
<p>通常我们会令 $b$ 在 2-100 之间。这样做的好处在于，我们可以用向量化的方式来循环 $b$个训练实例，如果我们用的线性代数函数库比较好，能够支持平行处理，那么算法的总体表现将不受影响（与随机梯度下降相同）。</p>
<h2 id="随机梯度下降收敛"><a href="#随机梯度下降收敛" class="headerlink" title="随机梯度下降收敛"></a>随机梯度下降收敛</h2><h3 id="SGD调试"><a href="#SGD调试" class="headerlink" title="SGD调试"></a>SGD调试</h3><p>在批量梯度下降中，我们可以令代价函数$J$为迭代次数的函数，绘制图表，根据图表来判断梯度下降是否收敛。但是，在大规模的训练集的情况下，这是不现实的，因为计算代价太大了。</p>
<p>在随机梯度下降中，我们在每一次更新 $$ 之前都计算一次代价，然后每$x$次迭代后，求出这$x$次对训练实例计算代价的平均值，然后绘制这些平均值与$x$次迭代的次数之间的函数图表。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/124.png" width="75%"></p>
<p>当我们绘制这样的图表时，可能会得到一个颠簸不平但是不会明显减少的函数图像（如左下图中蓝线所示）。我们可以增加$α$来使得函数更加平缓，也许便能看出下降的趋势了（如左下图中红线所示）；或者可能函数图表仍然是颠簸不平且不下降的（如洋红色线所示），那么我们的模型本身可能存在一些错误。</p>
<h2 id="学习率调整"><a href="#学习率调整" class="headerlink" title="学习率调整"></a>学习率调整</h2><p>如果我们得到的曲线如上面右下方所示，不断地上升，那么我们可能会需要选择一个较小的学习率$α$。</p>
<p>我们也可以令学习率随着迭代次数的增加而减小，例如令：</p>
<script type="math/tex; mode=display">
\alpha = \frac{const1}{iterationNumber + const2}</script><p>随着我们不断地靠近全局最小值，通过减小学习率，我们迫使算法收敛而非在最小值附近徘徊。<br>但是通常我们不需要这样做便能有非常好的效果了，对$α$进行调整所耗费的计算通常不值得</p>
<p>总结下，这段视频中，我们介绍了一种方法，近似地监测出随机梯度下降算法在最优化代价函数中的表现，这种方法不需要定时地扫描整个训练集，来算出整个样本集的代价函数，而是只需要每次对最后1000个，或者多少个样本，求一下平均值。应用这种方法，你既可以保证随机梯度下降法正在正常运转和收敛，也可以用它来调整学习速率$α$的大小。</p>
<h2 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h2><p>在线学习的算法与随机梯度下降算法有些类似，我们对单一的实例进行学习，而非对一个提前定义的训练集进行循环。</p>
<script type="math/tex; mode=display">
\begin{align}
&Repeat\;forever\;(as\;long\;as\;the\;website\;is\;running) \{ \\
&\;\;\;\;\;\;\;Get\;(x,y)\;corresponding\;to\;the\;current\;user \\
&\;\;\;\;\;\;\;\theta:={\theta}_{j}-\alpha({h}_{\theta}({x})-{y}){x}_{j}\;(j=0:n) \\
&\}\\
\end{align}</script><p>一旦对一个数据的学习完成了，我们便可以丢弃该数据，不需要再存储它了。这种方式的好处在于，我们的算法可以很好的适应用户的倾向性，算法可以针对用户的当前行为不断地更新模型以适应该用户。在线学习的一个优点就是，如果你有一个变化的用户群，又或者你在尝试预测的事情，在缓慢变化，就像你的用户的品味在缓慢变化，这个在线学习算法，可以慢慢地调试你所学习到的假设，将其调节更新到最新的用户行为。</p>
<h2 id="减少映射与数据并行"><a href="#减少映射与数据并行" class="headerlink" title="减少映射与数据并行"></a>减少映射与数据并行</h2><p>映射化简和数据并行对于大规模机器学习问题而言是非常重要的概念。之前提到，如果我们用批量梯度下降算法来求解大规模数据集的最优解，我们需要对整个训练集进行循环，计算偏导数和代价，再求和，计算代价非常大。如果我们能够将我们的数据集分配给不多台计算机，让每一台计算机处理数据集的一个子集，然后我们将计所的结果汇总在求和。这样的方法叫做<strong>映射简化</strong>。</p>
<p>具体而言，如果任何学习算法能够表达为，对训练集的函数的求和，那么便能将这个任务分配给多台计算机（或者同一台计算机的不同<strong>CPU</strong> 核心），以达到加速处理的目的。</p>
<p>例如，我们有400个训练实例，我们可以将批量梯度下降的求和任务分配给4台计算机进行处理：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/125.jpg"></p>
<p>很多高级的线性代数函数库已经能够利用多核<strong>CPU</strong>的多个核心来并行地处理矩阵运算，这也是算法的向量化实现如此重要的缘故（比调用循环快）。</p>
<h1 id="应用实例：图片文字识别"><a href="#应用实例：图片文字识别" class="headerlink" title="应用实例：图片文字识别"></a>应用实例：图片文字识别</h1><h2 id="OCR-pipeline"><a href="#OCR-pipeline" class="headerlink" title="OCR pipeline"></a>OCR pipeline</h2><p>图像文字识别应用所作的事是，从一张给定的图片中识别文字。</p>
<p>为了完成这样的工作，需要采取如下步骤：</p>
<ol>
<li>文字侦测（<strong>Text detection</strong>）——将图片上的文字与其他环境对象分离开来</li>
<li>字符切分（<strong>Character segmentation</strong>）——将文字分割成一个个单一的字符</li>
<li>字符分类（<strong>Character classification</strong>）——确定每一个字符是什么</li>
</ol>
<p>可以用流水线来表示这个问题，每一项任务可以由一个单独的部门来负责解决：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/126.png"></p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口是一项用来从图像中抽取对象的技术。假使我们需要在一张图片中识别行人，首先要做的是用许多固定尺寸的图片来训练一个能够准确识别行人的模型。然后我们用之前训练识别行人的模型时所采用的图片尺寸在我们要进行行人识别的图片上进行剪裁，然后将剪裁得到的切片交给模型，让模型判断是否为行人，然后在图片上滑动剪裁区域重新进行剪裁，将新剪裁的切片也交给模型进行判断，如此循环直至将图片全部检测完。</p>
<p>一旦完成后，我们按比例放大剪裁的区域，再以新的尺寸对图片进行剪裁，将新剪裁的切片按比例缩小至模型所采纳的尺寸，交给模型进行判断，如此循环。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/127.jpg"></p>
<p>滑动窗口技术也被用于文字识别，首先训练模型能够区分字符与非字符，然后，运用滑动窗口技术识别字符，一旦完成了字符的识别，我们将识别得出的区域进行一些扩展，然后将重叠的区域进行合并。接着我们以宽高比作为过滤条件，过滤掉高度比宽度更大的区域（认为单词的长度通常比高度要大）。下图中绿色的区域是经过这些步骤后被认为是文字的区域，而红色的区域是被忽略的。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/128.jpg"></p>
<p>以上便是文字侦测阶段。下一步是训练一个模型来完成将文字分割成一个个字符的任务，需要的训练集由单个字符的图片和两个相连字符之间的图片来训练模型。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/129.jpg"></p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/130.jpg"></p>
<p>模型训练完后，我们仍然是使用滑动窗口技术来进行字符识别。</p>
<p>以上便是字符切分阶段。最后一个阶段是字符分类阶段，利用神经网络、支持向量机或者逻辑回归算法训练一个分类器即可。</p>
<h2 id="获取大量数据和人工数据"><a href="#获取大量数据和人工数据" class="headerlink" title="获取大量数据和人工数据"></a>获取大量数据和人工数据</h2><p>如果我们的模型是低方差的，那么获得更多的数据用于训练模型，是能够有更好的效果的。问题在于，我们怎样获得数据，数据不总是可以直接获得的，我们有可能需要人工地创造一些数据。</p>
<p>以我们的文字识别应用为例，我们可以字体网站下载各种字体，然后利用这些不同的字体配上各种不同的随机背景图片创造出一些用于训练的实例，这让我们能够获得一个无限大的训练集。这是从零开始创造实例。</p>
<p>另一种方法是，利用已有的数据，然后对其进行修改，例如将已有的字符图片进行一些扭曲、旋转、模糊处理。只要我们认为实际数据有可能和经过这样处理后的数据类似，我们便可以用这样的方法来创造大量的数据。</p>
<p>有关获得更多数据的几种方法：</p>
<ol>
<li>人工数据合成</li>
<li>手动收集、标记数据</li>
<li>众包</li>
</ol>
<h2 id="天花板分析：下一步的pipeline"><a href="#天花板分析：下一步的pipeline" class="headerlink" title="天花板分析：下一步的pipeline"></a>天花板分析：下一步的pipeline</h2><p>在机器学习的应用中，我们通常需要通过几个步骤才能进行最终的预测，我们如何能够知道哪一部分最值得我们花时间和精力去改善呢？这个问题可以通过上限分析来回答。</p>
<p>回到我们的文字识别应用中，我们的流程图如下：</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/126.png"></p>
<p>流程图中每一部分的输出都是下一部分的输入，上限分析中，我们选取一部分，手工提供100%正确的输出结果，然后看应用的整体效果提升了多少。假使我们的例子中总体效果为72%的正确率。</p>
<p>如果我们令文字侦测部分输出的结果100%正确，发现系统的总体效果从72%提高到了89%。这意味着我们很可能会希望投入时间精力来提高我们的文字侦测部分。</p>
<p>接着我们手动选择数据，让字符切分输出的结果100%正确，发现系统的总体效果只提升了1%，这意味着，我们的字符切分部分可能已经足够好了。</p>
<p>最后我们手工选择数据，让字符分类输出的结果100%正确，系统的总体效果又提升了10%，这意味着我们可能也会应该投入更多的时间和精力来提高应用的总体表现。</p>
<p><img src="/2019/09/18/Re-recognizing-machine-learning/131.jpg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>又又又看了一次机器学习的视频，最大的收获应该是对神经网络的本质有了更深的认识，另外感觉吴恩达对知识点的讲述方式和以往自己听到方式有很多不一样，仿佛打开了新世界…另外后面几章似乎有点水啊，感觉只是点到为止，没有涉及很深的内容，也可能是因为之前接触过才这么觉得吧…除了看视频做笔记之外，我还用python3基本复现了课程作业，指导书上用的是octave，一种很像matlab的语言，不过似乎有点老了，所以还是选择用比较流行的语言来写吧。容易实现的算法自己就从头开始写，当然没有做太多优化，然后自己写完了也要学会调用库来完成，因为库的实现有更多的优化速度更快以及更高的容错能力，如果是真实的项目一般会调用库函数来完成；当然也有很多比较难以实现的算法部分，比如复杂优化算法，那就只能先调包了。刚开始写的时候真的是很痛苦很难受，虽然之前有看一本叫《machine learning in action》的书，以及看了<a href="https://github.com/liuyubobobo">@liuyubobobo</a>在慕课上的视频《Python3入门机器学习经典算法与应用》复现算法，但是很多代码还是不怎么会写，有种编码无力的感觉，所以也参考了很多别人的代码。复现代码地址在<a href="https://github.com/543877815/machine-learning-ex">我的github</a> 上。</p>
<h1 id="实现难点"><a href="#实现难点" class="headerlink" title="实现难点"></a>实现难点</h1><ul>
<li>逻辑斯蒂回归需要用到scipy的牛顿截断法进行参数优化</li>
<li>神经网络本质上也是参数优化问题，若想调用参数优化包，实现的时候需要将所有参数整合到一个变量才能作为参数传递进入参数优化的函数中</li>
<li>调用opt.minimize的时候theta的传递会转化成为行向量，注意前面的算法设计</li>
<li>非线性决策边界的绘制用plt.coutour绘制等高线</li>
</ul>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS EKK架构实践——日志收集分析解决方案</title>
    <url>/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>这篇博文将基于AWS服务构建日志分析解决方案，对EKK架构进行实践，<a href="https://d0.awsstatic-china.com/Projects/P4113850/aws-projects_build-log-analytics-solution-on-aws.pdf">参考文档</a>。</p>
<p><a href="https://amazonaws-china.com/cn/elasticsearch-service/?nc1=h_ls">Amazon Elasticsearch Service</a></p>
<p>Amazon Elasticsearch Service 是一项完全托管的服务，方便您部署、保护和运行大量 Elasticsearch 操作，且不用停机。该服务提供开源 Elasticsearch API、受托管的 <a href="https://amazonaws-china.com/elasticsearch-service/the-elk-stack/kibana/">Kibana </a>以及与 <a href="https://amazonaws-china.com/elasticsearch-service/the-elk-stack/logstash/">Logstash </a>和其他 AWS 服务的集成，支持您安全获取任何来源的数据，并开展实时搜索、分析和可视化。使用 Amazon Elasticsearch Service 时，您只需按实际用量付费，没有预付成本或使用要求。有了 Amazon Elasticsearch Service，您无需承担运营开销，便可获得所需的 ELK 堆栈</p>
<p>一个来自<a href="https://github.com/oeddyo">Eddie Xie</a>关于Elasticsearch的系列教程：<a href="https://kalasearch.cn/blog/elasticsearch-tutorial/">https://kalasearch.cn/blog/elasticsearch-tutorial/</a></p>
<p><a href="https://amazonaws-china.com/cn/kinesis/">Amazon Kinesis</a> </p>
<p>Amazon Kinesis 可让您轻松收集、处理和分析实时流数据，以便您及时获得见解并对新信息快速做出响应。Amazon Kinesis 提供多种核心功能，可以经济高效地处理任意规模的流数据，同时具有很高的灵活性，让您可以选择最符合应用程序需求的工具。借助 Amazon Kinesis，您可以获取视频、音频、应用程序日志和网站点击流等实时数据，也可以获取用于机器学习、分析和其他应用程序的 IoT 遥测数据。借助 Amazon Kinesis，您可以即刻对收到的数据进行处理和分析并做出响应，无需等到收集完全部数据后才开始进行处理。</p>
<p><a href="https://amazonaws-china.com/cn/elasticsearch-service/kibana/">Kibana</a></p>
<p>Kibana 是一种开源数据可视化和挖掘工具，可以用于日志和时间序列分析、应用程序监控和运营智能使用案例。它提供了强大且易用的功能，例如直方图、线形图、饼图、热图和内置的地理空间支持。此外，它还提供了与 <a href="https://amazonaws-china.com/elasticsearch-service/what-is-elasticsearch/">Elasticsearch</a> 的紧密集成，后者是一款流行的分析和搜索引擎，这使得 Kibana 成为了可视化 Elasticsearch 中存储数据的默认之选。</p>
<span id="more"></span>
<p>文档的架构图：</p>
<p><img src="/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/1.png" alt="1"></p>
<p>步骤：</p>
<ul>
<li><p>创建一个EC2，使用免费的配置即可，有IAM role权限分配好role，没有也无所谓，AMI我选的是ubuntu 18.04。</p>
</li>
<li><p>创建第一个Amazon Kinesis Firehose Delivery Stream</p>
<ul>
<li>名字为web-log-ingestion-stream</li>
<li>destination为s3，桶名也可以为web-log-ingestion-stream</li>
<li>prefix（可选）</li>
<li>IAM role，选择Create/Update Existing IAM Role<ul>
<li>跳出一个新面板</li>
<li>IAM role name为 firehost_delivery_role</li>
</ul>
</li>
</ul>
</li>
<li><p>在EC2上安装Amazon Kinesis Agent</p>
<ul>
<li>具体文档为<a href="https://docs.aws.amazon.com/zh_cn/firehose/latest/dev/writing-with-agents.html#download-install">https://docs.aws.amazon.com/zh_cn/firehose/latest/dev/writing-with-agents.html#download-install</a></li>
<li>使用github进行安装<code>git cloen https://github.com/awslabs/amazon-kinesis-agent.git</code></li>
<li><code>cd amazon-kinesis-agent</code></li>
<li><code>sudo ./setup --install</code></li>
</ul>
</li>
<li><p>对于java版本问题解决见<a href="https://blog.csdn.net/yunna520/article/details/83346394">这篇博客</a></p>
</li>
<li><p>日志准备</p>
<ul>
<li>使用github上的<a href="https://github.com/kiritbasu/Fake-Apache-Log-Generator">脚本</a></li>
<li>经过多次测试，为了保证实验进行必须使用无限日志生成的命令，即<code>python apache-fake-log-gen.py -n 0 -o LOG</code></li>
</ul>
</li>
<li><p>配置Amazon Kinesis Agent</p>
<ul>
<li>打开配置文件<code>vi /etc/aws-kinesis/agent.json</code></li>
<li>模板如下，其中full-path-to-log-file修改为日志文件所在目录，name-of-delivery-stream修改为上述firehost名字</li>
<li>如果EC2没有配置IAM role，需要加入awsAccessKeyId和awsSecretAccessKey</li>
<li>注意修改部署的区域</li>
<li>如果不是apache logs需要把预处理部分dataProcessingOptions删除</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;cloudwatch.endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;monitoring.us-east-1.amazonaws.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;cloudwatch.emitMetrics&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;awsAccessKeyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;awsSecretAccessKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;firehose.endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;firehose.us-east-1.amazonaws.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;flows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;filePattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;full-path-to-log-file&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;deliveryStream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name-of-delivery-stream&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;dataProcessingOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;initialPostion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;START_OF_FILE&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;maxBufferAgeMillis&quot;</span><span class="punctuation">:</span><span class="string">&quot;2000&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;optionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LOGTOJSON&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;logFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COMBINEDAPACHELOG&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>启动服务aws-kinesis-agent</p>
<ul>
<li>启动命令<code>sudo service aws-kinesis-agent start</code></li>
<li>状态查看<code>sudo service aws-kinesis-agent status</code></li>
<li>系统启动时自动启动代理<code>sudo chkconfig aws-kinesis-agent on</code></li>
<li>日志查看<code>cat /var/log/aws-kinesis-agent/aws-kinesis-agent.log</code></li>
<li>此时应该可以在桶web-log-ingestion-stream中看到日志文件，或者在firehose的web-log-ingestion-stream流中监听到变化，如果有数据进入stream但是桶没有日志文件就是firehose的s3权限问题。</li>
</ul>
</li>
<li><p>创建Amazon Elasticsearch Service Domain</p>
<ul>
<li>名字为web-log-summary</li>
<li>版本使用6.8，7.1会无效</li>
<li>使用测试或开发，不需要多个可用区</li>
<li>EC2选择低配如m3.medium.elasticsearch即可</li>
<li>对于network可以选择public，因为VPC比较麻烦</li>
<li>但是对于access policy最好不要选择allow open access to the domain，可以选择allow or deny access to one or more AWS accounts or IAM users，然后填上自己的账号，为了可视化访问，填上Allow access to the domain from specific IP(s)，填上自己的ip（可以从<a href="https://www.ipaddress.com/ip-lookup">https://ipaddress.com/ip-lookup</a>)查到。</li>
</ul>
</li>
<li><p>创建第二个Amazon Kinesis Firehose Delivery Stream</p>
<ul>
<li>名字为web-log-aggregated-data</li>
<li>destination为Amazon Elasticsearch Service，选择上述创建的domain即web-log-summary</li>
<li>index为request_data，type为requests</li>
<li>对于s3可以创建一个新桶，桶名也可以为web-log-aggregated-data</li>
<li>对于IAM role选择Create/Update Existing IAM Role，然后选择firehost_delivery_role并创建新policy</li>
</ul>
</li>
<li><p>创建 Amazon Kinesis Analytics Application</p>
<ul>
<li><p>名字为web-log-aggregation-tutorial</p>
</li>
<li><p>创建后选择Connect to a source，选择已有firehose delivery stream为weblog-ingestion-stream</p>
</li>
<li>可以看到类似的表</li>
</ul>
</li>
</ul>
<p><img src="/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/2.png" alt="2"></p>
<ul>
<li>创建SQL分析数据<ul>
<li>点击 Go to SQL editor，选择Yes, start application</li>
<li>等待一段时间后，一些样本数据会展现出来</li>
<li>在SQL编辑器中输入并点击Save and run SQL</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE STREAM &quot;DESTINATION_SQL_STREAM&quot; (</span><br><span class="line"> datetime <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"> status <span class="type">INTEGER</span>,</span><br><span class="line"> statusCount <span class="type">INTEGER</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE PUMP &quot;STREAM_PUMP&quot; <span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;DESTINATION_SQL_STREAM&quot;</span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line"> STREAM TIMESTAMP_TO_CHAR(<span class="string">&#x27;yyyy-MM-dd&#x27;&#x27;T&#x27;&#x27;HH:mm:ss.SSS&#x27;</span>,</span><br><span class="line"><span class="built_in">LOCALTIMESTAMP</span>) <span class="keyword">as</span> datetime,</span><br><span class="line"> &quot;response&quot; <span class="keyword">as</span> status,</span><br><span class="line"> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> statusCount</span><br><span class="line"> <span class="keyword">FROM</span> &quot;SOURCE_SQL_STREAM_001&quot;</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> &quot;response&quot;,</span><br><span class="line"> <span class="built_in">FLOOR</span>((&quot;SOURCE_SQL_STREAM_001&quot;.ROWTIME <span class="operator">-</span> <span class="type">TIMESTAMP</span> <span class="string">&#x27;1970-01-</span></span><br><span class="line"><span class="string">01 00:00:00&#x27;</span>) <span class="keyword">minute</span> <span class="operator">/</span> <span class="number">1</span> <span class="keyword">TO</span> <span class="keyword">MINUTE</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/3.png" alt="3"></p>
<p>最后在Destination分页在 Select a stream中，选择web-log-aggregated-data，保存继续</p>
<ul>
<li>数据可视化<ul>
<li>在Amazon Elasticsearch Service Domain面板中选择web-log-summary，通过点击Kibana可以进入到该页面，如果不允许匿名访问就修改配置允许自己的IP以访问。</li>
<li>在Kibana面板的Managemant中找到Index Patterns，输入request_data，选择field为DATETIME，完成创建。</li>
<li>在Visualize中选择line chart，选择request_data，配置如下</li>
</ul>
</li>
</ul>
<p><img src="/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/4.png" alt="4"></p>
<p>点击run的button即可看到效果图</p>
<p><img src="/2019/08/28/AWS-EKK%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/5.png" alt="5"></p>
<p>当然也可以进行其他可视化。</p>
<p>实现完….</p>
]]></content>
      <categories>
        <category>Aws</category>
      </categories>
      <tags>
        <tag>Amazon Elasticsearch Service</tag>
        <tag>Amazon Kinesis Agent</tag>
        <tag>Amazon Kinesis Firehose</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习日志</title>
    <url>/2019/07/21/docker%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>​    </p>
<span id="more"></span>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>registry-mirrors</strong></p>
<p>windows在setting的Daemon修改为<a href="https://72idtxd8.mirror.aliyuncs.com">https://72idtxd8.mirror.aliyuncs.com</a></p>
<p><strong>查看运行状态及版本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p><strong>修改镜像默认位置</strong></p>
<p><img src="/2019/07/21/docker%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/3.png" alt="3"></p>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p><strong>下载镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [image-name]</span><br></pre></td></tr></table></figure>
<p><strong>查看系统镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><strong>检查镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [image-name]</span><br></pre></td></tr></table></figure>
<p><strong>创建镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure>
<p>e.g:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;YOUR_USERNAME&gt;/myfirstapp .</span><br></pre></td></tr></table></figure>
<p>When you run the <code>docker build</code> command given below, make sure to replace <code>&lt;YOUR_USERNAME&gt;</code> with your username. This username should be the same one you created when registering on <a href="https://cloud.docker.com/">Docker Cloud</a>.</p>
<p>The location of the directory containing the <code>Dockerfile</code> - the <code>.</code> indicates the current directory:</p>
<ul>
<li>—tag, -t:** 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>
</ul>
<p><strong>上传镜像</strong></p>
<p>先登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
<p>再上传</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push YOUR_USERNAME/myfirstapp</span><br></pre></td></tr></table></figure>
<p><strong>删除镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi [IMAGE-ID]</span><br></pre></td></tr></table></figure>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p><strong>运行一个容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [image-name] </span><br></pre></td></tr></table></figure>
<p><strong>运行一个含shell终端的容器，用cmd（git不行）</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</p>
</li>
<li><p><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
</li>
<li><p><strong>-P:</strong> 随机端口映射，容器内部端口随机映射到主机的高端口</p>
</li>
<li><p><strong>-p:</strong> 指定端口映射，格式为：主机(宿主)端口:容器端口</p>
</li>
<li><p><strong>-e username=”ritchie”:</strong> 设置环境变量；</p>
</li>
<li><p><strong>—name=”nginx-lb”:</strong> 为容器指定一个名称；</p>
</li>
</ul>
<p><strong>后台运行容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d [image-name]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-d</strong>：后台运行容器，并返回容器ID；</li>
</ul>
<p>输入exit以退出</p>
<p><strong>查看容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [-a]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-a</strong>：可以让你看到曾经运行的容器</li>
</ul>
<p><strong>启动容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<p><strong>检查容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<p><strong>重启容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<p><strong>停止容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<ul>
<li>CONTAINER ID使用docker ps可以查看</li>
</ul>
<p><strong>打印容器内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs --<span class="built_in">tail</span> [latest-row-number] [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<p><strong>进入到正在运行容器中</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [CONTAINER ID] /bin/bash</span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [CONTAINER ID]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-f :</strong>通过SIGKILL信号强制删除一个运行中的容器</li>
<li><strong>-l :</strong>移除容器间的网络连接，而非容器本身</li>
<li><strong>-v :</strong>-v 删除与容器关联的卷</li>
</ul>
<p><strong>文件拷贝</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-L :</strong>保持源目标中的链接</li>
</ul>
<p>e.g: 将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure>
<p><strong>从容器创建一个新的镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-a :</strong>提交的镜像作者；</li>
<li><strong>-c :</strong>使用Dockerfile指令来创建镜像；</li>
<li><strong>-m :</strong>提交时的说明文字；</li>
<li><strong>-p :</strong>在commit时，将容器暂停。</li>
</ul>
<p><strong>上传到远程仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [IMAGE NAME]</span><br></pre></td></tr></table></figure>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><ul>
<li><code>FROM</code> starts the Dockerfile. It is a requirement that the Dockerfile must start with the <code>FROM</code> command. Images are created in layers, which means you can use another image as the base image for your own. The <code>FROM</code> command defines your base layer. As arguments, it takes the name of the image. Optionally, you can add the Docker Cloud username of the maintainer and image version, in the format <code>username/imagename:version</code>.</li>
<li><code>RUN</code> is used to build up the Image you’re creating. For each <code>RUN</code> command, Docker will run the command then create a new layer of the image. This way you can roll back your image to previous states easily. The syntax for a <code>RUN</code>instruction is to place the full text of the shell command after the <code>RUN</code> (e.g., <code>RUN mkdir /user/local/foo</code>). This will automatically run in a <code>/bin/sh</code> shell. You can define a different shell like this: <code>RUN /bin/bash -c &#39;mkdir /user/local/foo&#39;</code></li>
<li><code>COPY</code> copies local files into the container.</li>
<li><code>CMD</code> defines the commands that will run on the Image at start-up. Unlike a <code>RUN</code>, this does not create a new layer for the Image, but simply runs the command. There can only be one <code>CMD</code> per a Dockerfile/Image. If you need to run multiple commands, the best way to do that is to have the <code>CMD</code> run a script. <code>CMD</code> requires that you tell it where to run the command, unlike <code>RUN</code>. So example <code>CMD</code> commands would be:</li>
<li><code>EXPOSE</code> creates a hint for users of an image which ports provide services. It is included in the information which can be retrieved via <code>$ docker inspect &lt;container-id&gt;</code>.</li>
<li><code>PUSH</code> pushes your image to Docker Cloud, or alternately to a <a href="https://docs.docker.com/registry/">private registry</a></li>
</ul>
<p>e.g，see <a href="https://github.com/docker/labs/blob/master/beginner/chapters/webapps.md">details</a>，or you want <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">more infomation</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># our base image</span></span><br><span class="line">FROM alpine:<span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install python and pip</span></span><br><span class="line">RUN apk add --update py2-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Python modules needed by the Python app</span></span><br><span class="line">COPY requirements.txt <span class="regexp">/usr/</span>src<span class="regexp">/app/</span></span><br><span class="line">RUN pip install --no-cache-dir -r <span class="regexp">/usr/</span>src<span class="regexp">/app/</span>requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy files required for the app to run</span></span><br><span class="line">COPY app.py <span class="regexp">/usr/</span>src<span class="regexp">/app/</span></span><br><span class="line">COPY templates<span class="regexp">/index.html /u</span>sr<span class="regexp">/src/</span>app<span class="regexp">/templates/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tell the port number the container should expose</span></span><br><span class="line">EXPOSE <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run the application</span></span><br><span class="line">CMD [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/usr/src/app/app.py&quot;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h3><p><strong>创建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure>
<p><strong>部署</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack deploy --compose-file [.yml] [name]</span><br></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack services [name]</span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack <span class="built_in">rm</span> [name]</span><br></pre></td></tr></table></figure>
<h3 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker-machine"></a><strong>docker-machine</strong></h3><p>这些操作都要用cmd或者powershell才行，windows还是不要折腾了</p>
<p><strong>windows下前置配置Microsoft Hyper-V</strong></p>
<p>配置细节看<a href="https://docs.docker.com/machine/drivers/hyper-v/#example">官网</a>吧，很麻烦</p>
<p><strong>创建machine</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch &lt;NameOfVirtualSwitch&gt; &lt;nameOfNode&gt;</span><br></pre></td></tr></table></figure>
<p>e.g:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt;  docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">&quot;Primary Virtual Switch&quot;</span> default</span><br></pre></td></tr></table></figure>
<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine start [machine-name]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine <span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine <span class="built_in">rm</span> [machine-name]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>从python开始的虚拟环境配置日志</title>
    <url>/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>文章概述</p>
<p>本来这篇文章写得是爬虫学习日志，但是后来发现前置工作也是虚拟环境的配置还是有待一提。日前在做cv的时候使用SIFT对图像的特征进行提取，当时没有手写SIFT函数，而是调用了opencv的一个函数，其中存在的一个问题是后来SIFT算法申请了专利，后续版本的opencv不再支持这个函数，于是当时搜索了很久找到支持该函数的旧版本，期间python版本还从3.7降到了3.68以支持这个函数的调用，而命令行输入python —version的时候仍然显示版本是3.7，这就显得库和包的版本控制比较混乱，然而当时我并没有意识到这个问题。后来电脑重装了一次，也是最近在学习爬虫的时候以及后来学习深度学习的时候我才开始重视python的包管理问题，目前看到的几种虚拟环境配置方式有：</p>
<ul>
<li>virtualenv</li>
<li>conda env</li>
<li>docker</li>
</ul>
<p>目前我已经尝试了virtualenv和conda env，docker还没有尝试过。感觉virtualenv和conda env两种使用上差不多，但是我选择了conda env，个人不使用virtualenv的原因在于：</p>
<ol>
<li>virtualenv似乎不支持jupyter notebook的集成</li>
<li>conda env似乎比virtualenv多了一个生成配置文件并能根据配置文件创建相同环境的功能，这使得环境的在不同设备上的share更加地方便</li>
</ol>
<p>但是最近在薅某<strong>IaaS</strong>提供商羊毛的时候，发现虽然有yml文件，但是将conda env从本地同步到远程仍然很麻烦，创建新的环境之后还要将该环境“注入”到jupyter notebook中，如果你没有某种快速部署的脚本的，这也是一个繁琐的步骤。</p>
<p><del>因此决定学习一下docker进一步对虚拟环境进行配置（还没学完）。</del></p>
<p>我学了一下docker，然后先用jupyter/tensorflow-notebook跑了一下，发现这种方式搭环境还是比较快的。然后我尝试了一下自己做一个docker jupyter notebook镜像用来做深度学习（因为我发现在自己的机器上写代码真的是心累，不禁拖慢的编码速度而且跑起来也很慢），我的思路是先pull一个ubuntu的镜像作为basic image，然后按照上面conda env的步骤创建虚拟环境，将kernel注入到jupyter notebook中，然后commit重新打包成新的镜像然后push到docker hub中。这样就可以在后续中pull下来试用啦。</p>
<p>emmmm，但是我感觉我实现的并不是很好，原因如下：</p>
<ol>
<li>我理解这个images本质是一个ubuntu系统，run之后还需要进到里面启动jupyter notebook，过程感觉略有繁琐。</li>
<li>而对比jupyter/tensorflow-notebook其只需要run命令就可以，而不需要进到里面启动，但目前为止我没有搞懂这是怎么实现了。</li>
<li>做这个image的初衷是为了在远程服务器上使用自己习惯的环境，以及做开发环境的区分。但目前看来前者的目的貌似达到了，但是后者似乎可以通过run多个container来实现？？比如我一个image包含ts+opencv和ts+panda(虽然没冲突但我举不出来例子)，然后我可以通过run两个container（分别是ts+opencv的container和ts+panda的container）来实现开发环境区分的目的，这看来貌似我的做法有点多余？毕竟如果要配置新的环境又要进到容器进行配置，完了commit and push。</li>
</ol>
<span id="more"></span>
<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<p><strong>修改默认虚拟环境存放位置</strong></p>
<p><img src="/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/2.png" alt="2"></p>
<p><strong>查看虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure>
<p><strong>创建虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv [env-name]</span><br></pre></td></tr></table></figure>
<p><strong>进入虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon [env-name]</span><br></pre></td></tr></table></figure>
<p><strong>退出虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactive</span><br></pre></td></tr></table></figure>
<h2 id="conda-env"><a href="#conda-env" class="headerlink" title="conda env"></a>conda env</h2><p><strong>查看虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure>
<p><strong>创建虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n [env-name] python=[version]</span><br></pre></td></tr></table></figure>
<p><strong>进入虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate [env-name]</span><br><span class="line"><span class="built_in">source</span> activate [env-name]</span><br></pre></td></tr></table></figure>
<p><strong>退出虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<p><strong>复制虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n [new-env-name] --<span class="built_in">clone</span> [old-env-name]</span><br></pre></td></tr></table></figure>
<p><strong>删除虚拟环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n [env-name] --all</span><br></pre></td></tr></table></figure>
<p><strong>生成环境yml文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; [<span class="built_in">env</span>].yml</span><br></pre></td></tr></table></figure>
<p><strong>使用yml文件创建环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f [<span class="built_in">env</span>].yml</span><br></pre></td></tr></table></figure>
<p><strong>yml文件内容</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">scrapy-env-clone</span></span><br><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates=2019.5.15=0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">certifi=2019.6.16=py37_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl=1.1.1c=he774522_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip=19.1.1=py37_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.7.3=h8c8aaf0_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">setuptools=41.0.1=py37_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sqlite=3.28.0=he774522_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vc=14.1=h0510ff6_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vs2015_runtime=14.15.26706=h3a45250_4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wheel=0.33.4=py37_0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wincertstore=0.2=py37_0</span></span><br><span class="line"><span class="attr">prefix:</span> <span class="string">D:\anaconda3\envs\scrapy-env</span></span><br></pre></td></tr></table></figure>
<p><strong>将conda env注入到jupyter notebook</strong></p>
<p>package install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install ipykernel</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate [<span class="built_in">env</span>]</span><br></pre></td></tr></table></figure>
<p>安装ipykerneld</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">env</span>] pip install ipykernel</span><br></pre></td></tr></table></figure>
<p>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m ipykernel install --user --name [env-name] --display-name <span class="string">&quot;[jupyter-display-name]&quot;</span></span><br></pre></td></tr></table></figure>
<p>e.g</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m ipykernel install --user --name deep_learning --display-name <span class="string">&quot;Python [conda env:deep_learning]&quot;</span></span><br></pre></td></tr></table></figure>
<p>启动jupyter notebook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>
<p>为jupyter notebook 安装 “conda” 选项卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install nb_conda </span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/8.png" alt="8"></p>
<p><strong>显示注入的环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure>
<p><strong>删除注入的环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter kernelspec remove [env-name]</span><br></pre></td></tr></table></figure>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>先安装docker，linux下安装docker见<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">官网</a></p>
<p>docker基本操作见我的<a href="https://543877815.github.io/2019/07/21/docker%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/#more">学习日志</a></p>
<h3 id="快速搭建深度学习环境"><a href="#快速搭建深度学习环境" class="headerlink" title="快速搭建深度学习环境"></a>快速搭建深度学习环境</h3><p>如tensorflow，可以直接使用别人写好的镜像，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8888:8888 jupyter/tensorflow-notebook</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8888:8888 tensorflow/tensorflow</span><br></pre></td></tr></table></figure>
<p>通过将docker容器的8888端口映射到外部机器的8888端口，都是集成Anaconda和jupyter进行快速开发。注意远程服务器需要打开安全组8888端口，输入<a href="http://ip:8888即可，首次登陆需要输入token凭证">http://ip:8888即可，首次登陆需要输入token凭证</a></p>
<p><img src="/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/4.png" alt="4"></p>
<p>该验证的位置在命令行中，但是这种方式非常的不稳定，如果网络从服务器中断开，那么容器的运行也会关闭，并且数据也会丢失。</p>
<p>所以更加安全稳定的方式是使用docker daemon守护进程来运行容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8888 --name notebook jupyter/tensorflow-notebook</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/6.png" alt="6"></p>
<p>输入这行命令之后命令行中仅仅输出了一个容器ID，那么要怎么才能够获取jupyter的token进行登录呢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs --<span class="built_in">tail</span> 3 notebook</span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/06/%E4%BB%8Epython%E5%BC%80%E5%A7%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/7.png" alt="7"></p>
<p>防止下次登录服务器忘记了token，可以在jupyter notebook中reset你的密码。</p>
<p>上传你的代码可以从浏览器端上传，也可以使用jupyter notebook暴露出去的Terminal进行git clone</p>
<p>也可以使用下述命令进入到容器中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it notebook /bin/bash</span><br></pre></td></tr></table></figure>
<p>并使用<code>exit</code>以退出</p>
<h3 id="定制化自己的python容器环境"><a href="#定制化自己的python容器环境" class="headerlink" title="定制化自己的python容器环境"></a>定制化自己的python容器环境</h3><p>以anaconda集成jupyter notebook开发为例</p>
<p>下载一个basic images</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>
<p>运行并进入到容器中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name myEnv -it -d ubuntu /bin/bash</span><br><span class="line">docker <span class="built_in">exec</span> -it myEnv /bin/bash</span><br></pre></td></tr></table></figure>
<p>更新库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<p>安装wget</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wget</span><br></pre></td></tr></table></figure>
<p>按照之前写的<a href="https://543877815.github.io/2019/04/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E6%88%90anaconda%E5%AE%89%E8%A3%85jupyter-notebook/#more">文章</a>步骤安装anaconda及配置好jupyter，运行jupyter notebook，由于之前没有添加容器端口映射，所以容器内运行的jupyter notebook无法暴露出来，这时候可以先停止容器，并将其打包成镜像，然后在运行新的镜像时指定新的端口映射，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先停止容器</span></span><br><span class="line">docker stop [CONTAINER ID]</span><br><span class="line"><span class="comment">#将容器commit成为一个镜像，时间略久</span></span><br><span class="line">docker commit [CONTAINER ID]  my-env</span><br><span class="line"><span class="comment">#运行容器</span></span><br><span class="line">docker run -d -p 8888:8888 --name my-notebook my-env</span><br></pre></td></tr></table></figure>
<p>进入容器，然后运行jupyter，此时发现<code>jupyter: command not found</code>，所以发现bash并没有更新进来，之前的操作并不是永久添加环境变量，只是临时，虽然容器并没有重启，但是重新<code>exec</code>也会丢失原本环境变量的配置，所以通过修改.bashrc文件来添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/root/anaconda3/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>然后本文按照上面写的<a href="./#conda-env">conda env</a>配置创建环境以及将环境注入到jupyter notebook中</p>
<p>完成之后<code>exit</code>退出</p>
<p>将该容器停止并重新打包生成一个新的镜像</p>
<p>登录docker账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br><span class="line"><span class="comment"># docker ID</span></span><br><span class="line"><span class="comment"># docker password</span></span><br></pre></td></tr></table></figure>
<p>上传到远程docker hub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [IMAGE NAME]</span><br></pre></td></tr></table></figure>
<p>我的docker image地址是<a href="https://cloud.docker.com/repository/docker/543877815/jupyter">https://cloud.docker.com/repository/docker/543877815/jupyter</a></p>
<p>使用方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载容器</span></span><br><span class="line">docker run -p 8888:8888 -d -it 543877815/jupyter</span><br><span class="line">[CONTAINER ID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [CONTAINER ID] /bin/bash</span><br><span class="line">jupyter notebook --ip 0.0.0.0 --allow-root &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写jupyter配置</span></span><br><span class="line">jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
        <tag>virtualenv</tag>
        <tag>conda environment</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu和windows下运行MPI做埃拉托色尼素数筛选法</title>
    <url>/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/</url>
    <content><![CDATA[<p>说说最近踩的坑，为了在windows的电脑下做并行程序设计作业埃拉托色尼素数筛选法，用的是MPI，然后发现这类库对于windows的用户非常不友好，比如说MPICH2后续已经不支持windows，OpenMPI貌似只支持linux，而微软维护的MS-MPI能够支持windows，但是我在使用clion(cmake)进行包引入的时候出了很多问题，可能的原因是windows下没有mpicc/mpicxx，可能的解决方案是使用微软自家的VS去做，但是我觉得VS太过臃肿而不想下载，最终我得出来的结论是：windows + clion + MPI 暂时无法实现，即使翻阅了很多网上的资料也没有响应的解决方案，无奈之下只能在远程的linux下编程，使用的是ubuntu 16.04这个系统，然后思路是因为要编程所以配置一个ubuntu GUI，然后装上lion，把之前写的代码从git下clone下来，然后由于我的服务器是在华为云上的一个7天体验卷，也就只有2核4G，所以我打算后续在工作室一台比较老的服务器上写代码，然后比较坑的是那个玩意儿没有公网IP，因此我想看看能否通过teamviewer来从远程连接，虽然感觉可能性不大hhh。</p>
<p>2019-05-19续——</p>
<p>后来我测试了一下teamviewer连接服务器，但是这个被归为了商业用途就是要收费的（就很烦），算了算了…只能老老实实用windows的远程连接8。后续在linux服务器上写完了几个优化之后（见后）,在测试阶段发现优化后的时间反而边长了，虽然后来用了增加cache命中率来提升性能，但是我认为加速还是受到了干扰，于是只能去专业的实验室用里面的电脑搞事情，所以我又把windows上mpi的配置搞了一边，还生成了一下不同优化的exe，然后再拿回自己的电脑测试，现在想一想，之前无法在自己的电脑的windows上用clion编译可能是和cmake建立动态链接失败有关，但是自己对这方面不熟，网上资料不全，所以搞着搞着就放弃了。但是安装了mpi还是能够执行编译生成的exe文件滴。</p>
<span id="more"></span>
<h1 id="Linux环境配置"><a href="#Linux环境配置" class="headerlink" title="Linux环境配置"></a>Linux环境配置</h1><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我借鉴了<a href="https://blog.csdn.net/lengconglin/article/details/77894636">这篇博客</a>上的流程</p>
<p>更新软件列表和软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>安装xrdp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xrdp </span><br></pre></td></tr></table></figure>
<p>安装vn4server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vnc4server </span><br></pre></td></tr></table></figure>
<p>安装xubuntu-desktop，这个有点久</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xubuntu-desktop </span><br></pre></td></tr></table></figure>
<p>向xsession中写入xfce4-session</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> “xfce4-session” &gt;~/.xsession</span><br></pre></td></tr></table></figure>
<p>开启xrdp服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service xrdp restart</span><br></pre></td></tr></table></figure>
<h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><p>使用windows下的远程桌面连接，输入IP，用户名</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/1.png" alt="1"></p>
<p>输入密码</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/2.png" alt="2"></p>
<p>使用默认设置</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/3.png" alt="3"></p>
<h2 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.jetbrains.com/clion/download/download-thanks.html?platform=linux">下载网站</a>找到direct link，将里面的url复制过来下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.jetbrains.com/cpp/CLion-2019.1.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf CLion-2019.1.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>安装(图形界面下)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> clion-2019.1.2/bin/</span><br><span class="line">./clion.sh</span><br></pre></td></tr></table></figure>
<p>安装完成后进行相关配置即可</p>
<p>缺少c/c++编译器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install gcc g++</span><br></pre></td></tr></table></figure>
<h2 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.teamviewer.com/cn/download/linux/">下载网站</a>找到TeamViewer Host的ubuntu 64x地址复制过来下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.teamviewer.com/download/linux/teamviewer-host_amd64.deb</span><br></pre></td></tr></table></figure>
<p>安装deb软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i teamviewer-host_amd64.deb</span><br></pre></td></tr></table></figure>
<p>修复安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get -f install</span><br></pre></td></tr></table></figure>
<p>直接执行teamviewer应该是会报错的，报的是Aborted (core dumped)，正确的做法应该是</p>
<p>查看配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">teamviewer info</span><br></pre></td></tr></table></figure>
<p>其将打印出TeamViewer ID</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/4.png" alt="4"></p>
<p>通过下属命令设置登录密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">teamviewer --passwd NEWPASSWORD</span><br></pre></td></tr></table></figure>
<p>打印 ok，在其他电脑上下载TeamViewer客户端，即可进行远程控制，若不行可以进行服务器重启再试试。</p>
<p>然鹅，这样貌似会触碰到TeamViewer的商业用途，奥</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/5.png" alt="5"></p>
<h2 id="MPICH"><a href="#MPICH" class="headerlink" title="MPICH"></a>MPICH</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mpich</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt下配置</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.13)</span><br><span class="line">project(MPI)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 17)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find_package(MPI REQUIRED)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;MPI_INCLUDE_PATH&#125;)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_COMPILER mpicxx)</span><br><span class="line">set(CMAKE_C_COMPILER mpicc)</span><br><span class="line"></span><br><span class="line">add_executable(MPI main.cpp)</span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>来自<a href="http://www.pianshen.com/article/9286287401/">这个博客</a></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpi_hello.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstdio&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstring&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpi.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_STRING = <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> greeting[MAX_STRING];</span><br><span class="line">    <span class="type">int</span> comm_sz;</span><br><span class="line">    <span class="type">int</span> my_rank;</span><br><span class="line"> </span><br><span class="line">    MPI_Init(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    MPI_Comm_size(MPI_COMM_WORLD, &amp;comm_sz);</span><br><span class="line">    MPI_Comm_rank(MPI_COMM_WORLD, &amp;my_rank);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (my_rank != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(greeting, <span class="string">&quot;Greeting from process %d of %d!&quot;</span>, my_rank, comm_sz);</span><br><span class="line">        MPI_Send(greeting, <span class="built_in">strlen</span>(greeting) + <span class="number">1</span>, MPI_CHAR, <span class="number">0</span>, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Greetings from process %d of %d!\n&quot;</span>, my_rank, comm_sz);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> q = <span class="number">1</span>; q &lt; comm_sz; ++q) &#123;</span><br><span class="line">            MPI_Recv(greeting, MAX_STRING, MPI_CHAR, q, <span class="number">0</span>, MPI_COMM_WORLD, MPI_STATUS_IGNORE);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, greeting);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MPI_Finalize();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/mpirun -np 4 ./m</span>pi_spmv</span><br><span class="line">Greetings from process <span class="number">0</span> of <span class="number">4</span>!</span><br><span class="line">Greeting from process <span class="number">1</span> of <span class="number">4</span>!</span><br><span class="line">Greeting from process <span class="number">2</span> of <span class="number">4</span>!</span><br><span class="line">Greeting from process <span class="number">3</span> of <span class="number">4</span>!</span><br><span class="line"> </span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="windows环境配置"><a href="#windows环境配置" class="headerlink" title="windows环境配置"></a>windows环境配置</h1><p>windows下运行mpi首推微软的msmpi，因为其配置较mpich更加简单，下载地址为<a href="https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi">https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi</a></p>
<p>将两个安装包msmpisdk.msi和msmpisetup.exe分别下载然后安装完成后即可。</p>
<p>为啥不按照实验指导书使用mpich，因为用起来太麻烦了！！还要windows的用户和密码，如果没有密码还不行，完了没密码的用户还要创建一个新的用户，而我是在实验室的电脑做的实验，它还不允许我创建新用户，让我心里直呼辣鸡windows，幸好还有MS维护的msmpi，实验才得以进行下去。</p>
<p>关于msmpi的引入我参考了<a href="https://blog.csdn.net/u011514451/article/details/50675222">这篇文章</a>，前面说了，仅限于VS，毕竟都是自家的玩意儿引入起来更加方便。</p>
<h2 id="MSMPI配置步骤"><a href="#MSMPI配置步骤" class="headerlink" title="MSMPI配置步骤"></a>MSMPI配置步骤</h2><ol>
<li>在VS中新建C++win32空项目，将项目编译改为x64（vs总是将这个默认为win32，就很烦)</li>
</ol>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/6.png" alt="6"></p>
<ol>
<li>去安装的SDK目录，找到include与lib文件夹右键<font color="#c7254e">项目 — 属性 — vc++ 目录</font>中<font color="#c7254e">包含目录</font>添加 include 文件夹路径，<font color="#c7254e">库目录</font>中添加 lib 文件夹路径。</li>
</ol>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/7.png" alt="7"></p>
<ol>
<li><font color="#c7254e">属性 — 链接器 — 输入 — 附加依赖项</font>中添加<font color="#c7254e">msmpi.lib;msmpifec.lib;msmpifmc.lib</font> ;</li>
</ol>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/8.png" alt="8"></p>
<ol>
<li>新建cpp文件，键入测试代码如下：</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpi.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rank;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    MPI_Init(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span><br><span class="line">    MPI_Comm_size(MPI_COMM_WORLD, &amp;size);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello world from process &quot;</span>&lt;&lt;rank&lt;&lt;<span class="string">&quot; of &quot;</span>&lt;&lt;size&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    MPI_Finalize();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跳到编译生成exe文件下的目录，执行下列命令，mpiexec刚刚安装bin下的一个执行mpi用的文件，默认配置了系统全局变量，如果没有的话可自行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mpiexec -n 4 main.exe</span><br></pre></td></tr></table></figure>
<p>得到运行结果如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Hello</span> world from process <span class="number">1</span> of <span class="number">4</span></span><br><span class="line"><span class="attribute">Hello</span> world from process <span class="number">0</span> of <span class="number">4</span></span><br><span class="line"><span class="attribute">Hello</span> world from process <span class="number">3</span> of <span class="number">4</span></span><br><span class="line"><span class="attribute">Hello</span> world from process <span class="number">2</span> of <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>至此，windows下的mpi环境配置成功了</p>
<h1 id="埃拉托色尼素数筛选法"><a href="#埃拉托色尼素数筛选法" class="headerlink" title="埃拉托色尼素数筛选法"></a>埃拉托色尼素数筛选法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>根据<a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95/4524938?fr=aladdin">百度百科</a>介绍，埃拉托色尼筛选法是针对自然数列中的自然数而实施的，用于求一定范围内的质数。</p>
<p>在寻找整数Ｎ以内的素数时，埃拉托斯特尼采用了一种与众不同的方法：先将２－Ｎ的各数写在纸上：</p>
<p>在２的上面画一个圆圈，然后划去２的其他倍数；第一个既未画圈又没有被划去的数是３，将它画圈，再划去３的其他倍数；现在既未画圈又没有被划去的第一个数是５，将它画圈，并划去５的其他倍数……依此类推，一直到所有小于或等于Ｎ的各数都画了圈或划去为止。这时，画了圈的以及未划去的那些数正好就是小于Ｎ的素数。</p>
<p>其伪代码如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Create</span> list of unmarked natural numbers <span class="number">2</span>, <span class="number">3</span>, …, n</span><br><span class="line"><span class="attribute">k</span> &lt;- <span class="number">2</span></span><br><span class="line"><span class="attribute">Repeat</span></span><br><span class="line">   <span class="attribute">Mark</span> <span class="literal">all</span> multiples of k between k^<span class="number">2</span> and n</span><br><span class="line">   <span class="attribute">k</span>&lt;- smallest unmarked number &gt; k</span><br><span class="line"><span class="attribute">until</span> k^<span class="number">2</span> &gt; n</span><br><span class="line"><span class="attribute">The</span> unmarked numbers are primes</span><br></pre></td></tr></table></figure>
<h3 id="初始版并行代码代码说明"><a href="#初始版并行代码代码说明" class="headerlink" title="初始版并行代码代码说明"></a>初始版并行代码代码说明</h3><p>定义一个数组marked, 每一个元素的下标对应一个整数，它的值表示这个整数是否为素数,值为1是素数，值为0不是素数。</p>
<p>先假定所有的数都是素数，将marked数组置0。</p>
<p>选定第一个整数２，从它对应的数组元素2*2=4开始依次标记2的倍数，一直标记到最后一个数为止。</p>
<p>接下来选定下一个未标记的数，它一定是素数，在使用广播的形式通知各进程筛选出这个素数的倍数。</p>
<p>这样循环到最后，所有进程中未标记的数之和就是1-n中的所有素数了。</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpi.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;error.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************</span></span><br><span class="line"><span class="comment">MPI_BCAST(buffer,count,datatype,root,comm)</span></span><br><span class="line"><span class="comment">    IN/OUT　buffer　　  通信消息缓冲区的起始地址(可变)</span></span><br><span class="line"><span class="comment">    IN　　　 count　  　 通信消息缓冲区中的数据个数(整型)</span></span><br><span class="line"><span class="comment">    IN 　　　datatype 　通信消息缓冲区中的数据类型(句柄)</span></span><br><span class="line"><span class="comment">    IN　　　 root　  　　发送广播的根的序列号(整型)</span></span><br><span class="line"><span class="comment">    IN 　　　comm   　　通信子(句柄)</span></span><br><span class="line"><span class="comment">int MPI_Bcast(void* buffer,int count,MPI_Datatype datatype,int root, MPI_Comm comm)</span></span><br><span class="line"><span class="comment">MPI_BCAST是从一个序列号为root的进程将一条消息广播发送到组内的所有进程,</span></span><br><span class="line"><span class="comment">包括它本身在内.调用时组内所有成员都使用同一个comm和root,</span></span><br><span class="line"><span class="comment">其结果是将根的通信消息缓冲区中的消息拷贝到其他所有进程中去.</span></span><br><span class="line"><span class="comment">规约函数 MPI_Reduce()，将通信子内各进程的同一个变量参与规约计算，并向指定的进程输出计算结果</span></span><br><span class="line"><span class="comment">MPI_METHOD MPI_Reduce(</span></span><br><span class="line"><span class="comment">   _In_range_(!= , recvbuf) _In_opt_ const void* sendbuf,  // 指向输入数据的指针</span></span><br><span class="line"><span class="comment">   _When_(root != MPI_PROC_NULL, _Out_opt_) void* recvbuf, // 指向输出数据的指针，即计算结果存放的地方</span></span><br><span class="line"><span class="comment">   _In_range_(&gt;= , 0) int count,                           // 数据尺寸，可以进行多个标量或多个向量的规约</span></span><br><span class="line"><span class="comment">   _In_ MPI_Datatype datatype,                             // 数据类型</span></span><br><span class="line"><span class="comment">   _In_ MPI_Op op,                                         // 规约操作类型</span></span><br><span class="line"><span class="comment">   _mpi_coll_rank_(root) int root,                         // 目标进程号，存放计算结果的进程</span></span><br><span class="line"><span class="comment">   _In_ MPI_Comm comm                                      // 通信子</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a, b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> count;              <span class="comment">/* Local prime count */</span></span><br><span class="line">    <span class="type">double</span> elapsed_time;    <span class="comment">/* Parallel execution time */</span></span><br><span class="line">    <span class="type">int</span> first;              <span class="comment">/* Index of first multiple */</span></span><br><span class="line">    <span class="type">int</span> global_count;       <span class="comment">/* Global prime count */</span></span><br><span class="line">    <span class="type">int</span> high_value;         <span class="comment">/* Highest value on this proc */</span></span><br><span class="line">    <span class="type">int</span> id;                 <span class="comment">/* Process ID number */</span></span><br><span class="line">    <span class="type">int</span> index;              <span class="comment">/* Index of current prime */</span></span><br><span class="line">    <span class="type">int</span> low_value;          <span class="comment">/* Lowest value on this proc */</span></span><br><span class="line">    <span class="type">char</span> *marked;           <span class="comment">/* Portion of 2,...,&#x27;n&#x27; */</span></span><br><span class="line">    <span class="type">int</span> n;                  <span class="comment">/* Sieving from 2, ..., &#x27;n&#x27; */</span></span><br><span class="line">    <span class="type">int</span> p;                  <span class="comment">/* Number of processes */</span></span><br><span class="line">    <span class="type">int</span> proc0_size;         <span class="comment">/* Size of proc 0&#x27;s subarray */</span></span><br><span class="line">    <span class="type">int</span> prime;              <span class="comment">/* Current prime */</span></span><br><span class="line">    <span class="type">int</span> size;               <span class="comment">/* Elements in &#x27;marked&#x27; */</span></span><br><span class="line">    <span class="type">int</span> low_index;          <span class="comment">/* Lowest index on this proc */</span></span><br><span class="line">    <span class="type">int</span> high_index;         <span class="comment">/* Highest index on this proc */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="comment">// MPI程序启动时“自动”建立两个通信器：</span></span><br><span class="line">    <span class="comment">// MPI_COMM_WORLD:包含程序中所有MPI进程</span></span><br><span class="line">    <span class="comment">// MPI_COMM_SELF：有单个进程独自构成，仅包含自己</span></span><br><span class="line">    <span class="built_in">MPI_Init</span>(&amp;argc, &amp;argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MPI_COMM_RANK 得到本进程的进程号，进程号取值范围为 0, …, np-1</span></span><br><span class="line">    <span class="built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MPI_COMM_SIZE 得到所有参加运算的进程的个数</span></span><br><span class="line">    <span class="built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MPI_Barrier是MPI中的一个函数接口</span></span><br><span class="line">    <span class="comment">// 表示阻止调用直到communicator中所有进程完成调用</span></span><br><span class="line">    <span class="built_in">MPI_Barrier</span>(MPI_COMM_WORLD);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MPI_WTIME返回一个用浮点数表示的秒数</span></span><br><span class="line">    <span class="comment">// 它表示从过去某一时刻到调用时刻所经历的时间</span></span><br><span class="line"></span><br><span class="line">    elapsed_time = -<span class="built_in">MPI_Wtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数个数为2：文件名以及问题规模n</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!id) <span class="built_in">printf</span>(<span class="string">&quot;Command line: %s &lt;m&gt; \n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 结束MPI系统</span></span><br><span class="line">        <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示找 &lt;= n的素数</span></span><br><span class="line">    n = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N = n - <span class="number">1</span>;</span><br><span class="line">    low_index = id * (N / p) + <span class="built_in">MIN</span>(id, N % p); <span class="comment">// 进程的第一个数的索引</span></span><br><span class="line">    high_index = (id + <span class="number">1</span>) * (N / p) + <span class="built_in">MIN</span>(id + <span class="number">1</span>, N % p) - <span class="number">1</span>; <span class="comment">// 进程的最后一个数的索引</span></span><br><span class="line">    low_value = <span class="number">2</span> + low_index; <span class="comment">//进程的第一个数</span></span><br><span class="line">    high_value = <span class="number">2</span> + high_index;<span class="comment">//进程的最后一个数</span></span><br><span class="line">    size = high_value - low_value + <span class="number">1</span>;    <span class="comment">//进程处理的数组大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bail out if all the primes used for sieving are not all held by process 0</span></span><br><span class="line">    proc0_size = (n - <span class="number">1</span>) / p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有太多进程</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">2</span> + proc0_size) &lt; (<span class="type">int</span>) <span class="built_in">sqrt</span>((<span class="type">double</span>) n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!id) <span class="built_in">printf</span>(<span class="string">&quot;Too many processes \n&quot;</span>);</span><br><span class="line">        <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate this process &#x27;s share of the array</span></span><br><span class="line">    marked = (<span class="type">char</span> *) <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (marked == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate enough memory \n&quot;</span>);</span><br><span class="line">        <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先假定所有的整数都是素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) marked[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引初始化为0</span></span><br><span class="line">    <span class="keyword">if</span> (!id) index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从2开始搜寻</span></span><br><span class="line">    prime = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">/*确定该进程中素数的第一个倍数的下标 */</span></span><br><span class="line">        <span class="comment">// 如果该素数n*n&gt;low_value，n*(n-i)都被标记了</span></span><br><span class="line">        <span class="comment">// 即n*n为该进程中的第一个素数</span></span><br><span class="line">        <span class="comment">// 其下标为n*n-low_value</span></span><br><span class="line">        <span class="keyword">if</span> (prime * prime &gt; low_value) &#123;</span><br><span class="line">            first = prime * prime - low_value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若最小值low_value为该素数的倍数</span></span><br><span class="line">            <span class="comment">// 则第一个倍数为low_value，即其下标为0</span></span><br><span class="line">            <span class="keyword">if</span> (!(low_value % prime)) first = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 若最小值low_value不是该素数的倍数</span></span><br><span class="line">                <span class="comment">// 那么第一个倍数的下标为该素数减去余数的值</span></span><br><span class="line">            <span class="keyword">else</span> first = prime - (low_value % prime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第一个素数开始，标记该素数的倍数为非素数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = first; i &lt; size; i += prime) marked[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有id=0的进程才调用，用于找到下一素数的位置</span></span><br><span class="line">        <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">            <span class="keyword">while</span> (marked[++index]); <span class="comment">// 先自加再执行</span></span><br><span class="line">            prime = index + <span class="number">2</span>; <span class="comment">// 起始加偏移</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有id=0的进程才调用，用于将下一个素数广播出去</span></span><br><span class="line">        <span class="keyword">if</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">MPI_Bcast</span>(&amp;prime, <span class="number">1</span>, MPI_INT, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (prime * prime &lt;= n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将标记结果发给0号进程</span></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="keyword">if</span> (marked[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">MPI_Reduce</span>(&amp;count, &amp;global_count, <span class="number">1</span>, MPI_INT, MPI_SUM, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stop the timer</span></span><br><span class="line">    elapsed_time += <span class="built_in">MPI_Wtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print the results</span></span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d primes are less than or equal to %d \n&quot;</span>, global_count, n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Total elapsed time: %10.6f\n&quot;</span>, elapsed_time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!id)&#123;</span><br><span class="line">        <span class="comment">// 以追加的方式打开文件</span></span><br><span class="line"><span class="comment">//        char str1[30] = &quot;../output/record.init.&quot;;</span></span><br><span class="line"><span class="comment">//        char str2[10] = &quot;.txt&quot;;</span></span><br><span class="line"><span class="comment">//        char filename[50];</span></span><br><span class="line"><span class="comment">//        sprintf(filename, &quot;%s%d%s&quot;, str1, p, str2);</span></span><br><span class="line"><span class="comment">//        FILE *fp;</span></span><br><span class="line"><span class="comment">//        if ((fp = fopen(filename,&quot;a+&quot;)) == nullptr)&#123;</span></span><br><span class="line"><span class="comment">//            printf(&quot;fail to open file&quot;);</span></span><br><span class="line"><span class="comment">//            exit(0);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fprintf(fp, &quot;%d %d %10.6f\n&quot;, p, n, elapsed_time);</span></span><br><span class="line"><span class="comment">//        fclose(fp);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优化一：去掉偶数"><a href="#优化一：去掉偶数" class="headerlink" title="优化一：去掉偶数"></a>优化一：去掉偶数</h2><p>利用已知除2以外的所有偶数都不是素数的常识，可以将待筛选数字总量减半，从而提高筛选效率。</p>
<p>关键代码在于数组减半，找到新的索引映射，以及首个倍数（非素数）的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> N = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">low_index = id * (N / p) + <span class="built_in">MIN</span>(id, N % p); <span class="comment">// 进程的第一个数的索引</span></span><br><span class="line">high_index = (id + <span class="number">1</span>) * (N / p) + <span class="built_in">MIN</span>(id + <span class="number">1</span>, N % p) - <span class="number">1</span>; <span class="comment">// 进程的最后一个数的索引</span></span><br><span class="line">low_value = low_index * <span class="number">2</span> + <span class="number">3</span>; <span class="comment">//进程的第一个数</span></span><br><span class="line">high_value = (high_index + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//进程的最后一个数</span></span><br><span class="line">size = (high_value - low_value) / <span class="number">2</span> + <span class="number">1</span>;    <span class="comment">//进程处理的数组大小</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="comment">/*确定该进程中素数的第一个倍数的下标 */</span></span><br><span class="line">   <span class="comment">// 如果该素数n*n&gt;low_value，n*(n-i)都被标记了</span></span><br><span class="line">   <span class="comment">// 即n*n为该进程中的第一个素数</span></span><br><span class="line">   <span class="comment">// 其下标为n*n-low_value，并且由于数组大小减半所以除以2</span></span><br><span class="line">   <span class="keyword">if</span> (prime * prime &gt; low_value) &#123;</span><br><span class="line">   	   first = (prime * prime - low_value) / <span class="number">2</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 若最小值low_value为该素数的倍数</span></span><br><span class="line">       <span class="comment">// 则第一个倍数为low_value，即其下标为0</span></span><br><span class="line">       <span class="keyword">if</span> (!(low_value % prime)) first = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// 若最小值low_value不是该素数的倍数</span></span><br><span class="line">       <span class="comment">// 但是其余数为偶数，那么第一个非素数的索引为该素数剪去求余除以2</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (low_value % prime % <span class="number">2</span> == <span class="number">0</span>) first = prime - ((low_value % prime) / <span class="number">2</span>);</span><br><span class="line">       <span class="comment">// 若最小值low_value不是该素数的倍数</span></span><br><span class="line">       <span class="comment">// 那么第一个倍数的下标为该素数减去余数的值，并且由于数组大小减半所以除以2</span></span><br><span class="line">       <span class="keyword">else</span> first = (prime - (low_value % prime)) / <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 从第一个素数开始，标记该素数的倍数为非素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = first; i &lt; size; i += prime) marked[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有id=0的进程才调用，用于找到下一素数的位置</span></span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">while</span> (marked[++index]);</span><br><span class="line">        prime = index * <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// 起始加偏移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有id=0的进程才调用，用于将下一个素数广播出去</span></span><br><span class="line">    <span class="keyword">if</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">MPI_Bcast</span>(&amp;prime, <span class="number">1</span>, MPI_INT, <span class="number">0</span>, MPI_COMM_WORLD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (prime * prime &lt;= n);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>当prime = 3，考虑序列 15 17 19 21 23，则满足<code>low_value % prime == 0</code>，所以索引 0 即第一个数 15 就是 prime的倍数，这个很好理解</p>
</li>
<li><p>当prime = 3，考虑序列 3 5 7 9 11 13，则满足<code>prime * prime &gt; low_value</code>，那么<code>first = (prime * prime - low_value) / 2</code>  即第一个非素数索引为 3 即值为 9，这个和前面的一样，主要是减去一个偏移，不难理解</p>
<p>比较难以理解的是后面两个判断</p>
</li>
<li><p>当prime = 3，考虑序列 17 19 21 23 25，则满足<code>prime * prime &lt;= low_value</code>，并且满足<code>low_value % prime % 2 == 0</code>，那么<code>first = prime - ((low_value % prime) / 2)</code>，即第一个非素数的位置为 0，即值为·15</p>
</li>
<li><p>当prime = 3，考虑序列 11 13 15 17 19，则满足<code>prime * prime &lt;= low_value</code>，并且满足<code>low_value % prime % 2 != 0</code>，那么 <code>first = (prime - (low_value % prime)) / 2</code>，即第一个非素数索引为 2，即值为15</p>
</li>
</ol>
<p>我理解了很久，我认为主要是由于每次遇到 prime 与 2 的公倍数的时候性质会发生改变，当prime = 3，考虑原有序列7 8 9 10 11 12 13 14 15 16 17，其中 12 为 2 和 3 的公倍数，排除除 12 以外的其他偶数，该序列为 7 9 11 12 13 15 17，再排除 3 的倍数，该序列为 7 11 12 13 17，问题的本质在于小于等于该数（7,11,13,17）最近的并且为 prime （3）和 2 的公倍数 A 是否为偶数。</p>
<p>对于 11，17而言，即满足条件 3，A为 9，15为奇数，偏差bias（求余）为2，所以可以更进一步判断bias是否为偶数，由于其下一个 prime 倍数的位置只能取[0, prime - 1]，故而 prime 下一个倍数所在的位置为 prime - bias /  2；</p>
<p>对于 7，13 而言，即满足条件 4，A 为 6，12为偶数，偏差bias（求余）为1，同样由于其下一个 prime 倍数的位置只能取[0, prime - 1]，故而 prime 下一个倍数所在的位置为 (prime - bias) / 2。</p>
<p>所有代码见<a href="https://github.com/543877815/uestc_Internet_plus_course_project/blob/master/parallel_programming/MPI/main1.cpp">这里</a></p>
<h2 id="优化二：去掉广播通信"><a href="#优化二：去掉广播通信" class="headerlink" title="优化二：去掉广播通信"></a>优化二：去掉广播通信</h2><p>原理：初始的代码是通过进程0广播下一个筛选倍数的素数。进程之间需要通过MPI_Bcast函数进行通信。通信就一定会有开销，特别是在分布式计算机架构上，因此我们让每个进程都各自找出它们的前sqrt(n)个数中的素数，在通过这些素数筛选剩下的素数，这样一来进程之间就不需要每个循环广播素数了，性能得到提高。</p>
<p>核心代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 小数组 */</span></span><br><span class="line"><span class="type">char</span> *sub_marked;       <span class="comment">/* sub_mark array */</span></span><br><span class="line"><span class="type">int</span> sub_low_index;      <span class="comment">/* Lowest index on sub_array */</span></span><br><span class="line"><span class="type">int</span> sub_low_value;      <span class="comment">/* Lowest array on sub_array */</span></span><br><span class="line"><span class="type">int</span> sub_high_index;     <span class="comment">/* Highest index on sub_array */</span></span><br><span class="line"><span class="type">int</span> sub_high_value;     <span class="comment">/* Highest index on sub_array */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sub_n = (<span class="type">int</span>) <span class="built_in">sqrt</span>((<span class="type">double</span>) n);</span><br><span class="line"><span class="type">int</span> sub_N = (sub_n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">sub_low_index = <span class="number">0</span> * (sub_N / p) + <span class="built_in">MIN</span>(<span class="number">0</span>, sub_N % p); <span class="comment">// 进程的第一个数的索引</span></span><br><span class="line">sub_high_index = <span class="number">1</span> * (sub_N / p) + <span class="built_in">MIN</span>(<span class="number">1</span>, sub_N % p) - <span class="number">1</span>; <span class="comment">// 进程的最后一个数的索引</span></span><br><span class="line">sub_low_value = sub_low_index * <span class="number">2</span> + <span class="number">3</span>; <span class="comment">//进程的第一个数</span></span><br><span class="line">sub_high_value = (sub_high_index + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//进程的最后一个数</span></span><br><span class="line"></span><br><span class="line">sub_marked = (<span class="type">char</span> *) <span class="built_in">malloc</span>(sub_n);</span><br><span class="line"><span class="keyword">if</span> (sub_marked == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate enough memory \n&quot;</span>);</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先假定所有的整数都是素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sub_n; i++) sub_marked[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引初始化为0</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">prime = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 从小数组开始标只会命中第一个条件</span></span><br><span class="line">    first = (prime * prime - sub_low_value) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 从第一个素数开始，标记该素数的倍数为非素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = first; i &lt; sub_n; i += prime) &#123;</span><br><span class="line">    	sub_marked[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">while</span> (sub_marked[++index]);</span><br><span class="line">    prime = index * <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// 起始加偏移</span></span><br><span class="line">&#125; <span class="keyword">while</span> (prime * prime &lt;= sub_n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 大数组 */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    </span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">while</span> (sub_marked[++index]);</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// if (p &gt; 1) &#123;</span></span><br><span class="line">    <span class="comment">//     MPI_Bcast(&amp;prime, 1, MPI_INT, 0, MPI_COMM_WORLD);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125; <span class="keyword">while</span> (prime * prime &lt;= n);</span><br></pre></td></tr></table></figure>
<p>此优化所有代码<a href="https://github.com/543877815/uestc_Internet_plus_course_project/blob/master/parallel_programming/MPI/main2.cpp">见此</a></p>
<h2 id="优化三：分块筛选，提高cache命中率"><a href="#优化三：分块筛选，提高cache命中率" class="headerlink" title="优化三：分块筛选，提高cache命中率"></a>优化三：分块筛选，提高cache命中率</h2><p>在做这个之前我参考了<a href="http://www.360doc.com/content/14/1015/13/10249440_417146850.shtml">这篇文章</a>，以及这篇文章介绍的<a href="http://igoro.com/archive/gallery-of-processor-cache-effects/">原版论文</a>，对于第三个有两个优化思路，第一个是基于cache_linesize的优化，另外一个是基于cache_size的优化，现在来介绍一下如何获取cache的相关信息吧。</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>在命令行中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getconf -a | grep CACHE</span><br></pre></td></tr></table></figure>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/10.png" alt="10"></p>
<p>可以看到不同级别的cache的相关信息，包括cache的大小size，cache每行的大小linesize，cache的链接形式n路组相连。</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>在任务管理栏的性能中</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/11.png" alt="11"></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>对于大规模的数组来说cache_line的优化效果并不是很明显，所以下面只针对cache做优化，本优化方法需每个进程都各计算出前sqrt(n)个数中的素数，(对应优化思路2)。由于从cache读取的速度远高于从内存中处理，所以cache_size优化的思路在于每次处理cache大小的数组，之前我们已经将n内分成大小约为n/p的块给每个进程处理，然后在在每个进程中将n/p大小块按照cache_size进行分块，在此之前我们需要对cache的大小从byte转化为int，32位系统即除以4，以上图windows为例，L1，L2，L3缓存分别可以存64KB，0.25MB，1.5MB个int，而单机（注意是单机，如果是分布式计算机理论上可以占满所有的cache）中每个进程又将划分其中的cache，如果对于L3而言如果分配 2 个进程则每个进程能够得到 0.75 MB个int进程处理，而实际中由于计算机中有其他进程也会使用cache，所以在实际中这个数还要小。另外根据测试的时候n大小进行选择cache的级别，比如我测试的是亿级的数据，远超过cache的大小，所以直接对L3级别的cache进行分块，当然选择L3并不一定是最优策略，需要多次实证才能知道。</p>
<p>故基于此关键代码在于进程内分块：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> LEVEL1_CACHE_size = <span class="number">32768</span>;      <span class="comment">// default 32768</span></span><br><span class="line"><span class="type">int</span> LEVEL2_CACHE_size = <span class="number">262144</span>;     <span class="comment">// default 262144</span></span><br><span class="line"><span class="type">int</span> LEVEL3_CACHE_size = <span class="number">9485760</span>;    <span class="comment">// default 10485760</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> LEVEL1_CACHE_int = LEVEL1_CACHE_size / <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> LEVEL2_CACHE_int = LEVEL2_CACHE_size / <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> LEVEL3_CACHE_int = LEVEL3_CACHE_size / <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Block_size = LEVEL3_CACHE_int / p ;</span><br><span class="line"><span class="type">int</span> Block_num = size / Block_size;</span><br><span class="line"><span class="type">int</span> Block_remain = size % Block_size;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Block_id = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> Block_N = Block_size - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> Block_low_index = Block_id * Block_N + <span class="built_in">MIN</span>(Block_id, Block_remain) + low_index;</span><br><span class="line"><span class="type">int</span> Block_high_index = (Block_id + <span class="number">1</span>) * Block_N + <span class="built_in">MIN</span>(Block_id + <span class="number">1</span>, Block_remain) - <span class="number">1</span> + low_index;</span><br><span class="line"><span class="type">int</span> Block_low_value = Block_low_index * <span class="number">2</span> + <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> Block_high_value = (Block_high_index + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> Block_count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// allocate this process &#x27;s share of the array</span></span><br><span class="line">marked = (<span class="type">char</span> *) <span class="built_in">malloc</span>(Block_size);</span><br><span class="line"><span class="keyword">if</span> (marked == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate enough memory \n&quot;</span>);</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总计数</span></span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (Block_id &lt;= Block_num) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引初始化为0</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从3开始搜寻，first为第一个不是素数的位置</span></span><br><span class="line">    prime = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 块计数</span></span><br><span class="line">    Block_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先假定块中的整数都是素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Block_size; i++) marked[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在块内找素数</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">/*确定该进程中素数的第一个倍数的下标 */</span></span><br><span class="line">        <span class="comment">// 如果该素数n*n&gt;low_value，n*(n-i)都被标记了</span></span><br><span class="line">        <span class="comment">// 即n*n为该进程中的第一个素数</span></span><br><span class="line">        <span class="comment">// 其下标为n*n-low_value，并且由于数组大小减半所以除以2</span></span><br><span class="line">        <span class="keyword">if</span> (prime * prime &gt; Block_low_value) &#123;</span><br><span class="line">            first = (prime * prime - Block_low_value) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若最小值low_value为该素数的倍数</span></span><br><span class="line">            <span class="comment">// 则第一个倍数为low_value，即其下标为0</span></span><br><span class="line">            <span class="keyword">if</span> (!(Block_low_value % prime)) first = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 若最小值low_value不是该素数的倍数</span></span><br><span class="line">                <span class="comment">// 但是其余数为偶数，那么第一个非素数的索引为该素数剪去求余除以2</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Block_low_value % prime % <span class="number">2</span> == <span class="number">0</span>) first = prime - ((Block_low_value % prime) / <span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 若最小值low_value不是该素数的倍数</span></span><br><span class="line">                <span class="comment">// 那么第一个倍数的下标为该素数减去余数的值，并且由于数组大小减半所以除以2</span></span><br><span class="line">            <span class="keyword">else</span> first = (prime - (Block_low_value % prime)) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第一个素数开始，标记该素数的倍数为非素数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = first; i &lt; Block_size; i += prime) &#123;</span><br><span class="line">            marked[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于找到下一素数的位置</span></span><br><span class="line">        <span class="keyword">while</span> (sub_marked[++index]);</span><br><span class="line"></span><br><span class="line">        prime = index * <span class="number">2</span> + <span class="number">3</span>; <span class="comment">// 起始加偏移</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (prime * prime &lt;= Block_high_value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计块内计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Block_size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (marked[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            Block_count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 汇总总体计数</span></span><br><span class="line">    count += Block_count;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理下一个块</span></span><br><span class="line">    Block_id++;</span><br><span class="line">    Block_low_index = Block_id * Block_N + <span class="built_in">MIN</span>(Block_id, Block_remain) + low_index;</span><br><span class="line">    Block_high_index = (Block_id + <span class="number">1</span>) * Block_N + <span class="built_in">MIN</span>(Block_id + <span class="number">1</span>, Block_remain) - <span class="number">1</span> + low_index;</span><br><span class="line">    Block_low_value = Block_low_index * <span class="number">2</span> + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (Block_id == Block_num) &#123;</span><br><span class="line">        Block_high_value = high_value;</span><br><span class="line">        Block_high_index = high_index;</span><br><span class="line">        Block_size = (Block_high_value - Block_low_value) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Block_high_value = (Block_high_index + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此优化所有代码<a href="https://github.com/543877815/uestc_Internet_plus_course_project/blob/master/parallel_programming/MPI/main3.cpp">见此</a></p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>项目地址为<a href="https://github.com/543877815/uestc_Internet_plus_course_project/tree/master/parallel_programming">https://github.com/543877815/uestc_Internet_plus_course_project/tree/master/parallel_programming</a></p>
<h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><h3 id="linux-1"><a href="#linux-1" class="headerlink" title="linux"></a>linux</h3><p>本项目原本是在linux环境下使用clion基于mpich进行开发，相关目录及文件说明如下：</p>
<ul>
<li>main.cpp为原版代码</li>
<li>main1.cpp为去掉偶数优化代码</li>
<li>main2.cpp为去掉通信代码</li>
<li>main3.cpp为初步提升cache命中率代码</li>
<li>MPItest.cpp为起初测试linux下mpi环境代码</li>
<li>base.cpp为原版代码副本</li>
<li>cache.test.cpp为阅读<a href="http://www.360doc.com/content/14/1015/13/10249440_417146850.shtml">本文</a>的测试代码</li>
<li>output为输出结果（输出已在代码中注释需要手动取消）。</li>
</ul>
<h3 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h3><p>后来在windows上进行测试，使用VS对代码进行部分修改以兼容windows版本并进行了编译，其中</p>
<ul>
<li>srcForWindows为存放了windows下运行源码目录</li>
<li><p>execForWindows为编译生成的可执行文件</p>
<ul>
<li>需要安装<code>msmpisetup.exe</code></li>
<li>执行命令为<code>mpiexec -n 8 main.exe 10000000</code></li>
<li>main3.exe需要传入cache_size的参数 <code>mpiexec -n 8 main.exe 10000000  10240000</code></li>
<li>生成数据文件需要手动在该目录下创建名为output的文件夹</li>
</ul>
</li>
<li><p>你可能需要的<a href="2019/04/25/ubuntu和windows下运行MPI做埃拉托色尼素数筛选法/msvcp120d +msvcr120d.rar">文件</a></p>
</li>
</ul>
<h1 id="优化效果及加速比"><a href="#优化效果及加速比" class="headerlink" title="优化效果及加速比"></a>优化效果及加速比</h1><p>我跑的是找1亿以内的素数，结果为5761455个，在我的电脑上运行时间如下图</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/12.png" alt="12"></p>
<ul>
<li><p>横向对比可以看出通过优化一去掉偶数可以使待处理数组减半，故而时间减半；通过优化二去掉通信在单机上进程数量较少的时候优化效果不明显，随着进程数量增加，优化效果有所提升，如果考虑分布式计算机，优化效果会更加明显；通过优化三增加cache命中率可以显著提升优化效果。</p>
</li>
<li><p>而纵向对比可以发现随着处理器的增加使得运行时间有所减少。</p>
</li>
</ul>
<h2 id="加速比"><a href="#加速比" class="headerlink" title="加速比"></a>加速比</h2><p>加速比的定义为</p>
<script type="math/tex; mode=display">S_p=\frac{T_1}{T_p}</script><p>其中：</p>
<ul>
<li>$p$指CPU数量</li>
<li>$T_1$指顺序执行算法的执行时间</li>
<li>$T_p$指当有p个处理器时，并行算法的执行时间</li>
</ul>
<p>规模为1,0000,0000的时候绘制的加速比 – 处理器曲线如下</p>
<div id="echarts2031" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2031'));

        // 指定图表的配置项和数据
        var option = 
{
    title: {
        text: '加速比-处理器曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
    		name:'无优化',
            type:'line',
            smooth:true,
            data:[1,1.417697956,1.519842126,1.640081315,1.7711876,1.85808183,1.883650875,1.891356009,1.901146018,1.87170806,1.905406966,1.938012995,1.94553853,1.941417512,1.95437113,1.962340372,1.955113781,1.973029897,1.967850397,2.011961258]
    	},
        {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[2.125561962,2.972632769,3.263280251,3.462611522,3.645447427,3.879800488,4.003649421,4.005353982,4.041037538,4.108872982,4.1539338,4.192676888,4.27061851,4.319784287,4.413608488,4.504320139,4.560286916,4.619739411,4.571220084,4.719871359]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[2.166195751,3.145577123,3.388569418,3.54928344,3.616854747,3.869726157,3.998655378,4.034086294,4.082361441,4.175539477,4.207624355,4.50617318,4.406106025,4.53904061,4.614407013,4.999396314,4.867954483,5.160878471,5.051372605,5.540664213]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[3.68152582,7.24280982,10.82401146,14.61256181,18.26323316,21.55677519,24.67597555,28.11833963,25.97695228,29.90704128,24.29202355,29.77648743,28.79235981,39.63674678,33.32698137,40.37005607,30.22276067,44.27793207,32.44453641,47.86206526]
        }
    ]
};


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<p>可以发现通过优化一去除偶数使得运行时间减半，加速比表现为原始版本的两倍，而通过优化二去掉通信在单机上优化效果不太明显，但在进程较多的时候还是有所体现，因此，加速比比优化一还是有所提升。当Sp=p时，Sp便可以称为“线性加速比”，即当某一并行算法的加速比为理想加速比时，若将处理器数量加倍，执行速度也会加倍，但是在规模1,0000,0000的情况下除cache优化外其他三种代码并没有表现出这种趋势，初步分析认为这是由于i/o而不是计算占程序的主要部分导致的。</p>
<p>因此为了让计算占据更多程序运行的更大部分，我将规模增加为10,0000,0000后再进行对比：</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/13.png" alt="13"></p>
<p>可以发现情况依然如此，因此我姑且得出的结论是前三种代码并不是能够产生理想加速比的代码，当然这存在的着通信开销以及一些其他的系统运行开销的影响。 </p>
<p>而通过cache缓冲后加速比，在前8核加速比按照处理器核数线性增加，达到8核以后有加速比有上升的趋势但是也有所波动并且不再呈现线性的趋势，因为处理器有限不能同时处理多个任务，这与之前查看windows系统CPU配置的4核8处理器相符。另外有Sp&gt;p，即产生了超线性加速比，通过维基百科得知，超线性加速比有几种可能的成因，如现代计算机的存储层次不同所带来的“高速缓存效应”；具体来说，较之顺序计算，在并行计算中，不仅参与计算的处理器数量更多，不同处理器的高速缓存也集合使用。而有鉴于此，集合的缓存便足以提供计算所需的存储量，算法执行时便不必使用速度较慢的内存，因而存储器读些时间便能大幅降低，这便对实际计算产生了额外的加速效果。</p>
<h2 id="并行效率"><a href="#并行效率" class="headerlink" title="并行效率"></a>并行效率</h2><p>由加速比派生出的效率（英语：efficiency）则是量度性能的指标，并如下定义：</p>
<script type="math/tex; mode=display">E_p=\frac{S_p}{p}=\frac{T_1}{pT_p}</script><p>绘制的并行效率与执行进程数的曲线如下：</p>
<div id="echarts588" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts588'));

        // 指定图表的配置项和数据
        var option = 
 {
    title: {
        text: '并行化效率与进程数关系曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
            name:'无优化',
            type:'line',
            smooth:true,
            data:[1,0.708848978,0.506614042,0.410020329,0.35423752,0.309680305,0.269092982,0.236419501,0.211238446,0.187170806,0.173218815,0.161501083,0.14965681,0.138672679,0.130291409,0.122646273,0.115006693,0.109612772,0.103571074,0.100598063]
        },     
   {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[2.125561962,1.486316384,1.087760084,0.865652881,0.729089485,0.646633415,0.571949917,0.500669248,0.449004171,0.410887298,0.377630345,0.349389741,0.328509116,0.30855602,0.294240566,0.281520009,0.268252172,0.256652189,0.240590531,0.235993568]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[2.166195751,1.572788562,1.129523139,0.88732086,0.723370949,0.64495436,0.571236483,0.504260787,0.453595716,0.417553948,0.382511305,0.375514432,0.338931233,0.324217186,0.307627134,0.31246227,0.286350264,0.286715471,0.265861716,0.277033211]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[3.68152582,3.62140491,3.60800382,3.653140452,3.652646632,3.592795864,3.525139364,3.514792454,2.886328031,2.990704128,2.208365777,2.481373952,2.214796908,2.831196198,2.221798758,2.523128504,1.777809451,2.459885115,1.707607179,2.393103263]
        }
    ]
}


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<p>可以看到没有使用cache优化的时候并行效率一般介于0~1之间，通过cache命中优化使得产生超线性加速比并且并行效率大于1。</p>
<h2 id="其他规模"><a href="#其他规模" class="headerlink" title="其他规模"></a>其他规模</h2><p>规模为10,000,000，则素数有664579个，运行时间如下</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/14.png" alt="14"></p>
<div id="echarts6968" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts6968'));

        // 指定图表的配置项和数据
        var option = 
{
    title: {
        text: '加速比-处理器曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
    		name:'无优化',
            type:'line',
            smooth:true,
            data:[1,1.415228146,1.631347915,1.742213495,1.856755783,1.928096981,1.999927382,2.037232597,2.03537017,2.03873492,2.041143622,2.064923984,2.075174297,2.068590853,2.080006484,2.079629119,2.069165991,2.082867513,2.089131281,2.09100337]
    	},
        {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[1.87988915,2.829404697,3.363092811,3.601079127,3.814889679,3.988800917,4.056270369,4.155204995,4.168371395,4.193461151,4.205384218,4.209615636,4.219954793,4.21926823,4.257670547,4.258841396,4.241735018,4.246120459,4.250589534,4.266117779]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[1.927223182,2.949503829,3.382333867,3.640090434,3.856035494,3.985780234,4.103597062,4.169252827,4.179240312,4.193534474,4.191862071,4.231639213,4.235638866,4.270972497,4.257505305,4.277833012,4.276406178,4.273573273,4.288371328,4.32337422]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[3.996886942,8.196905157,12.88768068,17.35464409,21.79716459,26.32231136,30.1718199,33.42472043,33.68355437,35.41933627,36.21496439,35.56293916,33.89388148,35.47939819,34.87658334,36.95788192,37.35952947,36.83328688,36.90336097,37.10185611]
        }
    ]
};


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<div id="echarts1854" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts1854'));

        // 指定图表的配置项和数据
        var option = 
 {
    title: {
        text: '并行化效率与进程数关系曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
            name:'无优化',
            type:'line',
            smooth:true,
            data:[1,0.707614073,0.543782638,0.435553374,0.371351157,0.321349497,0.285703912,0.254654075,0.226152241,0.203873492,0.185558511,0.172076999,0.159628792,0.14775649,0.138667099,0.12997682,0.121715647,0.115714862,0.109954278,0.104550169]
        },     
   {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[1.87988915,1.414702348,1.121030937,0.900269782,0.762977936,0.664800153,0.579467196,0.519400624,0.463152377,0.419346115,0.382307656,0.350801303,0.324611907,0.301376302,0.283844703,0.266177587,0.249513825,0.235895581,0.223715239,0.213305889]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[1.927223182,1.474751915,1.127444622,0.910022608,0.771207099,0.664296706,0.586228152,0.521156603,0.464360035,0.419353447,0.38107837,0.352636601,0.325818374,0.305069464,0.283833687,0.267364563,0.251553305,0.237420737,0.225703754,0.216168711]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[3.996886942,4.098452578,4.29589356,4.338661023,4.359432917,4.387051893,4.310259986,4.178090054,3.742617152,3.541933627,3.29226949,2.963578263,2.607221652,2.534242728,2.325105556,2.30986762,2.19761938,2.046293716,1.942282156,1.855092806]
        }
    ]
}


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<p>规模为10,0000,0000，则素数有50847533个，运行时间如下</p>
<p><img src="/2019/04/25/ubuntu%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8CMPI%E5%81%9A%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%E6%B3%95/15.png" alt="15"></p>
<div id="echarts6746" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts6746'));

        // 指定图表的配置项和数据
        var option = 
{
    title: {
        text: '加速比-处理器曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
    		name:'无优化',
            type:'line',
            smooth:true,
            data:[1,1.551082889,1.877413999,1.977090936,2.268993481,2.28975484,2.373245531,2.950368658,3.432897355,4.023507129,4.625603618,5.124839676,4.985428597,5.108538549,6.108853918,5.345862334,4.634006168,5.53673989,5.784780784,5.413430125]
    	},
        {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[2.50206012,4.478441359,6.29939258,7.656998531,7.957338397,9.106485547,10.39614686,11.44646918,11.90219701,12.15837953,10.64830958,12.61279874,11.55895062,13.56546674,13.76901368,13.28669287,13.25596953,12.76448995,9.976436323,12.98903302]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[2.530847135,4.493893171,6.557476304,7.751196702,8.576586779,9.954733354,11.2023509,12.64746564,11.90635132,12.83769804,15.25107523,15.19655316,15.76905826,17.27702759,17.62201198,14.4466452,16.12204954,17.49377395,15.85671698,16.66310465]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[2.809572236,5.493300984,8.040015505,9.711496246,12.175954,14.50217486,12.77515692,14.12891643,14.01673838,16.40006119,17.51559941,20.76295562,19.5794839,21.20814814,22.96017689,19.90553008,18.49766737,17.67059675,16.55828927,20.0654873]
        }
    ]
};


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<div id="echarts650" style="width: 100%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts650'));

        // 指定图表的配置项和数据
        var option = 
 {
    title: {
        text: '并行化效率与进程数关系曲线'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        data:['无优化','优化一', '优化二', '优化三']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20']
    },
    yAxis: {
        type: 'value'
    },
    series: [
    	{
            name:'无优化',
            type:'line',
            smooth:true,
            data:[1,0.775541444,0.625804666,0.494272734,0.453798696,0.381625807,0.339035076,0.368796082,0.381433039,0.402350713,0.42050942,0.427069973,0.383494507,0.364895611,0.407256928,0.334116396,0.272588598,0.307596661,0.304462147,0.270671506]
        },     
   {
            name:'优化一',
            type:'line',
            smooth:true,
            data:[2.50206012,2.239220679,2.099797527,1.914249633,1.591467679,1.517747591,1.485163837,1.430808647,1.322466335,1.215837953,0.968028143,1.051066562,0.889150048,0.96896191,0.917934245,0.830418304,0.779762913,0.709138331,0.525075596,0.649451651]
        },
        {
            name:'优化二',
            type:'line',
            smooth:true,
            data:[2.530847135,2.246946586,2.185825435,1.937799176,1.715317356,1.659122226,1.600335843,1.580933204,1.322927925,1.283769804,1.386461384,1.26637943,1.213004482,1.234073399,1.174800799,0.902915325,0.948355855,0.97187633,0.834564052,0.833155232]
        },
        {
            name:'优化三',
            type:'line',
            smooth:true,
            data:[2.809572236,2.746650492,2.680005168,2.427874062,2.435190801,2.417029143,1.825022417,1.766114553,1.557415375,1.640006119,1.592327219,1.730246302,1.506114146,1.514867725,1.53067846,1.24409563,1.088098081,0.981699819,0.871488909,1.003274365]
        }
    ]
}


        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>]]></content>
      <categories>
        <category>MPI</category>
      </categories>
      <tags>
        <tag>the Sieve of Eratosthenes</tag>
        <tag>clion</tag>
        <tag>ubuntu</tag>
        <tag>windows</tag>
        <tag>vs</tag>
        <tag>msmpi</tag>
        <tag>mpich</tag>
      </tags>
  </entry>
  <entry>
    <title>构建自己的front-end-cli</title>
    <url>/2019/04/10/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84front-end-cli/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="全局安装-不推荐"><a href="#全局安装-不推荐" class="headerlink" title="全局安装(不推荐)"></a>全局安装(不推荐)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure>
<p>全局的话容易发生webpack3和webpack4的版本冲突</p>
<h2 id="局部安装-推荐"><a href="#局部安装-推荐" class="headerlink" title="局部安装(推荐)"></a>局部安装(推荐)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br><span class="line"><span class="comment"># npm install webpack webpack-cli --save-dev</span></span><br></pre></td></tr></table></figure>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure>
<h3 id="查看包版本"><a href="#查看包版本" class="headerlink" title="查看包版本"></a>查看包版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm info webpack</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>项目目录文件下新建</p>
<p>webpack.config.js</p>
<h2 id="entry-amp-output"><a href="#entry-amp-output" class="headerlink" title="entry &amp; output"></a>entry &amp; output</h2><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">// default &#x27;production&#x27; for compression</span></span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;bundle&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多入口"><a href="#多入口" class="headerlink" title="多入口"></a>多入口</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">// default &#x27;production&#x27; for compression</span></span><br><span class="line">	<span class="attr">entry</span>: &#123;</span><br><span class="line">		<span class="attr">main</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">		<span class="attr">sub</span>: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;bundle&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">// default &#x27;production&#x27; for compression</span></span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">	    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">			<span class="attr">name</span>: <span class="string">&#x27;runtime&#x27;</span>  <span class="comment">// 提取runtime</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].js&#x27;</span>,</span><br><span class="line">		<span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].[contenthash].chunk.js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">// default &#x27;production&#x27; for compression</span></span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">publicPath</span>: <span class="string">&#x27;http://cdn.com.cn&#x27;</span>,</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;bundle&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>将文件上的import / require（）解析为url，并将文件发送到输出目录中</p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install file-loader -D</span><br></pre></td></tr></table></figure>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|svg|woff)$/</span>,</span><br><span class="line">            <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">&#x27;font/&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>用于将文件转换为base64 URI</p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install url-loader -D</span><br></pre></td></tr></table></figure>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">            <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">&#x27;images/&#x27;</span>,</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">8192</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="style-loader-amp-amp-css-loader"><a href="#style-loader-amp-amp-css-loader" class="headerlink" title="style-loader &amp;&amp; css-loader"></a>style-loader &amp;&amp; css-loader</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>style-loader通过注入标记将DOM添加到DOM</p>
<p>css-loader解释@ import和url()，如import / require()并解析它们。</p>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> style-loader css-loader -D</span><br></pre></td></tr></table></figure>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sass-loader-amp-amp-node-sass"><a href="#sass-loader-amp-amp-node-sass" class="headerlink" title="sass-loader &amp;&amp; node-sass"></a>sass-loader &amp;&amp; node-sass</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>sass-loader加载Sass / SCSS文件并将其编译为CSS</p>
<p>node-loader是Node.js附加组件加载程序模块，用于增强需求。在enhanced-require中执行附加组件</p>
<h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass -D</span><br></pre></td></tr></table></figure>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h3><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>postcss-loader使用PostCSS处理CSS的webpack的加载器(产商前缀)</p>
<h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install postcss-loader -D</span><br></pre></td></tr></table></figure>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install autoprefixer -D</span><br></pre></td></tr></table></figure>
<p>项目目录下创建postcss.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">		<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="option-importLoaders"><a href="#option-importLoaders" class="headerlink" title="option: importLoaders"></a>option: importLoaders</h4><p>importLoaders选项允许您在将css-loader应用于@imported资源之前配置多少个加载器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">importLoaders</span>: <span class="number">2</span>, 	<span class="comment">// 0 =&gt; no loaders (default); 1 =&gt; postcss-loader; 2 =&gt; postcss-loader, sass-loader</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="option-modules"><a href="#option-modules" class="headerlink" title="option: modules"></a>option: modules</h4><p>modules选项启用/禁用CSS模块规范并设置基本行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">importLoaders</span>: <span class="number">2</span>,</span><br><span class="line">    					<span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">    				&#125;,</span><br><span class="line">    			&#125;,</span><br><span class="line">    			<span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">    			<span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">    			]</span><br><span class="line">    		&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p><a href="https://babeljs.io/setup#installation">Bebel</a>是一个工具链，主要用于将ECMAScript 2015+代码转换为当前和旧版浏览器或环境中的向后兼容版本的JavaScript。以下是Babel可以为您做的主要事情：</p>
<h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br></pre></td></tr></table></figure>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      	<span class="attr">rules</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span> </span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在项目目录下新建.babelrc，相当如babel中options的配置项</p>
<h5 id="preset-set"><a href="#preset-set" class="headerlink" title="preset-set"></a>preset-set</h5><h5 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h5><p><a href="https://babeljs.io/docs/en/babel-preset-env">preset-set</a>一个转化ES2015+的预设</p>
<h5 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><p>并在.babelrc下输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在webpack.config.js配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      	<span class="attr">rules</span>: [</span><br><span class="line">	        &#123; </span><br><span class="line">	            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">	            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">	            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">	            <span class="attr">options</span>: &#123;</span><br><span class="line">					<span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">				&#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	    ]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h4><h5 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h5><p><a href="https://babeljs.io/docs/en/babel-polyfill">Polyfill</a>是一个<code>js</code>库，主要抚平不同浏览器之间对js实现的差异</p>
<h5 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>在业务代码中进行引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@babel/polyfill&quot;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>引入所有纠正由此带来代码臃肿</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>在webpack.config.js键入以下内容以根据业务代码加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">presets</span>: [</span><br><span class="line">                    [<span class="string">&quot;@babel/preset-env&quot;</span>,&#123;</span><br><span class="line">                        <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span></span><br><span class="line">                    &#125;]</span><br><span class="line">                ]</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="warning-及-解决"><a href="#warning-及-解决" class="headerlink" title="warning 及 解决"></a>warning 及 解决</h5><p>WARNING: We noticed you’re using the <code>useBuiltIns</code> option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the <code>corejs</code> option.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save core-js@2</span><br></pre></td></tr></table></figure>
<h4 id="plugin-transform-runtime"><a href="#plugin-transform-runtime" class="headerlink" title="plugin-transform-runtime"></a>plugin-transform-runtime</h4><h5 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h5><p><a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime">plugin-transform-runtime</a>一个插件，可以重复使用Babel注入的帮助程序代码来节省代码</p>
<p>用于写类库代码而不污染全局变量</p>
<h5 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line">npm install --save @babel/runtime</span><br><span class="line">npm install --save @babel/runtime-corejs2</span><br></pre></td></tr></table></figure>
<h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">				<span class="attr">plugins</span>: [[<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>],&#123;</span><br><span class="line">                    <span class="string">&quot;corejs&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="string">&quot;helpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="string">&quot;regenerator&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="string">&quot;useESModules&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;]</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><h4 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><p>HtmlWebpackPlugin简化了HTML文件的创建，以便为您的webpack包提供服务。 这对于包含文件名中的哈希的webpack包特别有用，它会更改每个编译。 您可以让插件为您生成HTML文件，使用lodash模板提供您自己的模板，或使用您自己的加载器。</p>
<p>生成html并自动将output注入到htmlzhogn </p>
<h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">		<span class="attr">template</span>: <span class="string">&#x27;src/html/index.html&#x27;</span> <span class="comment">// 模板</span></span><br><span class="line">	&#125;)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h3><h4 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h4><p>此插件将CSS提取到单独的文件中。它为每个包含CSS的JS文件创建一个CSS文件。它支持CSS和SourceMaps的按需加载。</p>
<h4 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">module</span>:&#123;</span><br><span class="line">		<span class="attr">rules</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">			<span class="attr">use</span>: [</span><br><span class="line">			<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">			<span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">			<span class="attr">use</span>: [</span><br><span class="line">			<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">				<span class="attr">options</span>: &#123;</span><br><span class="line">					<span class="attr">importLoaders</span>: <span class="number">2</span>, 	</span><br><span class="line">					<span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">		<span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].chunk.css&#x27;</span></span><br><span class="line">	&#125;)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>防止tree shaking</p>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sizeEffects&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;*.css&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="workboxWebpackPlugin"><a href="#workboxWebpackPlugin" class="headerlink" title="workboxWebpackPlugin"></a>workboxWebpackPlugin</h3><h4 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h4><p><a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin">官方文档</a></p>
<p>Workbox provides two webpack plugins: one that generates a complete service worker for you and one that generates a list of assets to precache that is injected into a service worker file.</p>
<p>The plugins are implemented as two classes in the <code>workbox-webpack-plugin</code> module, named <code>GenerateSW</code> and <code>InjectManifest</code>. The answers to the following questions can help you choose the right plugin and configuration to use.</p>
<p>用于在webpack中使用PWA</p>
<h4 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install workbox-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">WorkboxWebpackPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">		<span class="attr">clientsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">skipWaiting</span>: <span class="literal">true</span></span><br><span class="line">	&#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>先安装http-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install http-server -D</span><br></pre></td></tr></table></figure>
<p>输入以启用服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx http-server dist</span><br></pre></td></tr></table></figure>
<p>于<a href="http://localhost:8080/访问该服务">http://localhost:8080/访问该服务</a></p>
<h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><h4 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h4><p><a href="https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional">非官方插件</a>，用于清除制定目录文件下的内容</p>
<h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">	],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h2><h3 id="说明-12"><a href="#说明-12" class="headerlink" title="说明"></a>说明</h3><p>此选项控制是否以及如何生成源映射。</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><p>开发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">//default production to compression</span></span><br><span class="line">	<span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>:<span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">	<span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="WebpackDevServer"><a href="#WebpackDevServer" class="headerlink" title="WebpackDevServer"></a>WebpackDevServer</h2><h3 id="说明-13"><a href="#说明-13" class="headerlink" title="说明"></a>说明</h3><p>webpack-dev-server可用于快速开发应用程序。请参阅开发指南以开始使用。</p>
<h3 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack-dev-server</span><br></pre></td></tr></table></figure>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>devServer.contentBase告诉服务器从哪里提供内容。只有在您想要提供静态文件时才需要这样做</p>
<p>devServer.publicPath将用于确定应该从哪个服务器提供服务，并优先使用</p>
<p>devServer.proxy当您拥有单独的API后端开发服务器并且希望在同一域上发送API请求时，代理某些URL会很有用。</p>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">devServer</span>: &#123;</span><br><span class="line">		<span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">		<span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">		<span class="attr">proxy</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">				<span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">				<span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">                <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">				<span class="attr">bypass</span>: <span class="keyword">function</span>(<span class="params">req, res, proxyOptions</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">accept</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;html&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Skipping proxy for browser request.&#x27;</span>);</span><br><span class="line">						<span class="keyword">return</span> <span class="string">&#x27;/index.html&#x27;</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">    </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h3><p>可用于自启动一个webpack-dev-server</p>
<p>项目目录新建server.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> complier = <span class="title function_">webpack</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">webpackDevMiddleware</span>(complier, &#123;</span><br><span class="line">	<span class="attr">publicPath</span>: config.<span class="property">output</span>.<span class="property">publicPath</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>webpack.config.js中添加publicPath项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
<h3 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h3><h4 id="说明-14"><a href="#说明-14" class="headerlink" title="说明"></a>说明</h4><p>hot启用webpack的热模块替换功能</p>
<p>hot在没有页面刷新的情况下启用热模块替换（请参阅devServer.hot）作为构建失败时的后备</p>
<h4 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">devServer</span>: &#123;</span><br><span class="line">		<span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">		<span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">		<span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">hotOnly</span>: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><h4 id="说明-15"><a href="#说明-15" class="headerlink" title="说明"></a>说明</h4><p>一个插件的WebPack优化\压缩CSS文件。</p>
<h4 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>
<h4 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCSSAssetsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserJSPlugin</span>(&#123;&#125;), <span class="keyword">new</span> <span class="title class_">OptimizeCSSAssetsPlugin</span>(&#123;&#125;)],</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="UglifyjsWebpackPlugin"><a href="#UglifyjsWebpackPlugin" class="headerlink" title="UglifyjsWebpackPlugin"></a>UglifyjsWebpackPlugin</h3><h4 id="说明-16"><a href="#说明-16" class="headerlink" title="说明"></a>说明</h4><p>这个插件使用uglify-js来缩小你的JavaScript。</p>
<h4 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyJsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">UglifyJsPlugin</span>()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree shaking"></a>Tree shaking</h3><h4 id="说明-17"><a href="#说明-17" class="headerlink" title="说明"></a>说明</h4><p>Tree shaking用于JavaScript上下文中常用于消除死代码</p>
<p>Tree shaking只支持ES module的引入，即import，不支持require</p>
<p>mode: ‘production’自带Tree shaking</p>
<p>mode: ‘development’需要配置</p>
<h4 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">		<span class="attr">usedExports</span>: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>package.json 中 sizeEffects 用于免于tree shaking的文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sizeEffects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// &quot;sizeEffects&quot;: [&#x27;@babel/polly-fill&#x27;, &#x27;*.css&#x27;]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Code-Splitting"><a href="#Code-Splitting" class="headerlink" title="Code Splitting"></a>Code Splitting</h3><h4 id="同步代码分割"><a href="#同步代码分割" class="headerlink" title="同步代码分割"></a>同步代码分割</h4><p>需要在webpack.common.js中做optimization的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">		<span class="attr">splitChunks</span>: &#123;</span><br><span class="line">			<span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异步代码分割"><a href="#异步代码分割" class="headerlink" title="异步代码分割"></a>异步代码分割</h4><p>不需要做任何配置，会自动进行代码分割，但是需要安装babel-plugin-dynamic-import-webpack进行ES6转化</p>
<h4 id="babel-plugin-dynamic-import-webpack"><a href="#babel-plugin-dynamic-import-webpack" class="headerlink" title="babel-plugin-dynamic-import-webpack"></a>babel-plugin-dynamic-import-webpack</h4><h5 id="说明-18"><a href="#说明-18" class="headerlink" title="说明"></a>说明</h5><p>非官方</p>
<h5 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-dynamic-import-webpack -D</span><br></pre></td></tr></table></figure>
<h5 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h5><p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	plugins<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dynamic-import-webpack&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="plugin-syntax-dynamic-import"><a href="#plugin-syntax-dynamic-import" class="headerlink" title="plugin-syntax-dynamic-import"></a>plugin-syntax-dynamic-import</h4><h4 id="说明-19"><a href="#说明-19" class="headerlink" title="说明"></a>说明</h4><p>官方</p>
<h5 id="安装-18"><a href="#安装-18" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-syntax-dynamic-import</span><br></pre></td></tr></table></figure>
<h5 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="SplitChunksPlugin"><a href="#SplitChunksPlugin" class="headerlink" title="SplitChunksPlugin"></a>SplitChunksPlugin</h4><h5 id="说明-20"><a href="#说明-20" class="headerlink" title="说明"></a>说明</h5><p>使用前必须安装上述plugin-syntax-dynamic-import</p>
<p>最初，块（以及在其中导入的模块）通过内部webpack图中的父子关系进行连接。CommonsChunkPlugin用于避免跨越它们的重复依赖，但无法进一步优化。</p>
<h4 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h4><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:&quot;lodash&quot; */</span><span class="string">&#x27;lodash&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: _&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">		element.<span class="property">innerHTML</span> = _.<span class="title function_">join</span>([<span class="string">&#x27;Dell&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>], <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> element</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getComponent</span>().<span class="title function_">then</span>(<span class="function"><span class="params">element</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>webpack.common.js，同步的代码会读取到cacheGroups而异步的不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">		<span class="attr">splitChunks</span>: &#123;</span><br><span class="line">			<span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">			<span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">				<span class="attr">vendors</span>: <span class="literal">false</span>,</span><br><span class="line">				<span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：会在dist目录单独生成lodash.js</p>
<p>配置同步代码和异步代码的加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">		<span class="attr">splitChunks</span>: &#123;</span><br><span class="line">			<span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">			<span class="attr">minSize</span>: <span class="number">30000</span>,  <span class="comment">// 代码分割最小大小</span></span><br><span class="line">			<span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,</span><br><span class="line">			<span class="attr">maxInitialRequests</span>: <span class="number">3</span>,</span><br><span class="line">			<span class="attr">automaticNameDelimiter</span>: <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line">			<span class="attr">name</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">				<span class="comment">// 同步引入</span></span><br><span class="line">				<span class="attr">vendors</span>: &#123;</span><br><span class="line">					<span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 把node_modules的文件打包到vendors.js中</span></span><br><span class="line">					<span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">default</span>: &#123;</span><br><span class="line">					<span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">					<span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">filename</span>: <span class="string">&#x27;common.js&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区分development和production打包"><a href="#区分development和production打包" class="headerlink" title="区分development和production打包"></a>区分development和production打包</h2><h3 id="webpack-merge"><a href="#webpack-merge" class="headerlink" title="webpack-merge"></a>webpack-merge</h3><h4 id="安装-19"><a href="#安装-19" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack-merge -D</span><br></pre></td></tr></table></figure>
<p>在文件目录下创建build文件夹</p>
<p>创建webpack.common.js、webpack.dev.js、webpack.prod.js</p>
<h4 id="webpack-commom-js"><a href="#webpack-commom-js" class="headerlink" title="webpack.commom.js"></a>webpack.commom.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CleanWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">	<span class="attr">module</span>: &#123;</span><br><span class="line">		<span class="attr">rules</span>: [</span><br><span class="line">		&#123; </span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">			<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">			<span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">			<span class="attr">use</span>: &#123;</span><br><span class="line">				<span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">				<span class="attr">options</span>: &#123;</span><br><span class="line">					<span class="attr">name</span>: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">					<span class="attr">outputPath</span>: <span class="string">&#x27;images/&#x27;</span>,</span><br><span class="line">					<span class="attr">limit</span>: <span class="number">8192</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|svg|woff)$/</span>,</span><br><span class="line">			<span class="attr">use</span>: &#123;</span><br><span class="line">				<span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">			<span class="attr">use</span>: [</span><br><span class="line">			<span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">			<span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">			<span class="attr">use</span>: [</span><br><span class="line">			<span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">				<span class="attr">options</span>: &#123;</span><br><span class="line">					<span class="attr">importLoaders</span>: <span class="number">2</span>, 	</span><br><span class="line">					<span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">		<span class="attr">template</span>: <span class="string">&#x27;src/html/index.html&#x27;</span></span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">		<span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>) <span class="comment">// 上层目录</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> devConfig =  &#123;</span><br><span class="line">	<span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, </span><br><span class="line">	<span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="attr">devServer</span>: &#123;</span><br><span class="line">		<span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">		<span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">		<span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">proxy</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">				<span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">				<span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">optimization</span>: &#123;</span><br><span class="line">		<span class="attr">usedExports</span>: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(commonConfig, devConfig)</span><br></pre></td></tr></table></figure>
<h4 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">	<span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">	<span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(commonConfig, prodConfig)</span><br></pre></td></tr></table></figure>
<h3 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h3><h4 id="dev-amp-amp-build"><a href="#dev-amp-amp-build" class="headerlink" title="dev &amp;&amp; build"></a>dev &amp;&amp; build</h4><p>package.json中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --config ./build/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./build/webpack.prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="analyse"><a href="#analyse" class="headerlink" title="analyse"></a>analyse</h4><h5 id="使用-7"><a href="#使用-7" class="headerlink" title="使用"></a>使用</h5><p><a href="https://github.com/webpack/analyse">参见官网</a></p>
<p>package.json中加入scripts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;analyse&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --profile --json &gt; stats.json --config ./build/webpack.dev.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>打开<a href="http://webpack.github.io/analyse/">分析网站</a>或者<a href="http://alexkuz.github.io/webpack-chart/">webpack-chart</a>，将项目下生成的stat.json文件上传，更多分析工具看<a href="https://webpack.js.org/guides/code-splitting/#bundle-analysis">这里</a></p>
<h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><h3 id="安装-20"><a href="#安装-20" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eslint -D</span><br><span class="line">npm install eslint-loader -D</span><br></pre></td></tr></table></figure>
<h3 id="快速初始化"><a href="#快速初始化" class="headerlink" title="快速初始化"></a>快速初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>
<h3 id="使用-8"><a href="#使用-8" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">module</span>: &#123;</span><br><span class="line">		<span class="attr">rules</span>: [</span><br><span class="line">		&#123; </span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </span><br><span class="line">			<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </span><br><span class="line">			<span class="attr">use</span>: [<span class="string">&quot;babel-loader&quot;</span>, &#123;</span><br><span class="line">				<span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">				<span class="attr">options</span>: &#123;</span><br><span class="line">					<span class="attr">fix</span>: <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="git钩子做eslint"><a href="#git钩子做eslint" class="headerlink" title="git钩子做eslint"></a>git钩子做eslint</h3><h4 id="安装-21"><a href="#安装-21" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="使用-9"><a href="#使用-9" class="headerlink" title="使用"></a>使用</h4><p>package.json中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint-fix&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">  	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>当执行commit的时候会先执行npm run lint-fix</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="Preloading-amp-amp-Prefetching"><a href="#Preloading-amp-amp-Prefetching" class="headerlink" title="Preloading &amp;&amp; Prefetching"></a>Preloading &amp;&amp; Prefetching</h3><h4 id="说明-21"><a href="#说明-21" class="headerlink" title="说明"></a>说明</h4><p>webpack推荐的一种代码分离异步加载的方式</p>
<h4 id="使用-10"><a href="#使用-10" class="headerlink" title="使用"></a>使用</h4><p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true*/</span> <span class="string">&#x27;./js/click.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: func&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="title function_">func</span>();</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>click.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">	element.<span class="property">innerHTML</span> = <span class="string">&#x27;Dell Lee&#x27;</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleClick;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>front end</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>npm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器集成anaconda安装jupyter notebook</title>
    <url>/2019/04/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E6%88%90anaconda%E5%AE%89%E8%A3%85jupyter-notebook/</url>
    <content><![CDATA[<h1 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h1><p>在<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&amp;O=D">清华大学开源软件镜像网</a>找到合适的下载软件包</p>
<p><img src="/2019/04/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E6%88%90anaconda%E5%AE%89%E8%A3%85jupyter-notebook/1.png" alt="1"></p>
<span id="more"></span>
<h2 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.03-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<h2 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash Anaconda3-2019.03-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>安装完成后将anaconda加入环境变量，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>打开配置文件，在最后添加，xxx为你的用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/XXX/anaconda3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>执行更新配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="检查安装成功"><a href="#检查安装成功" class="headerlink" title="检查安装成功"></a>检查安装成功</h2><p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anaconda -h</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure>
<p>检查安装成功</p>
<h1 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter --version</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="进入ipython"><a href="#进入ipython" class="headerlink" title="进入ipython"></a>进入ipython</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipython</span><br></pre></td></tr></table></figure>
<h3 id="生成密码sha"><a href="#生成密码sha" class="headerlink" title="生成密码sha"></a>生成密码sha</h3><p>输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">In [<span class="number">2</span>]: passwd()</span><br><span class="line"><span class="comment"># enter your password</span></span><br><span class="line"><span class="comment"># repeat yoru password</span></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;sha1:xxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure>
<p>将密码记录下来，退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: exit()</span><br></pre></td></tr></table></figure>
<h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Writing default config to: /home/xxx/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>编辑文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /home/xxx/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<p>写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip = <span class="string">&#x27;*&#x27;</span> <span class="comment"># 允许访问此服务器的 IP，星号表示任意 IP</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">&#x27;sha1:xxx:xxx&#x27;</span> <span class="comment"># 之前生成的密码 hash 字串</span></span><br><span class="line">c.NotebookApp.open_browser = False <span class="comment"># 运行时不打开本机浏览器</span></span><br><span class="line">c.NotebookApp.port = 12035 <span class="comment"># 使用的端口，随意设置</span></span><br><span class="line">c.NotebookApp.enable_mathjax = True <span class="comment"># 启用 MathJax</span></span><br><span class="line">c.NotebookApp.allow_remote_access = True <span class="comment"># 允许远程访问</span></span><br></pre></td></tr></table></figure>
<p>退出</p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>
<p>记得配置服务器的安全组</p>
<h3 id="服务器后台启动服务"><a href="#服务器后台启动服务" class="headerlink" title="服务器后台启动服务"></a>服务器后台启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --allow-root &amp;</span><br></pre></td></tr></table></figure>
<h3 id="查看端口号占用进程"><a href="#查看端口号占用进程" class="headerlink" title="查看端口号占用进程"></a>查看端口号占用进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 80</span><br></pre></td></tr></table></figure>
<h3 id="杀死某个端口进程命令"><a href="#杀死某个端口进程命令" class="headerlink" title="杀死某个端口进程命令"></a>杀死某个端口进程命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fuser -k -n tcp 80</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
        <tag>anaconda</tag>
        <tag>ml</tag>
        <tag>dm</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts使用相关</title>
    <url>/2019/04/08/echarts%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="在Hexo中使用echarts"><a href="#在Hexo中使用echarts" class="headerlink" title="在Hexo中使用echarts"></a>在Hexo中使用echarts</h1><p>使用插件<a href="https://github.com/kchen0x/hexo-tag-echarts3">hexo-tag-echarts3</a>，该插件已经被收录到<a href="https://echarts.baidu.com/">echart</a>的插件中</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-tag-echarts --save</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% echarts 400 &#x27;85%&#x27; %&#125;</span><br><span class="line">\\TODO echarts option goes here</span><br><span class="line">&#123;% endecharts %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>在所用主题目录下<code>&lt;font color=#c7254e&gt;layout\_partial&lt;/font&gt;中的</code><font color="#c7254e">head.swig</font>里加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://echarts.baidu.com/dist/echarts.common.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><div id="echarts2779" style="width: 85%;height: 400px;margin: 0 auto"></div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts2779'));

        // 指定图表的配置项和数据
        var option = {
    tooltip : {
        trigger: 'axis',
        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
            type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
        }
    },
    legend: {
        data:['利润', '支出', '收入']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    xAxis : [
        {
            type : 'value'
        }
    ],
    yAxis : [
        {
            type : 'category',
            axisTick : {show: false},
            data : ['周一','周二','周三','周四','周五','周六','周日']
        }
    ],
    series : [
        {
            name:'利润',
            type:'bar',
            itemStyle : {
                normal: {
                    label: {show: true, position: 'inside'}
                }
            },
            data:[200, 170, 240, 244, 200, 220, 210]
        },
        {
            name:'收入',
            type:'bar',
            stack: '总量',
            itemStyle: {
                normal: {
                    label : {show: true}
                }
            },
            data:[320, 302, 341, 374, 390, 450, 420]
        },
        {
            name:'支出',
            type:'bar',
            stack: '总量',
            itemStyle: {normal: {
                label : {show: true, position: 'left'}
            }},
            data:[-120, -132, -101, -134, -190, -230, -210]
        }
    ]
};

        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<span id="more"></span>
<p><strong>代码</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% echarts 400 &#x27;85%&#x27; %&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    tooltip : &#123;</span></span><br><span class="line"><span class="code">        trigger: &#x27;axis&#x27;,</span></span><br><span class="line"><span class="code">        axisPointer : &#123;            // 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line"><span class="code">            type : &#x27;shadow&#x27;        // 默认为直线，可选为：&#x27;line&#x27; | &#x27;shadow&#x27;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    legend: &#123;</span></span><br><span class="line"><span class="code">        data:[&#x27;利润&#x27;, &#x27;支出&#x27;, &#x27;收入&#x27;]</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    grid: &#123;</span></span><br><span class="line"><span class="code">        left: &#x27;3%&#x27;,</span></span><br><span class="line"><span class="code">        right: &#x27;4%&#x27;,</span></span><br><span class="line"><span class="code">        bottom: &#x27;3%&#x27;,</span></span><br><span class="line"><span class="code">        containLabel: true</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    xAxis : [</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            type : &#x27;value&#x27;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line"><span class="code">    yAxis : [</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            type : &#x27;category&#x27;,</span></span><br><span class="line"><span class="code">            axisTick : &#123;show: false&#125;,</span></span><br><span class="line"><span class="code">            data : [&#x27;周一&#x27;,&#x27;周二&#x27;,&#x27;周三&#x27;,&#x27;周四&#x27;,&#x27;周五&#x27;,&#x27;周六&#x27;,&#x27;周日&#x27;]</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    ],</span></span><br><span class="line"><span class="code">    series : [</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            name:&#x27;利润&#x27;,</span></span><br><span class="line"><span class="code">            type:&#x27;bar&#x27;,</span></span><br><span class="line"><span class="code">            itemStyle : &#123;</span></span><br><span class="line"><span class="code">                normal: &#123;</span></span><br><span class="line"><span class="code">                    label: &#123;show: true, position: &#x27;inside&#x27;&#125;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;,</span></span><br><span class="line"><span class="code">            data:[200, 170, 240, 244, 200, 220, 210]</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            name:&#x27;收入&#x27;,</span></span><br><span class="line"><span class="code">            type:&#x27;bar&#x27;,</span></span><br><span class="line"><span class="code">            stack: &#x27;总量&#x27;,</span></span><br><span class="line"><span class="code">            itemStyle: &#123;</span></span><br><span class="line"><span class="code">                normal: &#123;</span></span><br><span class="line"><span class="code">                    label : &#123;show: true&#125;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;,</span></span><br><span class="line"><span class="code">            data:[320, 302, 341, 374, 390, 450, 420]</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            name:&#x27;支出&#x27;,</span></span><br><span class="line"><span class="code">            type:&#x27;bar&#x27;,</span></span><br><span class="line"><span class="code">            stack: &#x27;总量&#x27;,</span></span><br><span class="line"><span class="code">            itemStyle: &#123;normal: &#123;</span></span><br><span class="line"><span class="code">                label : &#123;show: true, position: &#x27;left&#x27;&#125;</span></span><br><span class="line"><span class="code">            &#125;&#125;,</span></span><br><span class="line"><span class="code">            data:[-120, -132, -101, -134, -190, -230, -210]</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    ]</span></span><br><span class="line"><span class="code">&#125;;</span></span><br><span class="line"><span class="code">&#123;% endecharts %&#125;</span></span><br></pre></td></tr></table></figure>
<p>for more information, see <a href="https://kchen.cc/2016/11/05/echarts-in-hexo/">KChen’s Blog</a></p>
<h1 id="在webpack中使用echarts"><a href="#在webpack中使用echarts" class="headerlink" title="在webpack中使用echarts"></a>在webpack中使用echarts</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install echarts --save</span><br></pre></td></tr></table></figure>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>echarts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 1000px;height:800px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>main.js </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line">myChart.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><h3 id="普通地图"><a href="#普通地图" class="headerlink" title="普通地图"></a>普通地图</h3><p>如china.js</p>
<p>虽然<a href="https://echarts.baidu.com/download-map.html">echart官网</a>暂不提供地图下载：</p>
<p>ECharts 之前提供下载的矢量地图数据来自第三方，由于部分数据不符合国家《测绘法》规定，目前暂时停止下载服务。</p>
<p>建议大家使用以百度地图为底图的形式，参考实例：<a href="https://echarts.baidu.com/demo.html#map-polygon">https://echarts.baidu.com/demo.html#map-polygon</a></p>
<p>但是我们仍然能够从找到<font color="#c7254e">.\node_modules\echarts\map\js</font> </p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> china = <span class="built_in">require</span>(<span class="string">&#x27;echarts/map/js/china&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="attr">geo</span>: &#123;</span><br><span class="line">        <span class="attr">map</span>: <span class="string">&#x27;china&#x27;</span>, <span class="comment">//一定要用字符串</span></span><br><span class="line">        <span class="attr">roam</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">center</span>: [<span class="number">101.497781</span>, <span class="number">31.26871</span>],</span><br><span class="line"></span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">            <span class="attr">normal</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&#x27;#323c48&#x27;</span>,</span><br><span class="line">                <span class="attr">borderColor</span>: <span class="string">&#x27;#111&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                <span class="attr">areaColor</span>: <span class="string">&#x27;#2a333d&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2019/04/08/echarts%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/1.png" alt="1"></p>
<h3 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h3><h4 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h4><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/extension/bmap/bmap&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=你的AK&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>AK的获取见<a href="http://lbsyun.baidu.com/index.php?title=jspopular/guide/getkey">百度开放平台</a></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="attr">bmap</span>: &#123;</span><br><span class="line">        <span class="attr">center</span>: [<span class="number">101.497781</span>, <span class="number">31.26871</span>],</span><br><span class="line">        <span class="attr">roam</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="/2019/04/08/echarts%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>echarts</tag>
        <tag>hexo</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>SVM详细推导及拉格朗日对偶性思考</title>
    <url>/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>最近在阅读机器学习西瓜书SVM(Support Vector Mechine)部分的时候，其目标函数使用了拉格朗日乘子法并将其转化为拉格朗日对偶性问题进行求解，并且在后面引入软间隔的SVM也使用了同样的方法，因此自己在网上查阅了相关的资料对其原理进行探索，最后整理在下文。</p>
<span id="more"></span>
<h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/blog\source\_posts\2019-04-03-拉格朗日乘子法及对偶性问题思考\2.png" alt="2"></p>
<h2 id="原始问题"><a href="#原始问题" class="headerlink" title="原始问题"></a>原始问题</h2><p>SVM尝试在给定样本集$D={(x_1, y_1),(x_2, y_2),…,(x_m, y_m)}, y_i\in${-1,+1}中找到一个划分超平面，将不同类别的样本分开，如下图：</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/20180501210333567.jpg" alt="20180501210333567"></p>
<p>​    根据结构风险最小化的原则，显然上图的红色的线是最好的划分超平面，因为该超平面所产生的分类是最鲁棒的，对未知样本的泛化能力最强。</p>
<p>​    在样本空间中，划分超平面可通过如下线性方程来描述：</p>
<script type="math/tex; mode=display">
\omega^Tx+b=0 \tag{1}</script><p>在二维的情况下，超平面就是一条直线，令$w=[a,b]. x=[x,y], b=c$，因此线性方程为 $ax+by+c=0$ </p>
<p>“其中$w=(w_1;w_2,;…;w_d)$为法向量，决定了超平面的方向；b为位移项，决定了超平面与原点之间的距离。显然，划分超平面可被法向量 $w$和 位移 $b$ 确定，下面我们将其记为$(w,b)$，样本空间中任意点 $x$ 到超平面 $(w,b)$ 的距离可写为:</p>
<script type="math/tex; mode=display">
r=\frac{\mid w^Tx+b \mid}{\parallel w \parallel}\tag{2}</script><p>在二维的情况下，$\parallel w \parallel =\sqrt{a^2+b^2} $。</p>
<p>假设超平面$(w,b)$能将训练样本正确分类，即对任意$(x_i,y_i) \in D$，若$y_i=+1$则有$w^Tx_i+b&gt;0$；若$y_i=-1$，则有$w^Tx_i+b&lt;0$。令：</p>
<script type="math/tex; mode=display">
\begin{cases}
    w^Tx_i+b\ge+1,&y_i=+1 \\
    w^Tx_i+b\le-1,&y_i=-1
\end{cases}
\tag{3}</script><p>换句话说，在分类正确的情况下，分类为 $+1$ 的样本$(x_i,y_i)$应该满足$w^Tx_i+b\ge+1$，分类为 $-1$ 的样本$(x_i,y_i)$应该满足$w^Tx_i+b\le-1$。如下图中距离超平面最近的几个训练样本 $\oplus$ 和 $\ominus$ 能使上式成立，它们被称为“支持向量”(support vector)，两个异类支持向量到超平面的距离之和为：</p>
<script type="math/tex; mode=display">
\gamma=\frac{2}{\parallel \omega \parallel} \tag{4}</script><p>它们被称为间隔(margin)。</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/1.png" alt="1"></p>
<p>为了找到具有“最大间隔”(maximum margin)的划分超平面，也就是要找到能满足式(3)中约束的参数 $\omega$ 和 $b$ ，使得 $\gamma$ 最大，即：</p>
<script type="math/tex; mode=display">
\begin{align*}
&\max_{\omega,b} \frac{2}{\parallel \omega \parallel} \\
&s.t \  \ \ \ y_i(\omega^Tx_i+b) \ge1, \ i=1,2,...,m
\end{align*}
\tag{5}</script><p>等价于：</p>
<script type="math/tex; mode=display">
\begin{align*}
&\min_{\omega,b}\frac{1}{2} \parallel \omega \parallel^2 \\
&s.t \  \ \ \ y_i(\omega^Tx_i+b) \ge1, \ i=1,2,...,m
\end{align*}
\tag{6}</script><p>这就是支持向量机(Support Vector Machine，SVM)的基本型。</p>
<p>对于线性不可分的训练数据集，可以对每个样本点 <script type="math/tex">(x_i, y_i)</script> 引进一个松弛变量 <script type="math/tex">\xi_i</script>，使得原问题的目标函数变为：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_{\omega,b,\xi}\;&\frac{1}{2}||\omega||^2+C\sum_{i=1}^n\xi_i\\
s.t.\;\;&y_i(\omega x_i+b)\ge 1-\xi_i,\;\;i=1,2,...,n\\
&\xi_i\ge0,\;\;i=1,2,...,n
\end{align*}
\tag{7}</script><p>其中，<script type="math/tex">C\gt0</script> 称为惩罚参数，<script type="math/tex">C</script> 值大时对误分类的惩罚增大，<script type="math/tex">C</script> 值小时对误分类的惩罚减小。用于调和两者的系数，我们希望求解<script type="math/tex">(7)</script>得到最大间隔划分超平面所对应的模型：</p>
<script type="math/tex; mode=display">
f(x)=\omega^Tx+b
\tag{8}</script><p>其中 $\omega$ 和 $b$ 是模型的参数，虽然能够直接使用现成的优化计算包求解，但是我们可以使用更加高效的方法，就是使用拉格朗日乘子法得到其“对偶问题”。</p>
<h2 id="对偶问题"><a href="#对偶问题" class="headerlink" title="对偶问题"></a>对偶问题</h2><p>对于式<script type="math/tex">(8)</script>每条约束添加拉格朗日乘子$\alpha_i\ge0, \mu_i\ge0$，那么该问题的拉格朗日函数可写为：</p>
<script type="math/tex; mode=display">
L(\omega,b,\xi,\alpha,\mu)=\frac{1}{2}\parallel\omega\parallel^2+C\sum_{i=1}^n\xi_i+ \sum_{i=1}^{n}\alpha_i(1-\xi_i-y_i(\omega^Tx_i+b))-\sum_{i=1}^n\mu_i\xi_i
\tag{9}</script><p>考虑函数：</p>
<script type="math/tex; mode=display">
\theta_P(x)=\max_{\alpha\ge0,\mu\ge0}L(\omega,b,\xi,\alpha,\mu)\tag{10}</script><p>其中 $P$ 为原始问题，如果存在某个 <script type="math/tex">\xi_i\lt0</script>，那么可令其对应的 <script type="math/tex">\mu_i\rightarrow +\infty</script> 使得  <script type="math/tex">\theta_P(x)\rightarrow +\infty</script>，如果存在某个 <script type="math/tex">x_i</script> 和 <script type="math/tex">\xi_i</script> 使得 <script type="math/tex">1-\xi_i-y_i(\omega^Tx_i+b)\gt0</script>，那么可令其对应的 <script type="math/tex">\alpha_i\rightarrow +\infty</script> 使得 <script type="math/tex">\theta_P(x)\rightarrow +\infty</script>，此有：</p>
<script type="math/tex; mode=display">
\theta_P(x)=
\begin{cases}
f(x),\;\;x满足原始问题约束\\
+\infty,\;\;其他\tag{11}
\end{cases}</script><p>上述式子说明了如果满足约束，最大化问题和原始问题是一致的。</p>
<p>所以如果再考虑极小化问题</p>
<script type="math/tex; mode=display">
\min_{\omega,b,\xi}\theta_P(x)=\min_{\omega,b,\xi}\max_{\alpha\ge0,\mu\ge0}L(\omega,b,\xi,\alpha,\mu)\tag{12}</script><p>他与原始问题<script type="math/tex">(7)</script>是等价的。</p>
<p>原命题将转化为一个$p$*的问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
    \min_{\omega,b,\xi}\;&\frac{1}{2} \parallel \omega \parallel^2+C\sum_{i=1}^n\xi_i\\
    &=\min_{\omega,b,\xi}{\theta_P(x)},x满足原始问题约束\\
    &=\min_{\omega,b,\xi}{\max_{\alpha\ge0,\mu\ge0}{L(\omega,b,\xi,\alpha,\mu)}} = p^*
\end{align*}
\tag{13}</script><p>但其实这仍然是一个很难解决的问题，因为我们要先解决含有不等式约束 $\alpha$ 的最大化问题，然后再在 $x$ 上求最小值。如果能将其转化为先求 $x$ 上的最小值，再解决关于 $\alpha$ 的不等式约束的最大化问题就比较简单，即 $d$*</p>
<script type="math/tex; mode=display">
\min_{\alpha\ge0,\mu\ge0}{\max_{\omega,b,\xi}{L(\omega,b,\xi,\alpha,\mu)}} = d^* \tag{14}</script><p>$d$* 就是 $p$* 的对偶性问题，但是常规情况下 $d$*$\le$$p$*，这叫弱对偶性质(Week Duality)，举个真实的栗子方便记忆：</p>
<script type="math/tex; mode=display">
\begin{align*}
    if\ f(x,y)=sin(x+y) \\
    \min_{y}{\max_{x}{f(x,y)}} &= -1 \\
    \max_{x}{\min_{y}{f(x,y)}} &= 1 \\
    if\ f(x,y)=sin(x)+sin(y) \\
    \min_{y}{\max_{x}{f(x,y)}} &=\max_{x}{\min_{y}{f(x,y)}}= 0 \\
    thus, we\ have\ d^*\le p^*
\end{align*} \\\tag{15}</script><p>对偶间隙 $d$* $-$ $p$* 在满足$Slater$定理的时候间隙会消失，使$d$* $=$ $p$*，即强对偶性质(strong Duality)。根据<a href="https://blog.csdn.net/feilong_csdn/article/details/62427148">这篇文章</a>即</p>
<ol>
<li>原始问题是凸函数</li>
<li>约束条件是线性约束</li>
<li>满足KKT条件</li>
</ol>
<p>是故原问题将转化为其对偶问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
    \min_{\omega,b,\xi}&\frac{1}{2} \parallel \omega \parallel^2+C\sum_{i=1}^n\xi_i\\
    &=\min_{\omega,b}{\max_{\alpha}{L(\omega,b,\xi,\alpha,\mu)}} = p^* \\
    &=\max_{\alpha}{\min_{\omega,b}{L(\omega,b,\xi,\alpha,\mu)}} = d^* \\
    s.t\ &\sum_{i=1}^{n}a_iy_i=0 \\
    & 0\le a_i\le C, \ i=1,2,..,n
\end{align*}
\tag{16}</script><p>首先优化内部的拉格朗日方程：</p>
<script type="math/tex; mode=display">
L(\omega,b,\xi,\alpha,\mu)=\frac{1}{2}\parallel\omega\parallel^2+C\sum_{i=1}^n\xi_i+ \sum_{i=1}^{n}\alpha_i(1-\xi_i-y_i(\omega^Tx_i+b))-\sum_{i=1}^n\mu_i\xi_i
\tag{17}</script><p>令$L(\omega,b,\xi,\alpha,\mu)$对 $\omega$ 、 $b$ 和 <script type="math/tex">\xi</script> 的偏导为零可得到：</p>
<script type="math/tex; mode=display">
\frac{\partial L}{\partial \omega}=\omega-\sum_{i=1}^{m}a_iy_ix_i=0
\Rightarrow
\omega=\sum_{i=1}^{m}a_iy_ix_i \\
\tag{18}</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial b}=0
\Rightarrow
\sum_{i=1}^{m}a_iy_i=0
\tag{19}</script><script type="math/tex; mode=display">
\frac{\partial L}{\partial \xi}=0\Rightarrow C-\alpha_i-\mu_i=0\tag{20}</script><p>注意上式的 $m$ 是样本数量而不是特征维度，第 $i$ 个样本的 $x=(x_1;x_2,…,x_d)$，$d$ 才是样本特征的维度。</p>
<p>将<script type="math/tex">(18)</script>、<script type="math/tex">(19)</script>和<script type="math/tex">(20)</script>代入<script type="math/tex">(17)</script>得</p>
<script type="math/tex; mode=display">
\begin{align*}
   \min_{\omega,b,\xi}{L(\omega,b,\xi,\alpha,\mu)}
   =&\frac{1}{2}\parallel\omega\parallel^2+C\sum_{i=1}^n\xi_i+ \sum_{i=1}^{n}\alpha_i(1-\xi_i-y_i(\omega^Tx_i+b))-\sum_{i=1}^n\mu_i\xi_i\\
   =&\frac{1}{2}\sum_{i=1}^{m}a_iy_ix_i\sum_{j=1}^{m}a_jy_jx_j+\sum_{i=1}^{m}\alpha_i(1-y_i(\sum_{j=1}^{m}a_jy_jx_j)^Tx_i+b)) \\ 
   =&\frac{1}{2}\sum_{i=1}^{m}\sum_{j=1}^{m}a_ia_jy_iy_jx_i^Tx_j+\sum_{i=1}^{m}\alpha_i-\sum_{i=1}^{m}\sum_{j=1}^{m}a_ia_jy_iy_jx_i^Tx_j+\sum_{i=1}^{m}\alpha_iy_ib \\
   =&\sum_{i=1}^{m}\alpha_i-\frac{1}{2}\sum_{i=1}^{m}\sum_{j=1}^{m}a_ia_jy_iy_jx_i^Tx_j
\end{align*}
\tag{21}</script><p>分析式$(15)$，其中<script type="math/tex">\alpha=(\alpha_1;\alpha_2;...;\alpha_m)\ge0</script>，而 <script type="math/tex">1-y_i(\omega^Tx_i+b))\le0</script>，所以对于后面这一项<script type="math/tex">\sum_{i=1}^{m}\alpha_i(1-y_i(\omega^Tx_i+b))</script>的最大值为 $0$，为了最小化该拉格朗日方程，因此要令<script type="math/tex">\alpha</script>尽可能地大，所以再对 <script type="math/tex">\min_{\omega,b,\xi}{L(\omega,b,\xi,\alpha,\mu)}</script> 求 <script type="math/tex">\alpha</script> 的极大，即得对偶问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
\max_{\alpha}&\;L(\omega,b,\xi,\alpha,\mu)=\sum_{i=1}^{m}\alpha_i-\frac{1}{2}\sum_{i=1}^{m}\sum_{j=1}^{m}a_ia_jy_iy_jx_i^Tx_j \\
s.t.&\;\sum_{i=1}^m\alpha_iy_i=0\\
&C-\alpha_i-\mu_i=0\\
&\alpha_i\ge0,\;\;\mu_i\ge0,\;\;i=1,2,...,n
\end{align*}
\tag{22}</script><p>利用约束等式消去 <script type="math/tex">\mu_i</script>，从而留下最终约束 <script type="math/tex">\alpha_i</script>，约束变为 <script type="math/tex">0\le\alpha_i\le C</script>。</p>
<h2 id="SMO算法"><a href="#SMO算法" class="headerlink" title="SMO算法"></a>SMO算法</h2><p>上述问题为求解凸二次规划问题，这样的问题具有全局最优解，但是由于当训练样本容量很大时，现在的最优化算法往往非常低效，因此使用序列最小最优化算法(sequential minimal optimization, SMO)来求解这个问题，这是一种启发式的算法。SMO每次选择两个变量，固定其他变量，针对这两个变量构建一个二次规划问题。这个二次规划问题关于这两个变量的解应该更接近原始二次规划问题的解，因为这会使得原始二次规划问题的目标函数值变得更小。更重要的是，这是子问题可以通过解析方法求得，这样就可以大大提高整个算法的计算速度。子问题有两个变量，一个是违反KKT条件最严重的哪一个，另一个由约束条件自动确定。如此，SMO算法将原问题不断分解为子问题并对子问题求解，进而达到求解原问题的目的。其包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。</p>
<h3 id="两个变量二次规划的求解方法"><a href="#两个变量二次规划的求解方法" class="headerlink" title="两个变量二次规划的求解方法"></a>两个变量二次规划的求解方法</h3><p>对于SVM我们优化下述问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_{\alpha}&\;L(\omega,b,\alpha)=\frac{1}{2}\sum_{i=1}^{n}\sum_{j=1}^{n}a_ia_jy_iy_jK(x_i,x_j) -\sum_{i=1}^{n}\alpha_i\\\
s.t.&\;\sum_{i=1}^n\alpha_iy_i=0\\
&\;0\le\alpha_i\le C,\;\;i=1,2,...,n
\end{align*}
\tag{23}</script><p>其中 <script type="math/tex">K(x_i,x_j)</script> 为核函数。</p>
<p>那么SMO的最优化问题的子问题可以写成：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_{\alpha_1,\alpha_2}W(\alpha_1,\alpha_2)=
\frac{1}{2}(\alpha_1y_1\alpha_1y_1K_{11}
+\alpha_2y_2\alpha_2y_2K_{22}
+2\alpha_1y_1\alpha_2y_2K_{12}\\
+2\sum_{i=3}^n \alpha_1y_1\alpha_iy_iK_{1i}
+2\sum_{i=3}^n \alpha_2y_2\alpha_iy_iK_{2i}
+\sum_{i=3}^n\sum_{j=3}^n\alpha_iy_i\alpha_jy_jK_{ij})-(\alpha_1+\alpha_2+\sum_{i=3}^n\alpha_i)  
\end{align*}
\tag{24}</script><p>其中 <script type="math/tex">\sum_{i=3}^n\sum_{j=3}^n\alpha_iy_i\alpha_jy_jK_{ij})</script> 和 <script type="math/tex">\sum_{i=3}^n\alpha_i</script> 为常数项，所以子问题可以简化为：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_{\alpha_1,\alpha_2}W(\alpha_1,\alpha_2)=
\frac{1}{2}\alpha_1^2y_1^2K_{11}
&+\frac{1}{2}\alpha_2^2y_2^2K_{22}
+\alpha_1y_1\alpha_2y_2K_{12}
\\
&+\alpha_1y_1\sum_{i=3}^n \alpha_iy_iK_{1i}
+\alpha_2y_2\sum_{i=3}^n \alpha_iy_iK_{2i}
-(\alpha_1+\alpha_2)\\
s.t.\;\;&\alpha_1y_1+\alpha_2y_2=-\sum_{i=3}^ny_i\alpha_i=\zeta \\ 
&0\le\alpha_i\le C,\;\;i=1,2
\end{align*}
 \tag{25}</script><p>因为 <script type="math/tex">y_1=1</script> 或 <script type="math/tex">-1</script>，由约束 <script type="math/tex">\alpha_1y_1+\alpha_2y_2=C</script> 得：</p>
<script type="math/tex; mode=display">
\begin{align*}
\alpha_1y_1=(\zeta-\alpha_2y_2)\\
\alpha_1=y_1(\zeta-\alpha_2y_2) 
\end{align*}
\tag{26}</script><p>将该式带入式 <script type="math/tex">(21)</script>，并消去 <script type="math/tex">y_i^2</script>，得：</p>
<script type="math/tex; mode=display">
\begin{align*}
W(\alpha_2)=
\frac{1}{2}(\zeta-\alpha_2y_2)^2K_{11}
&+\frac{1}{2}\alpha_2^2K_{22}
+(\zeta-\alpha_2y_2)\alpha_2y_2K_{12}
\\
&+(\zeta-\alpha_2y_2)\sum_{i=3}^n\alpha_iy_iK_{1i}
+\alpha_2y_2\sum_{i=3}^n\alpha_iy_iK_{2i}
-y_1(\zeta-\alpha_2y_2)-\alpha_2
\end{align*}
\tag{27}</script><p>进行求导得：</p>
<script type="math/tex; mode=display">
\begin{align*}
\frac{\partial W}{\partial\alpha_2}
=-y_2(\zeta-\alpha_2y_2)K_{11}
&+\alpha_2K_{22}
+(\zeta-2\alpha_2y_2)y_2K_{12}
\\
&-y_2\sum_{i=3}^n\alpha_iy_kK_{1i}
+y_2\sum_{i=3}^n\alpha_iy_iK_{2i}+y_1y_2-1=0
\end{align*}
\tag{25}</script><p>整理上式得：</p>
<script type="math/tex; mode=display">
\begin{align*}
\alpha_2(K_{11}+K_{22}-2K_{12})
&=\zeta y_2K_{11}
-\zeta y_2K_{12}
+y_2\sum_{i=3}^n\alpha_iy_kK_{1i}
-y_2\sum_{i=3}^n\alpha_iy_iK_{2i}
+1-y_1y_2\\
&=y_2(\zeta K_{11}-\zeta K_{12}+\sum_{i=3}^n\alpha_iy_kK_{1i}-\sum_{i=3}^n\alpha_iy_iK_{2i}+y_2-y_1)
\end{align*}\tag{26}</script><p>因为 <script type="math/tex">\alpha_i</script> 更新前后都要满足约束<script type="math/tex">\varsigma=\alpha_1y_1+\alpha_2y_2</script>，所以将<script type="math/tex">\varsigma=\alpha^{old}_1y_1+\alpha_2^{old}y_2</script> 代入式 <script type="math/tex">(26)</script> 得：</p>
<script type="math/tex; mode=display">
\begin{align*}
\alpha_2^{new,unc}(K_{11}+K_{22}-2K_{12})
&=y_2(\zeta K_{11}-\zeta K_{12}+\sum_{i=3}^n\alpha_iy_iK_{1i}-\sum_{i=3}^n\alpha_iy_iK_{2i}+y_2-y_1)\\
&=y_2(\alpha^{old}_1y_1K_{11}+\alpha_2^{old}y_2K_{11}-\alpha^{old}_1y_1K_{12}-\alpha_2^{old}y_2K_{12}\\
&\;\;\;\;\;\;\;\;\;\;\;\;\;+(\sum_{i=1}^n\alpha_iy_iK_{1i}-y_1-\alpha_1^{old}y_1K_{11}-\alpha_2^{old}y_2K_{12})\\
&\;\;\;\;\;\;\;\;\;\;\;\;\;-(\sum_{i=1}^n\alpha_iy_iK_{2i}-y_2-\alpha_1^{old}y_1K_{12}-\alpha_2^{old}y_2K_{22}))\\
&=y_2((K_{11}+K_{22}-2K_{12})\alpha_2^{old}y_2
+(\sum_{i=1}^n\alpha_iy_iK_{1i}-y_1)
-(\sum_{i=1}^n\alpha_iy_iK_{2i}-y_2))
\end{align*}
\tag{28}</script><p>令<script type="math/tex">\mu=K_{11}+K_{22}-2K_{12}=||\Phi(x_1)-\Phi(x_2)||,\;E_j=\sum_{i=1}^n\alpha_iy_iK_{1i}-y_j</script> ，其中<script type="math/tex">\Phi(x)</script> 是输入空间到特征空间的映射，得：</p>
<script type="math/tex; mode=display">
\alpha_2^{new,unc}=\alpha_2^{old}+\frac{y_2(E_1-E_2)}{\mu}
\tag{29}</script><p>上式是最优化问题 <script type="math/tex">(21)</script> 沿着约束方向未经剪辑即未考虑不等式约束时 <script type="math/tex">\alpha_2</script> 的最优解 <script type="math/tex">\alpha_2^{new,unc}</script>；然后再求剪辑后 <script type="math/tex">\alpha_2</script> 的解 <script type="math/tex">\alpha_2^{new}</script>：</p>
<script type="math/tex; mode=display">
a_2^{new}=
\begin{cases}
H,&a_2^{new,unc}\gt H\\
a_2^{new,unc},&L\le\alpha_2^{new,unc}\le H\\
L,&\alpha_2^{new,unc}\lt L
\end{cases}
\\
\tag{30}
\begin{align*}
&L=\max{(0,\alpha_2^{old}-\alpha_1^{old})},\;\;&&H=\min{(C,C+\alpha_2^{old}-\alpha_1^{old})}\;\;&if\;y_1\ne y_2\\
&L=\max(0,\alpha_2^{old}+\alpha_1^{old}-C),\;\;&&H=\min(C,\alpha_2^{old}+\alpha_1^{old})\;\;&if\;y_1=y_2\\
或者写成：\\
&L=\max(0,-k)\;\;&&H=\min(C,C-k)\;\;&if\;y_1\ne y_2\\
&L=\max(0,k-C)\;\;&&H=\min(C,k)\;\;&if\;y_1=y_2
\end{align*}</script><p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/1042406-20161128221540099-1580490663.png" alt="1042406-20161128221540099-1580490663"></p>
<p>由 <script type="math/tex">\alpha_2^{new}</script> 求得 <script type="math/tex">\alpha_1^{new}</script> 的解为</p>
<script type="math/tex; mode=display">
\alpha_1^{new}=\alpha_1^{old}+y_1y_2(\alpha_2^{old}-\alpha_2^{new})\tag{31}</script><h3 id="变量的选择方法"><a href="#变量的选择方法" class="headerlink" title="变量的选择方法"></a>变量的选择方法</h3><p>令 <script type="math/tex">g(x)</script>为分离超平面</p>
<script type="math/tex; mode=display">
g(x)=\sum_{i=1}^n\alpha_iy_iK(x_i,x)+b
\tag{32}</script><p>检验训练样本点 <script type="math/tex">(x_i, y_i)</script> 是否满足 KKT 对偶互补条件，即：</p>
<script type="math/tex; mode=display">
\begin{align*}
\alpha_i(y_i(\omega x_i+b)-1+\xi_i)=0\\

\end{align*}
\tag{33}</script><p>已知的约束有：</p>
<script type="math/tex; mode=display">
\begin{align*}
C-\alpha_i-\mu_i=0\\
\mu_i\xi_i=0\\
y_i(\omega x_i+b)-1+\xi_i\ge0
\end{align*}
\tag{34}</script><ul>
<li>如果 <script type="math/tex">\alpha_i=0</script> ，则有 <script type="math/tex">\mu_i=C,\;\xi_i=0,g(x_i)\ge1</script>，即样本在支持向量上或者已经被正确分类。</li>
<li>如果 <script type="math/tex">0\lt\alpha_i\lt C</script>，则有 <script type="math/tex">0\lt\mu_i\lt C,\;\xi_i=0,\;g(x_i)=1</script> ，此时样本在支持向量上。</li>
<li>如果<script type="math/tex">\alpha_i=C</script>，则有<script type="math/tex">\mu_i=0,\;\xi_i\ge0,\;g(x_i)\le1</script>，此时样本在支持向量与分类边界之间。</li>
</ul>
<p>SMO算法称选择第一个变量为<strong>外层循环</strong>，这个变量需要选择在训练集中违反KKT条件最严重的样本点。具体地，检验训练样本点 <script type="math/tex">(x_i,y_i)</script>是否满足KKT条件，即：</p>
<script type="math/tex; mode=display">
\begin{align*}
\alpha_i^*=0 \Leftrightarrow y_ig(x_i)\ge1\\
0\lt\alpha_i^*\lt C\Leftrightarrow y_ig(x_i)=1\\
\alpha_i^*=C\Leftrightarrow y_ig(x_i)\le1
\end{align*}
\tag{35}</script><p>一般来说，首先选择违反 <script type="math/tex">0\lt\alpha_i^*\lt C\Leftrightarrow y_ig(x_i)=1</script> 这个条件的点。如果这些支持向量都满足KKT条件，再选择违反 <script type="math/tex">\alpha_i^*=0 \Leftrightarrow y_ig(x_i)\ge1</script> 和 <script type="math/tex">\alpha_i^*=C\Leftrightarrow y_ig(x_i)\le1</script> 的点。</p>
<p>SMO算法称选择第二个变量为<strong>内层循环</strong>，假设在外层循环中已经找到第一个变量 <script type="math/tex">\alpha_1</script>，现在要在内层循环中找到第二个变量 <script type="math/tex">\alpha_2</script>。第二个变量选择的标准是希望能使 <script type="math/tex">\alpha_2</script> 有足够大的变化。由 <script type="math/tex">(29)</script> 知，<script type="math/tex">a_2^{new}</script> 是依赖 <script type="math/tex">|E_1-E_2|</script> 的，为了加快计算速度，一种简单的做法是选择 <script type="math/tex">\alpha_2</script>，使其对应的<script type="math/tex">|E_1-E_2|</script>最大。因为，<script type="math/tex">\alpha_1</script> 和 <script type="math/tex">E_1</script> 已经确定。如果 <script type="math/tex">E_1</script> 是正的，那么选择最小的 <script type="math/tex">E_i</script> 作为 <script type="math/tex">E_2</script>；如果 <script type="math/tex">E_1</script> 是负的，那么选择最大的 <script type="math/tex">E_1</script> 作为 <script type="math/tex">E_2</script>。为了节省计算时间，将所有 <script type="math/tex">E_i</script> 值保存在一个列表中。</p>
<p>在特殊情况下，如果内层循环通过以上方法选择的 <script type="math/tex">\alpha_2</script> 不能使目标函数有足够的下降，那么采用以下启发式规则继续选择 <script type="math/tex">\alpha_2</script>。遍历在间隔边界上的支持向量，依次将其对应的变量作为 <script type="math/tex">\alpha_2</script> 试用，知道目标函数有足够的下降。若找不到合适的 <script type="math/tex">\alpha_2</script>，那么遍历训练数据集；若仍找不到合适的 <script type="math/tex">\alpha_2</script>，则放弃第一个 <script type="math/tex">\alpha_1</script>， 再通过外层循环寻求另外的 <script type="math/tex">\alpha_1</script>。</p>
<p>对于阈值 $b$ 和差值 <script type="math/tex">E_i</script>，在每次完成两个变量的优化后，都要重新计算阈值 $b$。当 <script type="math/tex">0\lt\alpha_1^{new}\lt C</script>，由KKT条件<script type="math/tex">(35)</script>可知：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n\alpha_iy_iK_{i1}+b=y_1
\tag{36}</script><p>于是</p>
<script type="math/tex; mode=display">
b_1^{new}=y_i-\sum_{i=3}^n\alpha_iy_iK_{i1}-\alpha_1^{new}y_1K_{11}-\alpha_2^{new}y_2K_{21}
\tag{37}</script><p>由 <script type="math/tex">E_1</script> 的定义式有</p>
<script type="math/tex; mode=display">
E_1=\sum_{i=3}^n\alpha_iy_iK_{i1}+\alpha_1^{old}y_1K_{11}+\alpha_2^{old}y_2K_{21}+b^{old}-y_1
\tag{38}</script><p>用 <script type="math/tex">(38)</script> 式的</p>
<script type="math/tex; mode=display">
y_1-\sum_{i=3}^n\alpha_iy_iK_{i1}=-E_i+\alpha_1^{old}y_1K_{11}+\alpha_2^{old}y_2K_{21}+b^{old}\tag{39}</script><p>消去 <script type="math/tex">(37)</script> 式的前两项得：</p>
<script type="math/tex; mode=display">
\begin{align*}
b_1^{new}&=-E_i+\alpha_1^{old}y_1K_{11}+\alpha_2^{old}y_2K_{21}+b^{old}-\alpha_1^{new}y_1K_{11}-\alpha_2^{new}y_2K_{21}\\
&=-E_1-y_1K_{11}(\alpha_1^{new}-\alpha_1^{old})-y_2K_{21}(\alpha_2^{new}-\alpha_2^{old})+b^{old}
\end{align*}
\tag{40}</script><p>同样，如果 <script type="math/tex">0\lt\alpha_2^{new}\lt C</script>，那么</p>
<script type="math/tex; mode=display">
b_2^{new}=-E_2-y_1K_{12}(\alpha_2^{new}-\alpha_2^{old})-y_2K_{22}(\alpha_2^{new}-\alpha_2^{old})+b^{old}
\tag{41}</script><p>最终的 <script type="math/tex">b^{new}</script> 为：</p>
<script type="math/tex; mode=display">
b^{new}=\frac{b_1^{new}+b_2^{new}}{2}
\tag{42}</script><p>在每次完成两个变量的优化后，还必须更新其对应的 <script type="math/tex">E_i</script> 值，并将它们保存在列表中。 <script type="math/tex">E_i</script> 值的更新要用到 <script type="math/tex">b^{new}</script> 以及所有支持向量对应的 <script type="math/tex">\alpha_j</script>：</p>
<script type="math/tex; mode=display">
E_i^{new}=\sum_Sy_j\alpha_jK(x_i,x_j)+b^{new}-y_i</script><p>其中 <script type="math/tex">S</script> 是所有支持向量的集合。</p>
<p>总的来说SMO算法流程如下：</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/`Q`86Y6D][12ROW4{N6}{J6.png" alt></p>
<h1 id="拉格朗日乘子法"><a href="#拉格朗日乘子法" class="headerlink" title="拉格朗日乘子法"></a>拉格朗日乘子法</h1><p>拉格朗日对偶性相关知识是李航《统计机器学习》的内容，而对于拉格朗日乘子法几何意义，主要是网上的解释，我认为解释的比较生动的是<a href="https://www.zhihu.com/question/38586401">马同学</a>的解释，总结的比较精炼的是<a href="https://www.zhihu.com/question/38586401">卢健龙</a>的回答，当然两篇都是来自同一个<a href="https://www.zhihu.com/question/38586401">知乎的帖子</a>。</p>
<h2 id="原始问题-1"><a href="#原始问题-1" class="headerlink" title="原始问题"></a>原始问题</h2><p>假设<script type="math/tex">f(x), c_i(x), h_j(x)</script>是定义在 <script type="math/tex">\text{R}^n</script> 上的连续可微函数。考虑约束最优化问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_{x\in \text{R}^n}&\;f(x)\\
s.t.\;\;&c_i(x)\le0,\;\;i=1,2...,k\\
&h_j(x)=0,\;\;j=1,2,...,l
\end{align*}
\tag{*1}</script><p>将此称为最优化问题为原始最优化问题或原始问题。</p>
<p>首先，引入广义拉格朗日函数</p>
<script type="math/tex; mode=display">
L(x,\alpha,\beta)=f(x)+\sum_{i=1}^k\alpha_ic_i(x)+\sum_{j=1}^l\beta_jh_j(x)
\tag{*2}</script><p>这里，<script type="math/tex">x=(x^{(1)},x^{(1)},...x^{(n)})^T\in\text{R}^n,\alpha_i,\beta_j</script>是拉格朗日乘子，<script type="math/tex">\alpha_i\ge0</script>。考虑 $x$ 的函数：</p>
<script type="math/tex; mode=display">
\theta_P(x)=\max_{\alpha,\beta;\alpha_i\ge0}L(x,\alpha,\beta)
\tag{*3}</script><p>这里，下标 $P$ 表示原始问题。</p>
<p>假设给定某个 $x$。如果 $x$ 违反原始问题的约束条件，即存在某个 $i$ 使得 <script type="math/tex">c_i(x)\gt0</script> 或者存在某个 $j$ 使得 <script type="math/tex">h_j(x) \ne 0</script>，那么有</p>
<script type="math/tex; mode=display">
\theta_P(x)=\max_{\alpha,\beta;\alpha_i\ge0}[f(x)+\sum_{i=1}^k\alpha_ic_i(x)+\sum_{j=1}^j\beta_jh_j(x)]=+\infty
\tag{*4}</script><p>因为若某个 $i$ 使得约束 <script type="math/tex">c_i(x)\gt0</script> ，则可令 <script type="math/tex">\alpha_i\rightarrow+\infty</script> 使得 <script type="math/tex">\alpha_ic_i(x)\rightarrow +\infty</script>；若某个 $j$ 使 <script type="math/tex">h_j(x)\ne0</script>, 则可令  <script type="math/tex">\beta_j</script> 使 <script type="math/tex">\beta_j h_j(x) \rightarrow +\infty</script>，而将其余各 <script type="math/tex">\alpha_i,\beta_j</script> 均取为0。</p>
<p>相反地，如果 $x$ 满足约束条件，则有</p>
<script type="math/tex; mode=display">
\theta_P(x)=\begin{cases}
f(x),\;x满足原始问题约束\\
+\infty,\;其他
\end{cases}
\tag{*5}</script><p>所以如果考虑极小化问题</p>
<script type="math/tex; mode=display">
\min_x\theta_P(x)=\min_x\max_{\alpha,\beta;\alpha_i\ge0}L(x,\alpha,\beta)
\tag{*6}</script><p>它是与原始最优化问题等价的，即它们有相同的解。</p>
<p>该问题称为广义拉格朗日函数的极小极大问题。这样一来，就把原始最优化问题表示为广义拉格朗日函数的极小极大问题。为了方便，定义原始问题的最优值</p>
<script type="math/tex; mode=display">
p^*=\min_x\theta_P(x)
\tag{*7}</script><p>称为原始问题的值。</p>
<h2 id="对偶问题-1"><a href="#对偶问题-1" class="headerlink" title="对偶问题"></a>对偶问题</h2><p>定义</p>
<script type="math/tex; mode=display">
\theta_D(\alpha, \beta)=\min_xL(x,\alpha,\beta)
\tag{*8}</script><p>再考虑极大化 <script type="math/tex">\theta_D(\alpha, \beta)=\min_xL(x,\alpha,\beta)</script>, 即</p>
<script type="math/tex; mode=display">
\max_{\alpha,\beta;\alpha\ge0}\theta_D(\alpha,\beta)=\max_{\alpha,\beta;\alpha_i\ge0}\min_xL(x,\alpha,\beta)
\tag{*9}</script><p>问题 <script type="math/tex">\max_{\alpha,\beta;\alpha_i\ge0}\min_xL(x,\alpha,\beta)</script> 称为广义拉格朗日函数的极大极小问题。</p>
<p>可以将广义拉格朗日函数的极大极小问题表示为约束最优化问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
\max_{\alpha,\beta}\theta_D(\alpha,\beta)=\max_{\alpha,\beta}\min_xL(x,\alpha,\beta)\\
s.t.\;\alpha_i\ge0,\;\;i=1,2,...,k
\end{align*}
\tag{*10}</script><p>称为原始问题的对偶问题。定义对偶问题的最优值</p>
<script type="math/tex; mode=display">
d^*=\max_{\alpha,\beta;\alpha_i\ge0}\theta_D(\alpha,\beta)
\tag{*11}</script><p>称为对偶问题的值。</p>
<h2 id="原始问题和对偶问题的关系"><a href="#原始问题和对偶问题的关系" class="headerlink" title="原始问题和对偶问题的关系"></a>原始问题和对偶问题的关系</h2><p>定理：若原始问题和对偶问题都有最优值，则</p>
<script type="math/tex; mode=display">
d^*=\max_{\alpha,\beta;\alpha_i\ge0}\min_xL(x,\alpha,\beta)\le\min_x\max_{\alpha,\beta;\alpha_i\ge0}L(x,\alpha,\beta)=p^*
\tag{*12}</script><p>推论：假设函数 <script type="math/tex">f(x)</script> 和 <script type="math/tex">c_i(x)</script> 是凸函数（不等式约束），<script type="math/tex">h_j(x)</script> 是仿射函数（等式约束）；并且假设不等式约束 <script type="math/tex">c_i(x)</script> 是严格可行的，即存在 $x$ 对所有 $i$ 又 <script type="math/tex">c_i(x)\lt0</script>，则存在 <script type="math/tex">x^*, \alpha^*, \beta^*</script> 使<script type="math/tex">x^*</script> 是原始问题的解，<script type="math/tex">\alpha^*,\beta^*</script> 是对偶问题的解，并且：</p>
<script type="math/tex; mode=display">
p^*=d^*=L(x^*,\alpha^*,\beta^*)
\tag{*13}</script><p>且其充分必要条件是<script type="math/tex">x^*, \alpha^*, \beta^*</script>满足KKT条件：</p>
<script type="math/tex; mode=display">
\begin{align*}
\nabla_xL(x^*, \alpha^*, \beta^*)=0\\
a^*_ic_i^*(x^*)=0\;\;i=1,2,...,k\\
c_i(x^*)\le0,\;\;i=1,2,...,k\\
a_i^*\ge0,\;\;i=1,2,...,k\\
h_j(x^*)=0\;\;j=1,2,...,l
\end{align*}
\tag{*14}</script><h2 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h2><p>拉格朗日乘子法具有很直观的几何意义。</p>
<h3 id="单约束情况"><a href="#单约束情况" class="headerlink" title="单约束情况"></a>单约束情况</h3><p>比如在给定函数$f(x,y)=x^2y-3$找到曲线上距离原点最近的点，其可以转化为</p>
<script type="math/tex; mode=display">
\begin{align*}
    &\min_{x,y}x^2+y^2 \\
    &s.t. \  \ \ \ x^2y-3=0
\end{align*}\tag{*15}</script><p>（图来自马同学)可以看成一个圆心为原点半径逐渐增大的圆上寻找一个与曲线$f(x,y)=x^2y-3的$交点，不难发现圆上通过该交点的切线也将相切于曲线$f(x,y)=x^2y-3$</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/v2-0ca0c5ef4e43e02ac37886894da84daf_hd.gif" alt="v2-0ca0c5ef4e43e02ac37886894da84daf_hd"></p>
<p>从另一个角度来看，目标函数在取得极值的时候，其极值点的梯度向量的方向与约束函数的在该极值点的梯度方向是一致（平行）的，也就是</p>
<script type="math/tex; mode=display">
\nabla g= \lambda \nabla f \tag{*16}</script><p>其中$ g(x,y)=x^2y-3，f(x,y)=x^2+y^2$，<script type="math/tex">\nabla g=\binom{\frac{\partial g}{\partial x}}{\frac{\partial g}{\partial y}}=\binom{2xy}{x^2}</script> ，$\nabla f=\binom{\frac{\partial f}{\partial x}}{\frac{\partial g}{\partial y}}=\binom{2x}{2y}$为了求取目标函数极值点，因此联立方程组</p>
<script type="math/tex; mode=display">
\begin{cases}
    \nabla g= \lambda \nabla f  \\
    x^2y-3=0
\end{cases}
\Rightarrow
\begin{cases}
    \binom{2x}{2y}=\lambda \binom{2xy}{x^2}  \\
    x^2y-3=0
\end{cases}
\Rightarrow
\begin{cases}
    x\approx\pm1.61  \\
    y\approx1.1  \\
    \lambda\approx0.87
\end{cases}
\tag{*17}</script><p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/v2-b59fd83680cc736a4bde6b7714013915_hd.gif" alt="v2-b59fd83680cc736a4bde6b7714013915_hd"></p>
<h3 id="多约束情况"><a href="#多约束情况" class="headerlink" title="多约束情况"></a>多约束情况</h3><p>上面说的是单约束的情况下，而在多约束的情况下</p>
<script type="math/tex; mode=display">
\begin{align*}
    \min_{x,y}x^2+y^2 \\
    s.t 
    \begin{cases}
    x^2y-3=0  \\
    x-y-3=0
\end{cases}
\end{align*}
\tag{*18}</script><p>那么情况就会变成下图</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/v2-9611b135439c71afe097bfdcf8d3248c_hd.jpg" alt="v2-9611b135439c71afe097bfdcf8d3248c_hd"></p>
<p>即$x^2 + y^2$的法线是是$x^2y-3$和$x-y-3$的法线的线性组合：</p>
<p>如果</p>
<script type="math/tex; mode=display">
\begin{cases}
    f(x,y)=x^2+y^2  \\
    g(x,y)=x^2y-3    \\
    h(x,y)=x-y-3
\end{cases}
\tag{*19}</script><p>那么线性组合</p>
<script type="math/tex; mode=display">
\nabla f= \lambda \nabla g+\mu \nabla h
\tag{*20}</script><p>联立方程</p>
<script type="math/tex; mode=display">
\begin{cases}
    \nabla f= \lambda \nabla g+\mu \nabla h \\
    g(x,y)=0    \\
    h(x,y)=0
\end{cases}
\tag{*21}</script><p>即可进行求解.</p>
<p>也就是说在等式约束的优化问题中，假定$x$为$d$维向量，给定目标函数$f(x)$以及约束$g(x)=0,h(x)$，寻找$x$的某个取值$x$*使得目标函数最小化（最大化问题可以通过倒数转化为最小化问题），在最优点$x$*处，梯度$\nabla f(x)$和梯度$\nabla g(x)$和$\nabla h(x)$的线性组合的方向必定相同或相反，即存在$\lambda\ne0, \mu\ne0$使得</p>
<script type="math/tex; mode=display">
\nabla f(x^*) + \lambda \nabla g(x^*)+\mu\nabla h(x^*) = 0
\tag{*22}</script><p>$\lambda,\mu$称为拉格朗日乘子，定义拉格朗日函数</p>
<script type="math/tex; mode=display">
L(x, \lambda, \mu)=f(x)+\lambda g(x)+\mu h(x)
\tag{*23}</script><p>将其对$x$的偏导数$\frac{\partial L}{\partial x}=0$可以得到式$(*9)$，将其对$\lambda$的偏导数$\frac{\partial L}{\partial \lambda}=0$即能得到约束条件$g(x)=0$，其对$\mu$的偏导数<script type="math/tex">\frac{\partial L}{\partial\lambda}=0</script>即能得到约束条件<script type="math/tex">h(x)=0</script>，从而将原约束优化问题转化为对拉格朗日函数$L(x,\lambda)$的无约束优化问题。</p>
<h3 id="KKT条件"><a href="#KKT条件" class="headerlink" title="KKT条件"></a>KKT条件</h3><p>考虑下述不等式约束问题：</p>
<script type="math/tex; mode=display">
\begin{align*}
\min_x f(x)\\
s.t.\;\;g(x)\le 0
\end{align*}
\tag{*24}</script><p>对应的拉格朗日函数为：</p>
<script type="math/tex; mode=display">
L(x,\lambda)=f(x)+\lambda g(x) \tag{*25}</script><p>此时最优点 $x$*或在$ g(x)&lt;0 $的区域中，或在边界$g(x)=0$上。对于$g(x)\lt0$的情形，约束$g(x)\le0$不起作用，可直接通过条件$\nabla f(x)=0$来获得最优点；这等价于将$\lambda$置零后$L(x, \lambda)$对x求偏导得到最优点，$g(x)=0$得到情形类似于上面等式约束的分析，但值得注意的是，此时$\nabla f(x$*$)$的方向必定与$\nabla g(x$*$)$的方向相反，即存在$\lambda\gt0$使得<script type="math/tex">\nabla f(x^*)+\lambda \nabla (x^*)=0</script>。</p>
<p>虽然这段话我抄自西瓜书的附录，但是它给出的图片解释非常有限，因此我又查阅的<a href="https://www.cnblogs.com/ooon/p/5721119.html">相关资料</a>，考虑这种情况：</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/743682-20160731133814716-619658263.png" alt="743682-20160731133814716-619658263"></p>
<p>其红色区域代表着约束区域，蓝色是目标函数的等高线，强调这是不等式约束，即要求可行解必须落在约束区域 <script type="math/tex">g(x)</script> 之内，那么由图可见可行解 $x$ 只能在 <script type="math/tex">g(x)\lt0</script> 或者 <script type="math/tex">g(x)=0</script> 的区域内取得，那么会有以下两种情况：</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/743682-20160731162221497-1767754781.png" alt="743682-20160731162221497-1767754781"></p>
<p>这时候再读上面那句话就可以理解最优点取值的两种情况：</p>
<ol>
<li>目标函数最优点与约束区域重叠的时候，即极值点 $x$ 落在 <script type="math/tex">g(x)\lt0</script> 的区域内，可以看成将$\lambda$置零后$L(x, \lambda)$对 $x$ 求偏导得到最优点，即直接极小化 <script type="math/tex">f(x)</script> 即可。</li>
<li>目标函数最优点在约束区域之外的时候，即极值点 $x$ 落在 <script type="math/tex">g(x)=0</script> 即边界上，此时等价于等式约束优化问题，那么最优点将在约束边界产生，这将转化为上述等式约束的情况。</li>
</ol>
<p>用公式表达就是意思就是：</p>
<script type="math/tex; mode=display">
\begin{cases}
    \begin{cases}
        g(x)<0    \\
        \lambda=0 
    \end{cases} \\
    \begin{cases}
        g(x)=0    \\
        \lambda>0 
    \end{cases}
\end{cases} 
\Rightarrow
\begin{cases}
    g(x)\le0    \\
    \lambda\ge0 \\
    \lambda g(x)=0, \lambda和g(x)必有一为零
\end{cases} \\
\tag{*26}</script><p>上述公式的右边称为Karush-Kuhn-Tucker(简称KKT)条件。</p>
<p>还有一个问题是 <script type="math/tex">\lambda</script> 的取值，在等式约束优化中，约束函数与目标函数的梯度只要满足平行即可；而在不等式约束中则不然，若 <script type="math/tex">\lambda\ne0</script>，这说明可行解 $x$ 是落在约束区域的边界上的，这是可行解应尽量靠近无约束时的解，所以在约束边界上，目标函数的负梯度方向应该远离约束区域朝向无约束时的解，此时正好可得约束函数的梯度方向与目标函数的负梯度方向应该相同，即$\nabla f(x$*$)$的方向必定与$\nabla g(x$*$)$的方向相反，即存在$\lambda\gt0$使得：</p>
<script type="math/tex; mode=display">
\nabla f(x^*)+\lambda\nabla g(x^*)=0
\tag{*27}</script><p>这个问题可以举一个形象的例子，假设你去爬山，目标是山顶，但有一个障碍挡住了通向山顶的路，所以只能沿着障碍爬到尽可能靠近山顶的位置，然后望着山顶叹叹气，这里山顶便是目标函数的可行解，障碍便是约束函数的边界，此时的梯度方向一定是指向山顶的，与障碍的梯度同向，下图描述了这种情况：”</p>
<p><img src="/2019/04/03/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E5%AD%90%E6%B3%95%E5%8F%8A%E5%AF%B9%E5%81%B6%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/743682-20160731135042997-1216295518.png" alt="743682-20160731135042997-1216295518"></p>
<p>对于不等式约束，只要满足KKT条件，依然可以使用拉格朗日乘子法解决，这个条件便是KKT条件。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol>
<li>《机器学习》-周志华</li>
<li>《统计学习方法》-李航</li>
<li><a href="https://www.cnblogs.com/xxrxxr/p/7538430.html">https://www.cnblogs.com/xxrxxr/p/7538430.html</a></li>
<li><a href="https://www.cnblogs.com/ooon/p/5721119.html">https://www.cnblogs.com/ooon/p/5721119.html</a></li>
<li><a href="https://www.zhihu.com/question/38586401">https://www.zhihu.com/question/38586401</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28804123">https://zhuanlan.zhihu.com/p/28804123</a></li>
<li><a href="https://blog.csdn.net/feilong_csdn/article/details/62427148">https://blog.csdn.net/feilong_csdn/article/details/62427148</a></li>
</ol>
]]></content>
      <categories>
        <category>maths</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
        <tag>deep learning</tag>
        <tag>危机分</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo命令和markdown语法记录</title>
    <url>/2019/04/03/hexo%E5%91%BD%E4%BB%A4%E5%92%8Cmarkdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>​    因为不是天天都有时间来维护博客，因为比较菜所以要做很多输入才有时间思考才有可能做输出，因此之前很多关于Hexo<font color="#c7254e">日常使用</font>的命令都忘得一干二净，所以写下来省得以后又得查，但是以前怎么配置的hexo已经完全忘了hhh，如果有时间再写吧，但是这个东西的迭代还是很快的，所以写了以后也未必有用，就像评论系统的引用，看了很多以前的博文都是要自己手动添加yml代码，但是现在只需要在配置文件进行相关的配置即可。</p>
<p>​    另外，打算记一点markdown语法，因为以后可能要码公式。</p>
<span id="more"></span>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p><strong>生成静态网页</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g 或 hexo generate</span><br></pre></td></tr></table></figure>
<p><strong>清除缓存</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p><strong>在本地启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s 或 hexo server</span><br></pre></td></tr></table></figure>
<p><strong>部属到线上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d 或 hexo deploy</span><br></pre></td></tr></table></figure>
<p><strong>创建新的页面</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;pageName&quot;</span><br></pre></td></tr></table></figure>
<p><strong>创建新的博客</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;postName&quot;</span><br></pre></td></tr></table></figure>
<p><strong>创建新的草稿</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;draftName&quot;</span><br><span class="line"></span><br><span class="line">**发布，部署到github**</span><br><span class="line"></span><br><span class="line">​```shell</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><strong>bugs</strong></p>
<div class="note danger">
            <p>hexo: conmand not found</p>
          </div>
<p>命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config list --json</span><br></pre></td></tr></table></figure>
<p>找到prefix如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Users\\[user-name]\\AppData\\Roaming\\npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>将博客目录下的 <font color="#c7254e">/node_modules/hexo-cli/bin</font>加入到系统变量的path路径中</p>
<h2 id="新的配置"><a href="#新的配置" class="headerlink" title="新的配置"></a>新的配置</h2><h3 id="Echart的引入"><a href="#Echart的引入" class="headerlink" title="Echart的引入"></a>Echart的引入</h3><p>请参照我的另一篇<a href="/2019/04/08/echarts使用相关/">博客</a></p>
<h3 id="代码块高亮部分"><a href="#代码块高亮部分" class="headerlink" title="代码块高亮部分"></a>代码块高亮部分</h3><p>参考了<a href="https://www.w3ctrain.com/2017/12/11/hexo-code-block/">这篇博客</a></p>
<p>于目录/themes/next/source/css/_custom/custom.styl中加入</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight-wrap</span><span class="selector-attr">[data-rel]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">35px</span> <span class="number">0</span>;</span><br><span class="line">  ::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::-webkit-scrollbar-track &#123;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::-webkit-scrollbar-thumb &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">&amp;::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-rel);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21252b</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Source Sans Pro&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">&amp;::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fc625d</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">13px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0px</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0px</span> <span class="number">#35cd4b</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及于<code>/themes/next/script/</code>下新建文件<code>codeblock.js</code>加入下述代码，即在hexo的after-post-render过滤器替换了HTML片段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> attributes = [</span><br><span class="line">  <span class="string">&#x27;autocomplete=&quot;off&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;autocorrect=&quot;off&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;autocapitalize=&quot;off&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;spellcheck=&quot;false&quot;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;contenteditable=&quot;true&quot;&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attributesStr = attributes.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="regexp">/&lt;figure class=&quot;highlight ([a-zA-Z]+)&quot;&gt;.*?&lt;\/figure&gt;/</span>.<span class="title function_">test</span>(data.<span class="property">content</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;figure class=&quot;highlight ([a-zA-Z]+)&quot;&gt;.*?&lt;\/figure&gt;/</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> language = <span class="title class_">RegExp</span>.<span class="property">$1</span> || <span class="string">&#x27;plain&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> lastMatch = <span class="title class_">RegExp</span>.<span class="property">lastMatch</span>;</span><br><span class="line"></span><br><span class="line">      lastMatch = lastMatch.<span class="title function_">replace</span>(<span class="regexp">/&lt;figure class=&quot;highlight /</span>, <span class="string">&#x27;&lt;figure class=&quot;iseeu highlight /&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&lt;div class=&quot;highlight-wrap&quot;&#x27;</span> + attributesStr + <span class="string">&#x27;data-rel=&quot;&#x27;</span> + language.<span class="title function_">toUpperCase</span>() + <span class="string">&#x27;&quot;&gt;&#x27;</span> + lastMatch + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="博客文章加密"><a href="#博客文章加密" class="headerlink" title="博客文章加密"></a>博客文章加密</h3><p>使用<a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a>插件，安装如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<p>在<code>_config.yml</code>中加入</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在你想要加密的文章中配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line"><span class="section">message: Welcome to my blog, enter password to read.</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>password is the blog password.</li>
<li>abstract is the content which will be showed in the blog list page.</li>
<li>message is the content which will be showed in the blog detail page.</li>
</ul>
<p><strong>加密后的sidebar异常</strong>，解决方案见：<a href="https://yuyuforest.com/2018/10/18/encrypt-toc/">https://yuyuforest.com/2018/10/18/encrypt-toc/</a></p>
<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><ol>
<li>修改仓库，使其支持置顶功能</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<ol>
<li>在文章中添加置顶信息</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World！</span><br><span class="line">date: 2018-06-26 10:37:59</span><br><span class="line">tags: 随笔</span><br><span class="line">top: 10</span><br></pre></td></tr></table></figure>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>使用<strong><a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></strong>插件，安装如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>
<p>在博客配置<code>_config.yml</code>中添加一下代码，图片放在<code>theme\next\source\images</code>下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/images/loading.gif</span></span><br></pre></td></tr></table></figure>
<h3 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h3><p>使用<strong><a href="https://github.com/theme-next/theme-next-pace">theme-next-pace</a></strong>插件</p>
<ol>
<li>修改目录到<strong>NexT</strong>下，要有 <code>layout</code>, <code>source</code>, <code>languages</code> 和其他文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> themes/next</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">_config.yml  crowdin.yml  docs  gulpfile.js  languages  layout  LICENSE.md  package.json  README.md  scripts  source</span><br></pre></td></tr></table></figure>
<ol>
<li>拉取模块到 <code>source/lib</code> 目录下:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span></span><br></pre></td></tr></table></figure>
<ol>
<li>配置主题文件<code>_config.yml</code></li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<h3 id="代码块折叠功能"><a href="#代码块折叠功能" class="headerlink" title="代码块折叠功能"></a>代码块折叠功能</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐</div></div><div class="fold">
<p>你需要折叠的内容</p>

</div></div>
<p>参考了这篇的<a href="https://jerryhanjj.github.io/2018/04/05/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/">博客</a></p>
<p>步骤如下：</p>
<p>1.在POST主文件中添加JS判断代码，在<code>/themes/next/source/js/src/post-details.js</code>中添加一下代码，可以在文件开头添加即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.fold_hider&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&#x27;&gt;.fold&#x27;</span>, <span class="variable language_">this</span>.<span class="property">parentNode</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">        $(<span class="string">&#x27;&gt;:first&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 默认情况下展开</span></span><br><span class="line">    <span class="comment">// $(&quot;div.fold&quot;).css(&quot;display&quot;,&quot;open&quot;);</span></span><br><span class="line">    <span class="comment">// 默认情况下折叠</span></span><br><span class="line">    $(<span class="string">&quot;div.fold&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>2.定义内建标签，在<code>/themes/next/scripts/</code>中新建文件 <code>tags.js</code>并添加如下代码： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @haohuawu</span></span><br><span class="line"><span class="comment">  修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题</span></span><br><span class="line"><span class="comment">  https://github.com/hexojs/hexo/issues/2400</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rEscapeContent = <span class="regexp">/&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g</span>;</span><br><span class="line"><span class="keyword">const</span> placeholder = <span class="string">&#x27;\uFFFD&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> rPlaceholder = <span class="regexp">/(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g</span>;</span><br><span class="line"><span class="keyword">const</span> cache = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">escapeContent</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;!--&#x27;</span> + placeholder + (cache.<span class="title function_">push</span>(str) - <span class="number">1</span>) + <span class="string">&#x27;--&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(rEscapeContent, <span class="keyword">function</span>(<span class="params">match, content</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> escapeContent(content);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(rPlaceholder, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[<span class="variable language_">arguments</span>[<span class="number">1</span>]];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p> 在同一目录下新建文件<code>fold.js</code>添加如下代码： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fold</span> (args, content) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!text) text = <span class="string">&quot;点击显/隐&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;&lt;div class=&quot;fold_hider&quot;&gt;&lt;div class=&quot;close hider_title&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;fold&quot;&gt;\n&#x27;</span> + hexo.<span class="property">render</span>.<span class="title function_">renderSync</span>(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">&#x27;markdown&#x27;</span>&#125;) + <span class="string">&#x27;\n&lt;/div&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;fold&#x27;</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>3.添加折叠功能样式，在<code>/themes/next/soure/css/_custom/custom.styl</code>添加如下代码： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-class">.hider_title</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▼&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.open</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▲&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.feed-link</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.使用方法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显/隐内容 %&#125;</span><br><span class="line">你需要折叠的内容</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文章字数和阅读时长"><a href="#文章字数和阅读时长" class="headerlink" title="文章字数和阅读时长"></a>文章字数和阅读时长</h3><p>安装 <a href="https://github.com/willin/hexo-wordcount"><strong>hexo-wordcount</strong></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>
<p>然后在主题的配置文件中，配置如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>对于Swig文件需要像如下加入数据</p>
<p>Post Count:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; wordcount(post.content) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Post Minutes to Read:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; min2read(post.content) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Total Count:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; totalcount(site) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中totalcount是对站点所有字数的统计，我在<code>next/layout/archive.swig</code>中这个位置添加了如下字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#x27;cheers.&#x27; + cheers) &#125;&#125;! &#123;&#123; _p(&quot;counter.archive_posts&quot;, site.posts.length) &#125;&#125; 一共码了&#123;&#123; totalcount(site)&#125;&#125;字， &#123;&#123; __(&#x27;keep_on&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在归档页面呈现的效果如下：</p>
<p><img src="/2019/04/03/hexo%E5%91%BD%E4%BB%A4%E5%92%8Cmarkdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/2.png" alt="2"></p>
<p>至于wordcount和min2read，由于是对每个post的统计，所以在<code>next/layout/__macro/post.swig</code>中加入以下字段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.post_wordcount.wordcount %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; __(&#x27;post.wordcount&#x27;)  + __(&#x27;symbol.colon&#x27;) + wordcount(post.content) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.post_wordcount.min2read %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>&#123;&#123; __(&#x27;post.min2read&#x27;) + __(&#x27;symbol.colon&#x27;) + min2read(post.content)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>theme.post_wordcount.wordcount</code>是在主题文件<code>__config.yml</code>中拿的值，所以要在主题文件<code>__config.yml</code>中添加字段</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>而双花括号中的字段是在<code>/language/zh-CN.yml</code>中取的值，所以要在<code>post</code>下面加上<code>wordcount</code>和<code>min2read</code>字段，写上你想要的文字。这里为什么不直接在<code>swig</code>文件中写上中文文字，理解很简单，就是为了语言和<code>html</code>的分离，如果在根目录<code>__config.yml</code>中修改了语言，不需要修改<code>swig</code>文件也能够使展示变得正常，这相当于一种解耦。</p>
<h3 id="LeanCloud配置使用"><a href="#LeanCloud配置使用" class="headerlink" title="LeanCloud配置使用"></a>LeanCloud配置使用</h3><p>参考<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md">hexo-theme-next</a>，这个文件在<code>themes/next/docs/</code>也有，叫<code>LEANCLOUD-COUNTER-SECURITY.md</code>。</p>
<h3 id="图片弹出效果-fancybox"><a href="#图片弹出效果-fancybox" class="headerlink" title="图片弹出效果 - fancybox"></a>图片弹出效果 - fancybox</h3><p>fancybox 的特性：</p>
<ul>
<li>允许我们用鼠标和键盘上的四个方向键切换图片</li>
<li>可以根据当前窗口大小自动调整弹出框的大小，当我们改变浏览器窗口大小时，将会看到弹出框自动缩放了</li>
<li>支持缩略图和按钮帮助导航</li>
</ul>
<p>设置图片显示，配置见 <a href="https://github.com/theme-next/theme-next-fancybox3">theme-next-fancybox3</a></p>
<h3 id="添加gitalk评论功能"><a href="#添加gitalk评论功能" class="headerlink" title="添加gitalk评论功能"></a>添加gitalk评论功能</h3><p>在<code>themes/next/_config.yml</code>中有相关gitalk配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span>  <span class="string">github</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="number">543877815.</span><span class="string">github.io</span></span><br><span class="line">  <span class="attr">client_id:</span>  </span><br><span class="line">  <span class="attr">client_secret:</span>  </span><br><span class="line">  <span class="attr">admin_user:</span>  <span class="number">543877815</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br></pre></td></tr></table></figure>
<p>其中<code>client_id</code>和<code>client_secret</code>在github的<code>setting/Developer settings/OAuth Apps</code>中进行创建与配置。</p>
<p>配置文件下面还有一个gitalk的js和css需要进行填写</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitalk</span></span><br><span class="line"><span class="comment"># See: https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="attr">gitalk_js:</span> <span class="string">https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js</span></span><br><span class="line"><span class="attr">gitalk_css:</span> <span class="string">https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h3><p>访问 Aplayer 网站：<a href="https://github.com/MoePlayer/APlayer">GitHub Aplayer</a>。下载源码到本地，解压后将dist的css文件放置在<code>theme\next\source\css</code>文件中，将js文件放置在<code>themes\next\source\js\src</code>文件中，新建<code>themes\next\source\js\src\music.js</code>文件，添加内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">audio</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;灰色头像&quot;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;许嵩&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/59697.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://img.ytmp3.cn/image/79.jpg&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;多余的解释&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;许嵩&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://www.ytmp3.cn/down/60447.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;http://img.ytmp3.cn/image/78.jpg&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后配置<code>theme\next\layout\_layout.swig</code>文件，将下述代码添加到<code>&lt;body&gt;&lt;/body&gt;</code>之间。然后就能看到左下角的音乐播放器。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;/css/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="attribute">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script <span class="attribute">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;/js/src/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="attribute">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;/js/src/music.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="新增页面"><a href="#新增页面" class="headerlink" title="新增页面"></a>新增页面</h3><h4 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h4><p>这个页面是区别于博文的新页面，通过<code>hexo new page [pageName]</code>在博客的<code>source</code>下生成一个叫<code>[pageName]</code>的目录，里面有一个文件叫<code>index.md</code>，这个markdown文件将被直接用于渲染这个页面，可以写html、css、js代码，目录中还会生成一个叫<code>index</code>的文件夹，里面可以放静态资源。</p>
<p>然后在<strong>侧边栏</strong>添加页面链接，主题配置文件<code>_config.yml</code>中添加<code>key: value</code>字段，<code>key</code>字段是页面在配置文件中的唯一标识，<code>value</code>字段中<code>||</code>左边的是访资源的路径，<code>||</code>右边是链接的图标，用的是<a href="https://fontawesome.dashgame.com/">fontawsome</a>的类名。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">/top/</span> <span class="string">||</span> <span class="string">signal</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">links:</span> <span class="string">/links</span> <span class="string">||</span> <span class="string">link</span></span><br></pre></td></tr></table></figure>
<p>为侧边栏链接添加<strong>中文描述</strong>，在默认情况下，链接默认会显示为<code>_config.yml</code>中配置的<code>key</code>，如果想要修改为中文描述，需要在<code>themes\next\languages\zh-CN.yml</code>中添加<code>menu.[pageName]</code>的描述</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">热榜</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">links:</span> <span class="string">友链</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br></pre></td></tr></table></figure>
<h4 id="新增阅读排行页面"><a href="#新增阅读排行页面" class="headerlink" title="新增阅读排行页面"></a>新增阅读排行页面</h4><p>参考自<a href="https://tding.top/archives/baf1ffd.html">小丁的个人博客</a>，需要先配置<a href="https://leancloud.cn/">LeanCloud</a>，然后<code>hexo n page top</code> 新建页面，会生成 top 目录，编辑其中自动生成的 <code>index.md</code> 文件，将其中的代码替换如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;top&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable constant_">AV</span>.<span class="title function_">initialize</span>(<span class="string">&quot;leancloud_appid&quot;</span>, <span class="string">&quot;leancloud_appkey&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> time=<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> title=<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> url=<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> query = <span class="keyword">new</span> <span class="variable constant_">AV</span>.<span class="title class_">Query</span>(<span class="string">&#x27;Counter&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  query.<span class="title function_">notEqualTo</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  query.<span class="title function_">descending</span>(<span class="string">&#x27;time&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  query.<span class="title function_">limit</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  query.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">todo</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;  <span class="comment">// 20 为显示Top 20热度的文章</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> result=todo[i].<span class="property">attributes</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      time=result.<span class="property">time</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      title=result.<span class="property">title</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      url=result.<span class="property">url</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> content=<span class="string">&quot;&lt;p&gt;&quot;</span>+<span class="string">&quot;&lt;font color=&#x27;#1C1C1C&#x27;&gt;&quot;</span>+<span class="string">&quot;【文章热度:&quot;</span>+time+<span class="string">&quot;℃】&quot;</span>+<span class="string">&quot;&lt;/font&gt;&quot;</span>+<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+<span class="string">&quot;$&#123;yourUrl&#125;&quot;</span>+url+<span class="string">&quot;&#x27;&gt;&quot;</span>+title+<span class="string">&quot;&lt;/a&gt;&quot;</span>+<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;top&quot;</span>).<span class="property">innerHTML</span>+=content</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>并将其中的 <code>leancloud_appid</code>、<code>leancloud_appkey</code> 和<strong>页面链接</strong>替换为你的。</p>
<h4 id="新增友链页面"><a href="#新增友链页面" class="headerlink" title="新增友链页面"></a>新增友链页面</h4><p>参考自<a href="https://tding.top/archives/73ce4e7.html">小丁的个人博客</a>，首先<code>hexo n page links</code> 新建页面，会生成 links 目录，编辑其中自动生成的 <code>index.md</code> 文件，将其中的代码替换如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友链</span><br><span class="line"><span class="section">type: links</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span>.links-content&#123;margin-top:1rem&#125;.link-navigation::after&#123;content:&quot; &quot;;display:block;clear:both&#125;.card&#123;width:130px;font-size:1rem;padding:0;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:block;float:left;box-shadow:0 2px 6px 0 rgba(0,0,0,.12);background:#f5f5f5&#125;.card&#123;margin-left:16px&#125;@media(max-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 16px)/2)&#125;.card:nth-child(2n+1)&#123;margin-left:0&#125;.card:not(:nth-child(2n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:567px)&#123;.card&#123;margin-left:16px;width:calc((100% - 32px)/3)&#125;.card:nth-child(3n+1)&#123;margin-left:0&#125;.card:not(:nth-child(3n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:768px)&#123;.card&#123;margin-left:16px;width:calc((100% - 48px)/4)&#125;.card:nth-child(4n+1)&#123;margin-left:0&#125;.card:not(:nth-child(4n+1))&#123;margin-left:16px&#125;&#125;@media(min-width:1200px)&#123;.card&#123;margin-left:16px;width:calc((100% - 64px)/5)&#125;.card:nth-child(5n+1)&#123;margin-left:0&#125;.card:not(:nth-child(5n+1))&#123;margin-left:16px&#125;&#125;.card:hover&#123;transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)&#125;.card .thumb&#123;width:100%;height:0;padding-bottom:100%;background-size:100% 100%!important&#125;.posts-expand .post-body img&#123;margin:0;padding:0;border:0&#125;.card .card-header&#123;display:block;text-align:center;padding:1rem .25rem;font-weight:500;color:#333;white-space:normal&#125;.card .card-header a&#123;font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none;border:0&#125;.card .card-header a:hover&#123;color:#d480aa;text-decoration:none;border:0&#125;<span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation&quot;</span> <span class="attr">id</span>=<span class="string">&quot;links1&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;with-love&quot;</span> <span class="attr">id</span>=<span class="string">&quot;animate1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">  &lt;/span&gt;留言添加友链&lt;span class=&quot;with-love&quot; id=&quot;animate2&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">  &lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">------</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## 友链格式</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 网站名称：小丁的个人博客</span><br><span class="line"><span class="bullet">-</span> 网站地址：[<span class="string">https://tding.top</span>](<span class="link">https://tding.top</span>)</span><br><span class="line"><span class="bullet">-</span> 网站描述：世间所有的相遇，都是久别重逢</span><br><span class="line"><span class="bullet">-</span> 网站Logo/头像：[<span class="string">https://tding.top/images/avatar.webp</span>](<span class="link">https://tding.top/images/avatar.webp</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>然后在页面目录 <code>/source/links/</code> 中添加 <code>linklist.json</code>，示例：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```json</span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;三水非冰博客&quot;</span>,</span><br><span class="line">		<span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://www.sanshuifeibing.com/usr/images/avatar2.jpg&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span>: <span class="string">&quot;https://www.sanshuifeibing.com&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;北宸&quot;</span>,</span><br><span class="line">		<span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://leafjame.github.io/images/beichen.png&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span>: <span class="string">&quot;https://leafjame.github.io&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;千灵夙赋&quot;</span>,</span><br><span class="line">		<span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://qianling.pw/images/avatar.png&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span>: <span class="string">&quot;https://qianling.pw/&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>创建<code>link.js</code>保存在<code>themes\next\source\js\src\</code>下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">link = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">//这里设置的是刚才的 linklist.json 文件路径</span></span><br><span class="line">      $.<span class="title function_">getJSON</span>(<span class="string">&quot;/links/linklist.json&quot;</span>,</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          that.<span class="title function_">render</span>(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> html, nickname, avatar, site, li = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          nickname = data[i].<span class="property">nickname</span>;</span><br><span class="line">          avatar = data[i].<span class="property">avatar</span>;</span><br><span class="line">          site = data[i].<span class="property">site</span>;</span><br><span class="line">          li += <span class="string">&#x27;&lt;div class=&quot;card&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + site + <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;thumb&quot; style=&quot;background: url( &#x27;</span> + avatar + <span class="string">&#x27;);&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;/a&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;card-header&quot;&gt;&#x27;</span> + <span class="string">&#x27;&lt;div&gt;&lt;a href=&quot;&#x27;</span> + site + <span class="string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span> + nickname + <span class="string">&#x27;&lt;/a&gt;&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&quot;.link-navigation&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">link.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>
<p>最后在<code>/source/links/index.md</code>中引入该js:<code>&lt;script src=&quot;/js/src/link.js&quot;&gt;&lt;/script&gt;</code>，另外可能需要自己添加<code>jquery.js</code></p>
<h2 id="Tag-Plugin语法"><a href="#Tag-Plugin语法" class="headerlink" title="Tag Plugin语法"></a>Tag Plugin语法</h2><p><a href="https://tding.top/archives/29bfe8c9.html">参考自小丁的个人博客</a></p>
<h3 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a>文本居中引用</h3><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><a href="#tab1-1">代码</a></li><li class="tab"><a href="#tab1-2">效果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab1-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab1-2"><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>世间所有的相遇，都是久别重逢</p>

            <i class="fa fa-quote-right"></i>
          </blockquote></div></div></div>
<h3 id="提示块"><a href="#提示块" class="headerlink" title="提示块"></a>提示块</h3><div class="tabs" id="tab2"><ul class="nav-tabs"><li class="tab active"><a href="#tab2-1">代码</a></li><li class="tab"><a href="#tab2-2">效果</a></li><li class="tab"><a href="#tab2-3">主题配置项</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab2-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab2-2"><div class="note default">
            <p>default 提示块标签</p>
          </div>

<div class="note primary">
            <p>primary 提示块标签</p>
          </div>

<div class="note success">
            <p>success 提示块标签</p>
          </div>

<div class="note info">
            <p>info 提示块标签</p>
          </div>

<div class="note warning">
            <p>warning 提示块标签</p>
          </div>

<div class="note danger">
            <p>danger 提示块标签</p>
          </div></div><div class="tab-pane" id="tab2-3"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="comment"># 风格</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 要不要图标</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 圆角矩形</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div></div></div>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><div class="tabs" id="tab3"><ul class="nav-tabs"><li class="tab active"><a href="#tab3-1">代码</a></li><li class="tab"><a href="#tab3-2">效果</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab3-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label default@默认 %&#125; </span><br><span class="line">&#123;% label primary@主要 %&#125;</span><br><span class="line">&#123;% label success@成功 %&#125;</span><br><span class="line">&#123;% label info@信息 %&#125; </span><br><span class="line">&#123;% label warning@警告 %&#125; </span><br><span class="line">&#123;% label danger@危险 %&#125; </span><br><span class="line">&#123;% label success@这是成功的信息%&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab3-2"><p><span class="label default">默认</span><br><span class="label primary">主要</span><br><span class="label success">成功</span><br><span class="label info">信息</span><br><span class="label warning">警告</span><br><span class="label danger">危险</span><br><span class="label success">这是成功的信息</span></p></div></div></div>
<h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab,1 %&#125; 名字为tab是唯一标识，默认在第1个选项卡，如果是-1则隐藏</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**选项卡 1**</span> </span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**选项卡 2**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab A --&gt;</span><br><span class="line"><span class="strong">**选项卡 3**</span> 名字为A</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">tab 1</a></li><li class="tab"><a href="#tab-2">tab 2</a></li><li class="tab"><a href="#tab-3">A</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><p><strong>选项卡 1</strong> </p></div><div class="tab-pane" id="tab-2"><p><strong>选项卡 2</strong></p></div><div class="tab-pane" id="tab-3"><p><strong>选项卡 3</strong> 名字为A</p></div></div></div>
<p>主题<code>_config.yml</code>配置项</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><div class="tabs" id="tab4"><ul class="nav-tabs"><li class="tab active"><a href="#tab4-1">代码及参数</a></li><li class="tab"><a href="#tab4-2">示例</a></li><li class="tab"><a href="#tab4-3">多个按钮居中显示</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab4-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code> : 绝对或相对 URL</li>
<li><code>text</code> : 按钮文字，如果未指定图标则为必须</li>
<li><code>icon</code> : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需</li>
<li><code>[class]</code> : FontAwesome 类：<code>fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X</code> ，可选参数。</li>
<li><code>[title]</code> : 鼠标悬停时的工具提示，可选参数。</li>
</ul>
<p>注意：最好添加 <code>&lt;div&gt;</code> 标签，测试时没加 div，下面显示不完全，加上非常美观。</p></div><div class="tab-pane" id="tab4-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span>&#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125;<span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<div><a class="btn" href="https://tding.top/ " title="这是小丁的个人博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a></div></div><div class="tab-pane" id="tab4-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;div&gt;</span></span><br><span class="line"><span class="code">        &#123;% button https://tding.top/ ,首页,home fa-fw,这是小丁的个人博客首页%&#125;</span></span><br><span class="line"><span class="code">        &#123;% button https://tding.top/movies/ ,观影,film fa-fw,豆瓣电影%&#125; </span></span><br><span class="line"><span class="code">        &#123;% button https://tding.top/books/ ,阅读,book fa-fw,豆瓣读书%&#125;</span></span><br><span class="line"><span class="code">    &lt;/div&gt;</span></span><br><span class="line"><span class="code">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<div class="text-center"><div><a class="btn" href="https://tding.top/ " title="这是小丁的个人博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a> <a class="btn" href="https://tding.top/movies/ " title="豆瓣电影">
            <i class="fa fa-film fa-fw"></i>观影
          </a> <a class="btn" href="https://tding.top/books/ " title="豆瓣读书">
            <i class="fa fa-book fa-fw"></i>阅读
          </a></div></div></div></div></div>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><div class="tabs" id="tab5"><ul class="nav-tabs"><li class="tab active"><a href="#tab5-1">bootstrap样式1</a></li><li class="tab"><a href="#tab5-2">bootstrap样式2</a></li><li class="tab"><a href="#tab5-3">下标</a></li><li class="tab"><a href="#tab5-4">上标</a></li><li class="tab"><a href="#tab5-5">居中</a></li><li class="tab"><a href="#tab5-6">图片的坑</a></li><li class="tab"><a href="#tab5-7">修改图片大小</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab5-1"><p><table><tr><td bgcolor="#f8d7da"><font color="#c7254e">hexo new "博客文章文件名"</font></td></tr></table><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#f8d7da</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#c7254e</span>&gt;</span>hexo new &quot;博客文章文件名&quot;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p></div><div class="tab-pane" id="tab5-2"><table>
    <tr>
        <td bgcolor="#333">
            <font color="#fff">Ctrl + ,</font>
        </td>
    </tr> 
</table>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#333</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#fff</span>&gt;</span>hexo new &quot;博客文章文件名&quot;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab5-3"><p><strong>H<sub>2</sub>O</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab5-4"><p>X<sup>2</sup></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">X<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab5-5"><p><center>我在中间</center><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>我在中间<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure></p></div><div class="tab-pane" id="tab5-6"><p>正确引用：</p>
<p><img src="/2019/04/03/hexo%E5%91%BD%E4%BB%A4%E5%92%8Cmarkdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/1.png" alt="1"></p></div><div class="tab-pane" id="tab5-7"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;2019-09-18-Re-recognizing-machine-learning\5.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75%&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
<h1 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h1><h2 id="安装Mathjax插件"><a href="#安装Mathjax插件" class="headerlink" title="安装Mathjax插件"></a><strong>安装Mathjax插件</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure>
<h2 id="更换Hexo的markdown渲染引擎"><a href="#更换Hexo的markdown渲染引擎" class="headerlink" title="更换Hexo的markdown渲染引擎"></a><strong>更换Hexo的markdown渲染引擎</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h2 id="解决语义冲突"><a href="#解决语义冲突" class="headerlink" title="解决语义冲突"></a><strong>解决语义冲突</strong></h2><p>由于LaTeX与markdown语法有语义冲突，在markdown中，斜体和加粗可以用<em>或者<em>表示，在这里我们修改变量，将</em>用于LaTeX，而使用</em>表示markdown中的斜体和加粗，于 <font color="#c7254e">node_modules\kramed\lib\rules\inline.js</font> 中</p>
<p>修改11行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"> <span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>和20行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<p>更改配置文件</p>
<p>于 <font color="#c7254e">_config.yml</font>配置mathjax</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure>
<h2 id="hexo下LaTeX无法显示的解决方案"><a href="#hexo下LaTeX无法显示的解决方案" class="headerlink" title="hexo下LaTeX无法显示的解决方案"></a><strong>hexo下LaTeX无法显示的解决方案</strong></h2><p><a href="https://www.jianshu.com/p/d95a4795f3a8"><strong>解决方法参考</strong></a></p>
<p><strong>使用</strong></p>
<p>每次写博客要在前面加上<font color="#c7254e">mathjax: true</font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2018-2-8 21:01:30</span><br><span class="line">tags:</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">--</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>行内公式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$行内公式$</span><br></pre></td></tr></table></figure>
</li>
<li><p>行间公式(自动居中)</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>行间公式<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="公式编辑的bug"><a href="#公式编辑的bug" class="headerlink" title="公式编辑的bug"></a><strong>公式编辑的bug</strong></h2><p>对于sum和min需要使用$$进行包裹，如果仅使用$包裹将无法解析</p>
<h2 id="公式编号问题"><a href="#公式编号问题" class="headerlink" title="公式编号问题"></a><strong>公式编号问题</strong></h2><p>如果使用align对公式进行包裹</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">公式一\\</span><br><span class="line">公式二\\</span><br><span class="line">公式三\\</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br></pre></td></tr></table></figure>
<p>在网页上渲染会出现多个公式编号：</p>
<script type="math/tex; mode=display">
\begin{align}
公式一\\
公式二\\
公式三\\
\end{align}
\tag{1}</script><p>正确的写法是</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\begin&#123;align<span class="emphasis">*&#125;</span></span><br><span class="line"><span class="emphasis">公式一\\</span></span><br><span class="line"><span class="emphasis">公式二\\</span></span><br><span class="line"><span class="emphasis">公式三\\</span></span><br><span class="line"><span class="emphasis">\end&#123;align*</span>&#125;</span><br><span class="line">\tag&#123;1&#125;</span><br></pre></td></tr></table></figure>
<p>渲染效果为：</p>
<script type="math/tex; mode=display">
\begin{align*}
公式一\\
公式二\\
公式三\\
\end{align*}
\tag{1}</script><h2 id="公式引用"><a href="#公式引用" class="headerlink" title="公式引用"></a>公式引用</h2><p>可以用<code>\tag&#123;tag&#125;</code>给原公式打Tag。如果在后面需要引用它，就在<code>\tag</code>后面加上<code>\label&#123;tag&#125;</code>，例子如下：</p>
<p>先给原式子打上tag和label</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>:=x^<span class="number">2</span>-y^<span class="number">3</span>\tag&#123;<span class="number">52</span>&#125;\label&#123;<span class="number">52</span>&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
a:=x^2-y^3\tag{52}\label{52}</script><p>如果需要引用改公式，则需要使用<code>\eqref&#123;tag&#125;</code></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>a+y^<span class="number">3</span>\stackrel&#123;\eqref&#123;<span class="number">52</span>&#125;&#125;=x^<span class="number">2</span><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
a+y^3\stackrel{\eqref{52}}=x^2</script><p>也可以使用<code>\ref&#123;tag&#125;</code>，这样引用没有括号，显示为：</p>
<script type="math/tex; mode=display">
a+y^3\stackrel{\ref{52}}=x^2</script>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>前端页面性能优化小记</title>
    <url>/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>​    我之前在写学校艺术中心的项目页面的时候要求有大量的动画，一开始我写的页面动画非常不流畅，有很多卡顿，因此我通过在慕课网上学习了<a href="https://coding.imooc.com/class/130.html">让你页面速度飞起来 Web前端性能优化</a>以及在<a href="https://classroom.udacity.com/courses/ud860">优达学堂</a>(我是通过在谷歌开发者帮助上找到这个网址的)来了解一些关于现代浏览器页面渲染的原理和过程，当然还有<a href="https://www.youtube.com/watch?v=RCFQu0hK6bU&amp;feature=youtu.be">The Applied Science of Runtime Performance - Chrome Dev Summit 2014 (Paul Lewis) </a>、张鑫旭的回流与重绘：<a href="https://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/为">CSS性能让JavaScript变慢？</a>、<a href="https://zhuanlan.zhihu.com/p/30078937">如何不择手段提升scroll事件的性能?</a>(最早来自知乎？）以及该文章内引用的其它文章…不再一一列举。为此我还在小组会上做了一定的分享，因此我将在下面记录下所学的内容。</p>
<p>​    这可能不是一篇正经的博文，这是自己总结写给自己看的，因为可能只有我能看得懂hhh，一起之前分享后的整理，但是看完<a href="https://classroom.udacity.com/courses/ud860">优达学堂</a>确实能比较好地理解整个过程（墙裂推荐）。</p>
<span id="more"></span>
<h2 id="前端几个重要线程"><a href="#前端几个重要线程" class="headerlink" title="前端几个重要线程"></a>前端几个重要线程</h2><h3 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a><strong>GUI渲染线程</strong></h3><p>·         负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。</p>
<p>·         当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</p>
<p>·         注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</p>
<h3 id="JS引擎线程"><a href="#JS引擎线程" class="headerlink" title="JS引擎线程"></a><strong>JS引擎线程</strong></h3><p>·         也称为JS内核，负责处理Javascript脚本程序。（例如V8引擎）</p>
<p>·         JS引擎线程负责解析Javascript脚本，运行代码。</p>
<p>·         JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序</p>
<p>·         同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>
<h3 id="事件触发线程"><a href="#事件触发线程" class="headerlink" title="事件触发线程"></a><strong>事件触发线程</strong></h3><p>·         归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）</p>
<p>·         当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中</p>
<p>·         当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理</p>
<p>·      注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）</p>
<h3 id="定时触发器线程"><a href="#定时触发器线程" class="headerlink" title="定时触发器线程"></a><strong>定时触发器线程</strong></h3><p>·         传说中的setInterval与setTimeout所在线程</p>
<p>·         浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）</p>
<p>·         因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）</p>
<p>·         注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</p>
<h3 id="异步http请求线程"><a href="#异步http请求线程" class="headerlink" title="异步http请求线程"></a><strong>异步http请求线程</strong></h3><p>·         在XMLHttpRequest在连接后是通过浏览器新开一个线程请求</p>
<p>·         将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。</p>
<h2 id="新建DOM的过程（浏览器如何构建关键帧）"><a href="#新建DOM的过程（浏览器如何构建关键帧）" class="headerlink" title="新建DOM的过程（浏览器如何构建关键帧）"></a>新建DOM的过程（浏览器如何构建关键帧）</h2><p>​    当浏览器向服务器发出Get请求获取页面</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image1.png" alt="image1"></p>
<p>​    服务器会向浏览器返回html页面，这是原始的文本</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image2.png" alt="image2"></p>
<p>​    浏览器通过解析其中的dom结点从而形成dom树</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image3.png" alt="image3"></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image4.png" alt="image4"></p>
<p>​    浏览器在构造dom树的同时又会请求该页面的css样式文件，这个过程在chrome的develop tool中叫recalculate Styles</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image5.png" alt="image5"></p>
<p>​    dom树结合了css有了样式，构成了新的树叫做渲染树</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image6.png" alt="image6"></p>
<p>​    渲染树没有了head和script，如果display:none也会从渲染树除去，如果有:after等伪类，即使没有出现在DOM树，也会添加到渲染树中。一般来说只有显示在网页上的元素才会添加到渲染树中</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image7.png" alt="image7"></p>
<p>​    下一个过程叫做layout，也叫做reflow（回流），即对元素的规模尺寸，布局进行页面上的初步构建，注意这是一种网络布局模型，意味着某个元素可以影响到其他元素</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image8.png" alt="image8"></p>
<p>​    下一个过程是矢量到光栅的转化，因为电脑屏幕实际上是由一个个格子的像素构成的，这是浏览器的内部操作，我们不需要了解太多</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image9.png" alt="image9"></p>
<p>​    再下一步则是到了重绘这个过程(paint)，其将元素的外观绘制在页面上</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image10.png" alt="image10"></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image11.png" alt="image11"></p>
<p>​    其中有一步drawBitmap，浏览器将内容解码成内存，图片的绘制实际上是一个一个像素点解码绘制的，像下面这样：</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image12.png" alt="image12"></p>
<p>​    上面讲的是一个图层所要做的事情，因此还有一个过程是的对图层进行合成</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image13.png" alt="image13"></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image14.png" alt="image14"></p>
<p>​    <img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image15.png" alt="image15"></p>
<p>​    所有这些都是在CPU上发生的，图层本身和其图块将上传到GPU中，同样，这一流程也包含在composite Layers部分，最后GPU将根据指示将图片显示到屏幕上。但我们开发者无法控制这一过程。</p>
<h3 id="总结如下"><a href="#总结如下" class="headerlink" title="总结如下"></a>总结如下</h3><p>1.获取DOM后分割为多个图层</p>
<p>2.对每个图层的节点计算样式结果(Recalculate style—样式重计算)</p>
<p>3.为每个节点生成图形和位置(layout—回流和重布局)</p>
<p>4.将每个节点绘制填充到图层位图中(Paint Setup和Paint—重绘)</p>
<p>5.图层作为纹理上传至GPU</p>
<p>6.复合多个图层到页面上生成最终屏幕图像(Comoposite Layers—图层重组)</p>
<h2 id="对于开发者而言"><a href="#对于开发者而言" class="headerlink" title="对于开发者而言"></a>对于开发者而言</h2><p>对于我们开发者来说，通常帧是这样的，你需要了解管道的概念：</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image17.png" alt="image17"></p>
<p>你会通过js来改变样式，并导致外观变化，或者添加DOM</p>
<p>但是并不一定需要js，也可以使用CSS transform、transition来改变，甚至使用最近的Web animations API改变外观变化。</p>
<p>但是通过js改变不一定触发所有管道元素</p>
<p>Javascript-&gt;style-&gt;layout-&gt;paint-&gt;composite</p>
<p>Javascript-&gt;style-&gt;paint-&gt;composite</p>
<p>Javascript-&gt;style-&gt;composite</p>
<p>每次改变都涉及到了style，改变不同属性影响到了不同的管道元素，进而影响到应用的性能</p>
<p>其中有两个重要的概念就是<strong>回流(layout/reflow)</strong>和<strong>重绘(paint)</strong></p>
<h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><p>​    当render tree中的一部分或全部因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)</p>
<p>​    当页面布局和几何属性改变时就需要回流</p>
<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>​    当render tree中的一些元素需要更新属性，而这些属性影响元素的外观，风格，而不会影响布局的，比较background-color。则称为重绘</p>
<p>​    这里有一些有趣的视频可以直观地看到相关步骤</p>
<p>​    1.   <a href="http://www.youtube.com/watch?v=nJtBUHyNBxs">http://www.youtube.com/watch?v=nJtBUHyNBxs</a></p>
<p>​    2.   <a href="http://www.youtube.com/watch?v=ZTnIxIA5KGw">http://www.youtube.com/watch?v=ZTnIxIA5KGw</a></p>
<p>​    3.   <a href="http://www.youtube.com/watch?v=dndeRnzkJDU">http://www.youtube.com/watch?v=dndeRnzkJDU</a></p>
<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>​    因此根据页面渲染的原理和管道的过程，页面性能优化的基本思想如下：</p>
<p>​    1.避免使用触发重绘、回流的CSS属性</p>
<p>​    2.将重绘、回流的影响范围限制在单独的图层之内，那么这个DOM元素的重绘和回流的影响只会在这个图层中。</p>
<h2 id="只触发重绘的属性"><a href="#只触发重绘的属性" class="headerlink" title="只触发重绘的属性"></a>只触发重绘的属性</h2><p>color border-style border-radius visibility text-decoration background background-image background-position background-repeat background-size outline-color outline outline-style outline-width box-shadow</p>
<h2 id="触发页面重布局的属性"><a href="#触发页面重布局的属性" class="headerlink" title="触发页面重布局的属性"></a>触发页面重布局的属性</h2><p>盒子模型相关属性</p>
<p>定位属性及浮动</p>
<p>改变节点内部文字结构</p>
<p>width height padding margin display border-width border min-height</p>
<p>top bottom left right position float clear </p>
<p>text-align overflow-y font-weight overflow font-family line-height vertical-align white-space font-size</p>
<h2 id="chrome创建图层的条件"><a href="#chrome创建图层的条件" class="headerlink" title="chrome创建图层的条件"></a>chrome创建图层的条件</h2><p>1.3D或透视变化CSS属性(perspective transform will-change)</p>
<p>2.使用加速视频解码的节点</p>
<p>3.拥有3D(WebGL)上下文或加速的2D的上下文(canvas）</p>
<p>4.混合插件(Flash)</p>
<p>5.对自己的opacity做CSS动画或使用一个动画webkit变换的元素</p>
<p>6.拥有加速CSS过滤器的元素 (translate3D）</p>
<p>7.元素有一个包含复合层的后代节点(一个元素拥有一个子元素，该子元素在自己层里)</p>
<p>8.元素有一个z-index较低且包含一个复合层的兄弟元素(换句话就是该元素在复合层上面渲染)</p>
<h2 id="实战优化点"><a href="#实战优化点" class="headerlink" title="实战优化点"></a>实战优化点</h2><p>1.用translate替代top改变</p>
<p>2.用opacity 替代visibility</p>
<p>3.不要一条一条地修改DOM的样式，预先定义好class，然后修改DOM的className<br> 4.把DOM离线后修改，比如：先把DOM给display:none(有一次Reflow)，然后你修改100次，再把它显示出来</p>
<p>5.不要把DOM结点的属性值放在一个循环里当成循环里的变量</p>
<p>6.不要使用table布局，可能很小的一个改动会造成整个table的重新布局</p>
<p>7.动画实现的速度选择</p>
<p>8.对于动画新建图层</p>
<p>9.启用GPU硬件加速</p>
<p>以上是别人总结的……下面我来讲讲我踩得坑</p>
<p>1.背景图片设置默认高度。因为图片没加载出来的时候如果没有设置默认高度，会导致图片加载的时候时时回流，因此每时每刻都在消耗性能。</p>
<p>2.用插件<a href="https://github.com/Prinzhorn/skrollr">skrollr</a>代替background-attachment :fixed做背景视差。skrollr的原理是改变图片的transform属性，而background-attachment会时时触发回流重绘。</p>
<p>3.FILP(<strong>F</strong>irst、<strong>L</strong>ast、<strong>I</strong>nvert、<strong>P</strong>lay)思想。其原理是获取动画开头和结尾的状态，然后用transform去做动画。</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/CQN88`1T02C5I}MZ000Q}DM.png" alt="CQN88`1T02C5I}MZ000Q}DM"></p>
<p>4.tranform会新建图层，but图层不能被滥用！！否则会造成composite的高消耗</p>
<h2 id="针对动画优化JS"><a href="#针对动画优化JS" class="headerlink" title="针对动画优化JS"></a>针对动画优化JS</h2><h3 id="帧数"><a href="#帧数" class="headerlink" title="帧数"></a>帧数</h3><p>​    相当一部分的浏览器的显示频率是16.7ms（1000/60），意味着动画要到达到60帧/秒，因此浏览器渲染每帧的时间要不得超过16.7ms，但是浏览器除了渲染还有很多工作要做，因此我们应该控制在10ms-12ms之内完成渲染工作</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image32.png" alt="image32"></p>
<p>​    显示器16.7ms刷新间隔之前发生了其他绘制请求(setTimeout)，导致所有第三帧丢失，继而导致动画断续显示（堵车的感觉），这就是过度绘制带来的问题。</p>
<h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p>
<h3 id="Web-worker"><a href="#Web-worker" class="headerlink" title="Web worker"></a>Web worker</h3><p>分离无页面渲染无关的逻辑计算</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image33.png" alt="image33"></p>
<h3 id="函数节流和函数防抖"><a href="#函数节流和函数防抖" class="headerlink" title="函数节流和函数防抖"></a>函数节流和函数防抖</h3><p>针对scroll事件中的回调，思路之一是对事件进行“稀释”，减少事件回调的执行次数。</p>
<p><strong>函数去抖（debounce）</strong>：让函数只有在过完一段时间后并且<strong>该段时间内不被调用</strong>才会被执行</p>
<p><strong>函数节流（throttle）</strong>：让函数在指定的时间段内<strong>周期性地间断</strong>执行</p>
<p><a href="https://wall-wxk.github.io/blogDemo/2017/02/15/throttleAndDebounce.html">例子1</a></p>
<p><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">例子2</a> - 这篇文章讲的非常到位咯</p>
<p>不知道从哪截的图（侵删）</p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image34.png" alt="image34"></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image35.png" alt="image35"></p>
<h3 id="避免强制重排（StoppingForced-Synchronous-Layout）"><a href="#避免强制重排（StoppingForced-Synchronous-Layout）" class="headerlink" title="避免强制重排（StoppingForced Synchronous Layout）"></a>避免强制重排（StoppingForced Synchronous Layout）</h3><p><a href="http://output.jsbin.com/aqavin/2/quiet">例子</a></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image36.png" alt="image36"></p>
<p><img src="/2019/02/08/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B0%8F%E8%AE%B0/image37.png" alt="image37"></p>
]]></content>
      <categories>
        <category>front end</category>
      </categories>
      <tags>
        <tag>性能</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端交互解决跨域问题</title>
    <url>/2019/02/07/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>前后端交互解决跨域问题</p>
<p>1、 开发中，使用nginx反向代理问题，涉及set-cookie、cookie问题的使用fiddler抓包进行更改设置</p>
<p>2、 上线的时候</p>
<p>后台与前端页面同源，则可以忽略跨域问题。</p>
<p>后台与前端页面不同源</p>
<ol>
<li><p>CORS资源共享，使用nginx反向代理，注意前端页面的url应与反向代理的url同域</p>
</li>
<li><p>Ajax请求中设置xhrFields:{withCredentials:true}，后台需要设置Access-Control-Allow-Credentials: true，需要注意的是服务器不得设置 Access-Control-Allow-Origin的值为<em>，否则浏览器将会抛出The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘</em>‘ 错误。</p>
</li>
</ol>
<p>​   3.  反向代理</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name carrie.lifengjun.xin;</span><br><span class="line"> 		root	/usr/local/www/website;</span><br><span class="line">        	index index.html index.htm index.php;</span><br><span class="line">		listen 443</span><br><span class="line">		ssl on;</span><br><span class="line">                ssl_certificate   cert/214210586120730.pem;</span><br><span class="line">                ssl_certificate_key  cert/214210586120730.key;</span><br><span class="line">                ssl_session_timeout 5m;</span><br><span class="line">                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">                ssl_prefer_server_ciphers on;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">#proxy_set_header Host $host;</span></span><br><span class="line">		location /news</span><br><span class="line">		&#123;</span><br><span class="line">			proxy_pass https://www.eunieunieuni.xin/news;</span><br><span class="line">			proxy_set_header Cookie <span class="variable">$http_cookie</span>;</span><br><span class="line">			proxy_set_header Host lifengjun.xin;		</span><br><span class="line">			proxy_cookie_domain lifengjun.xin www.eunieunieuni.xin;			</span><br><span class="line">			<span class="comment">#add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span></span><br><span class="line">			<span class="comment">#add_header Access-Control-Allow-Headers &quot;Origin, X-Requested-With, Content-Type, Accept&quot;;</span></span><br><span class="line">			<span class="comment">#add_header Access-Control-Allow-Methods &quot;GET, POST, OPTIONS&quot;;</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">			add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;        		</span><br><span class="line">			<span class="comment">#</span></span><br><span class="line">        		<span class="comment"># Custom headers and headers various browsers *should* be OK with but aren&#x27;t</span></span><br><span class="line">        		<span class="comment">#</span></span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">        		<span class="comment">#</span></span><br><span class="line">        		<span class="comment"># Tell client that this pre-flight info is valid for 20 days</span></span><br><span class="line">        		<span class="comment">#</span></span><br><span class="line">       	 	add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> 1728000;</span><br><span class="line">        		add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain charset=UTF-8&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Content-Length&#x27;</span> 0;</span><br><span class="line">        		<span class="built_in">return</span> 204;</span><br><span class="line">     		&#125;		</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">     		&#125;</span><br><span class="line">     		<span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        		add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用fiddler反向代理</p>
<p><img src="/2019/02/07/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>front end</category>
      </categories>
      <tags>
        <tag>CORS</tag>
        <tag>fiddler</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu14.04.5 LTS下安装LMNP环境</title>
    <url>/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>前言：不同的服务器有不同的配置方法，比如ubunto与centOS的情况不一样，要按照具体情况而定，由于服务器配置没有一个规范的教程，所以配置过程中可能会出现千奇百怪的问题，下述文档是我在购买的学生机阿里云上能够配置成功的总结，如果出现其他总结最好还是自己百度、谷歌…各种</p>
<span id="more"></span>
<p>准备工作</p>
<p>Windows 下载 xshell 用于远程连接服务器 ，下载 xftp 用于传输文件</p>
<p>安装LNMP的方法</p>
<p>方法一:</p>
<p>一键安装: <a href="https://lnmp.org/download.html">https://lnmp.org/download.html</a></p>
<p>在服务器终端输入命令（根据更新进行调整）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>soft.vpser.net<span class="regexp">/lnmp/</span>lnmp1.<span class="number">4</span>.tar.gz  </span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf  lnmp1.<span class="number">4</span>.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入解压后生成的文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> lnmp1.<span class="number">4</span> </span><br></pre></td></tr></table></figure>
<p>执行安装程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p>在安装选项中进行版本选择，等待，安装完毕。</p>
<p>方法二：</p>
<p>阿里云一键装机（缺点：貌似会捆绑个phpwind，不过可以快速建站wordpress，教程链接如下</p>
<p><a href="https://help.aliyun.com/document_detail/44595.html?spm=5176.doc43244.6.699.meslKb">https://help.aliyun.com/document_detail/44595.html?spm=5176.doc43244.6.699.meslKb</a></p>
<p>方法三：</p>
<p>我的手装</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>准备工作：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span><span class="built_in"> upgrade </span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install</span><br></pre></td></tr></table></figure>
<hr>
<p>可能出现的问题</p>
<p>1.sudo: unable to resolve host root(hostname)</p>
<p>解决方案：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/ect/</span>hosts</span><br></pre></td></tr></table></figure>
<p>增加</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> root(yourhostname)</span><br></pre></td></tr></table></figure>
<p>命令<code>Wq!</code>保存</p>
<p>2.E: Unable to locate package update</p>
<p>解决方案：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<p>来更新安装包</p>
<hr>
<p>下载nginx</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install nginx</span><br></pre></td></tr></table></figure>
<p>输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -t</span> </span><br></pre></td></tr></table></figure>
<p>如果出现</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/01.png" alt="01"></p>
<p>或者输入</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span> </span><br></pre></td></tr></table></figure>
<p>出现</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/02.png" alt="02"></p>
<p>或者直接在浏览器上输入你的公网IP出现</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/03.png" alt="03"></p>
<p>则证明nginx安装成功</p>
<h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>nginx/sites-available</span><br></pre></td></tr></table></figure>
<p>命令<code>ls</code>可以看到default</p>
<p>命令<code>vi default</code>可以看到默认配置</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/04.png" alt="04"></p>
<p>这是一个可以参考的标准配置设置</p>
<p>为了防止影响<code>nginx.conf</code>配置，所以我把其中的内容全部注释了</p>
<p>也可以使用<code>rm -rf default</code> 直接把default删除</p>
<p>其中</p>
<ul>
<li><p>Listen</p>
<p>是监听的端口号</p>
</li>
<li><p>root</p>
<p>是网站根目录</p>
</li>
<li><p>root</p>
<p>下面是主页设置（大概吧）</p>
</li>
<li><p>server_name</p>
<p>是域名填写</p>
</li>
</ul>
<p>退出编辑，命令<code>cd ..</code> ，回到上级目录<code>/ect/nginx</code>，命令<code>ls</code>可以看到<code>nginx.conf</code>，这是Nginx的配置文件，命令<code>vi nginx.conf ,在http的括号里面输入</code></p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">        listen <span class="number">80</span> default_server;</span><br><span class="line">        listen [::]:<span class="number">80</span> default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        server_name server_domain_name_or_IP;</span><br><span class="line">        root root directory</span><br><span class="line">        <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#               location / &#123;</span></span><br><span class="line">        <span class="meta">#                       try_files $url $url/ =404;</span></span><br><span class="line">        <span class="meta">#               &#125;</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>由于location会报错，先注释掉，退出编辑</p>
<p>这时候可以用域名访问网站了（当然前提是你域名备案解析弄好）</p>
<h2 id="ssl证书的配置"><a href="#ssl证书的配置" class="headerlink" title="ssl证书的配置"></a>ssl证书的配置</h2><p><a href="https://yundun.console.aliyun.com/?p=cas#/cas/download/214181433450730">https://yundun.console.aliyun.com/?p=cas#/cas/download/214181433450730</a>本人购买的的阿里云服务器，可以参考阿里云上的教程</p>
<hr>
<p>以下内容来自<a href="http://www.linuxidc.com/Linux/2015-05/116933.htm">http://www.linuxidc.com/Linux/2015-05/116933.htm</a></p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install mysql-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p># 连续输入两次相同的密码</p>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install php5-fpm php5-mysql</span><br></pre></td></tr></table></figure>
<h2 id="配置PHP，修改php-ini文件"><a href="#配置PHP，修改php-ini文件" class="headerlink" title="配置PHP，修改php.ini文件"></a>配置PHP，修改php.ini文件</h2><p># 备份php.ini文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>php5<span class="regexp">/fpm/</span>php.ini <span class="regexp">/etc/</span>php5<span class="regexp">/fpm/</span>php.ini.back</span><br></pre></td></tr></table></figure>
<p># 取消有安全隐患的pathinfo模式</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>php5<span class="regexp">/fpm/</span>php.ini</span><br></pre></td></tr></table></figure>
<p># 将cgi.fix_pathinfo=1 设置为 cgi.fix_pathinfo=0</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">cgi.fix_pathinfo</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>#启动php-fpm</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">sudo service php5-fpm <span class="built_in">restart</span></span><br></pre></td></tr></table></figure>
<h2 id="配置Nginx让其使用php-fpm进程"><a href="#配置Nginx让其使用php-fpm进程" class="headerlink" title="配置Nginx让其使用php-fpm进程"></a>配置Nginx让其使用php-fpm进程</h2><p>#备份/etc/nginx/sites-available/default文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span><span class="keyword">default</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span><span class="keyword">default</span>.back</span><br></pre></td></tr></table></figure>
<p>#修改defalut文件内容如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">        <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server ipv6only=<span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> root directory</span><br><span class="line">        index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> server_domain_name_or_IP;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">      <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">      <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">      <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">    <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">fastcgi_paramSCRIPT_FILENAME</span> <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在服务器网站根目录创建一个php文件，命名为<code>info.php</code>输入以下内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span>   </span><br></pre></td></tr></table></figure>
<p>保存后退出</p>
<p>在浏览器访问e.g <a href="http://**yourId**/info.php">http://**yourId**/info.php</a></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/05.png" alt="05"></p>
<p>出现上图则证明配置php成功</p>
<p>命令<code>命令netstat -tunpl</code>检查安装结果</p>
<p>端口与服务信息说明如下：</p>
<ul>
<li><p>9000：</p>
<p>PHP 进程服务。如果安装的是 Apache，则没有此端口</p>
</li>
<li><p>3306：</p>
<p>MySQL 服务</p>
</li>
<li><p>80：</p>
<p>HTTPD 或者 Nginx 服务</p>
</li>
<li><p>21：</p>
<p>FTP服务</p>
</li>
</ul>
<p>最终我的配置如下</p>
<p>注：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">return      <span class="number">301</span> https:<span class="regexp">//</span><span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br></pre></td></tr></table></figure>
<p>为设置http自动跳转https</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">      user www-data;</span><br><span class="line">      worker_processes <span class="number">4</span>;</span><br><span class="line">      pid <span class="regexp">/run/</span>nginx.pid;</span><br><span class="line"></span><br><span class="line">      events &#123;</span><br><span class="line">      worker_connections <span class="number">768</span>;</span><br><span class="line">      <span class="comment"># multi_accept on;</span></span><br><span class="line">    &#125; </span><br><span class="line">    http   &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Basic Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout <span class="number">65</span>;</span><br><span class="line">    types_hash_max_size <span class="number">2048</span>;</span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">    <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">    include <span class="regexp">/etc/</span>nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    access_log <span class="regexp">/var/</span>log<span class="regexp">/nginx/</span>access.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Gzip Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip_vary on;</span></span><br><span class="line">    <span class="comment"># gzip_proxied any;</span></span><br><span class="line">    <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">    <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">    <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># nginx-naxsi config</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Uncomment it if you installed nginx-naxsi</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#include /etc/nginx/naxsi_core.rules;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># nginx-passenger config</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Uncomment it if you installed nginx-passenger</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#passenger_root /usr;</span></span><br><span class="line">    <span class="comment">#passenger_ruby /usr/bin/ruby;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Virtual Host Configs</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    include <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*.conf;</span><br><span class="line">    include <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>*;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    listen <span class="number">80</span> default_server;</span><br><span class="line">    listen [::]:<span class="number">80</span> default_server ipv6only=on;</span><br><span class="line">    </span><br><span class="line">    server_name domain name;</span><br><span class="line">    </span><br><span class="line">    return <span class="number">301</span> https:<span class="regexp">//</span><span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  server&#123;</span><br><span class="line">  listen <span class="number">443</span>; </span><br><span class="line"></span><br><span class="line">  server_name domain name;</span><br><span class="line">  <span class="comment">#root /usr/share/nginx/html;</span></span><br><span class="line">  root root directory;</span><br><span class="line">  index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#error_page     404     /404.html </span></span><br><span class="line"></span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate   xxx.pem;</span><br><span class="line">  ssl_certificate_key  xxx.key;</span><br><span class="line">  ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  ssl_prefer_server_ciphers on; </span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_page <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</span><br><span class="line">location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">root domain name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">try_files <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">fastcgi_pass unix:<span class="regexp">/var/</span>run/php5-fpm.sock;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$   </span><br><span class="line">&#123;   </span><br><span class="line">  expires      <span class="number">30</span>d;   </span><br><span class="line">&#125;      </span><br><span class="line">location ~ .*\.(js|css)?$   </span><br><span class="line">&#123;   </span><br><span class="line">  expires      <span class="number">1</span>h;   </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">location /nginx_status</span><br><span class="line">&#123;</span><br><span class="line">  stub_status on;</span><br><span class="line">  access_log   off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /.well-known &#123;</span><br><span class="line">allow all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /\.</span><br><span class="line">&#123;</span><br><span class="line">  deny all;</span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">#       # See sample authentication script at:</span></span><br><span class="line"><span class="comment">#       # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       # auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">#       # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">#       # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       server &#123;</span></span><br><span class="line"><span class="comment">#               listen     localhost:110;</span></span><br><span class="line"><span class="comment">#               protocol   pop3;</span></span><br><span class="line"><span class="comment">#               proxy      on;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       server &#123;</span></span><br><span class="line"><span class="comment">#               listen     localhost:143;</span></span><br><span class="line"><span class="comment">#               protocol   imap;</span></span><br><span class="line"><span class="comment">#               proxy      on;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以下是一键下载nginx.conf的配置文件，同样可以通过命令<code>nginx -t</code> 找到nginx.conf 的位置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  www www;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">error_log</span>  /home/wwwlogs/nginx_error.log  <span class="literal">crit</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">pid</span>        /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line">  <span class="attribute">worker_rlimit_nofile</span> <span class="number">51200</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">events</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">51200</span>;</span><br><span class="line">  <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">include</span>       mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">  <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">  <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">sendfile</span>   <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">  <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">  <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">  <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">256k</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_min_length</span>  <span class="number">1k</span>;</span><br><span class="line">  <span class="attribute">gzip_buffers</span>     <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">  <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span>     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;</span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_proxied</span>   expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">  <span class="attribute">gzip_disable</span>   <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#limit_conn_zone $binary_remote_addr zone=perip:10m;</span></span><br><span class="line">  <span class="comment">##If enable limit_conn_zone,add &quot;limit_conn perip 10;&quot; to server section.</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">  <span class="comment">#listen [::]:80 default_server ipv6only=on;</span></span><br><span class="line">  <span class="attribute">server_name</span> domain name</span><br><span class="line">  index index.html index.htm index.php;</span><br><span class="line">  <span class="attribute">root</span>  root directory;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#error_page   404   /404.html;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span>; </span><br><span class="line">  <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_certificate</span>  xxx.cem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>  xxx.key;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Deny access to PHP files in specific directory</span></span><br><span class="line">  <span class="comment">#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ &#123; deny all; &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> enable-php.conf;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /nginx_status</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">expires</span>      <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ .*\.(js|css)?$</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">expires</span>      <span class="number">12h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ /.well-known</span> &#123;</span><br><span class="line"><span class="attribute">allow</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ /\.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">access_log</span>  /home/wwwlogs/access.log;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>补充</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install php5-curl</span><br></pre></td></tr></table></figure>
<p>安装PHP第三方依赖</p>
<h2 id="配置root-及应用账号权限"><a href="#配置root-及应用账号权限" class="headerlink" title="配置root 及应用账号权限"></a>配置root 及应用账号权限</h2><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>命令 <code>adduser lifengjun</code></p>
<p>命令 <code>两次输入密码</code></p>
<h3 id="给用户配置权限"><a href="#给用户配置权限" class="headerlink" title="给用户配置权限"></a>给用户配置权限</h3><p>命令 <code>gpasswd -a lifengjun sudo</code></p>
<p>命令 <code>sudo visudo 打开sudoers.tmp</code></p>
<p>增加下述内容 <code>lifengjun ALL=(ALL:ALL) ALL</code></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image013.jpg" alt="image013"></p>
<p><code>Ctrl + x , Shift + Y</code> , 回车</p>
<p>命令 <code>service ssh restart</code></p>
<p>重启一个命令行，<code>ssh lifengjun@youIp</code></p>
<p>输入密码后就可以链接到服务器了</p>
<h2 id="主机用户的密码添加"><a href="#主机用户的密码添加" class="headerlink" title="主机用户的密码添加"></a>主机用户的密码添加</h2><p>命令：<code>sudo passwd</code></p>
<h2 id="主机名操作"><a href="#主机名操作" class="headerlink" title="主机名操作"></a>主机名操作</h2><h3 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h3><p>命令 <code>hostname</code></p>
<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>命令<code>hostname 新主机名</code></p>
<p>重启终端</p>
<h2 id="配置本地无密码SSH登录"><a href="#配置本地无密码SSH登录" class="headerlink" title="配置本地无密码SSH登录"></a>配置本地无密码SSH登录</h2><p>转载自<a href="http://www.aiezu.com/system/linux/xshell_ssh_public-key_login.html">http://www.aiezu.com/system/linux/xshell_ssh_public-key_login.html</a></p>
<p><a href="http://www.aiezu.com/tag/ssh">ssh</a>登录提供两种认证方式：口令(密码)认证方式和密钥认证方式。其中口令(密码)认证方式是我们最常用的一种，这里介绍密钥认证方式登录到<a href="http://www.aiezu.com/category/system/linux">linux</a>/<a href="http://www.aiezu.com/category/system/unix">unix</a>的方法。</p>
<p>使用密钥登录分为3步：<br> 1、生成密钥（公钥与私钥）；<br> 2、放置公钥(Public Key)到服务器~/.ssh/authorized_key文件中；<br> 3、配置ssh客户端使用密钥登录。</p>
<h3 id="一、生成密钥公钥（Public-key）与私钥-Private-Key"><a href="#一、生成密钥公钥（Public-key）与私钥-Private-Key" class="headerlink" title="一、生成密钥公钥（Public key）与私钥(Private Key)"></a>一、生成密钥公钥（Public key）与私钥(Private Key)</h3><p>打开Xshell，在菜单栏点击“tools”，在弹出的菜单中选择“新建用户密钥生成向导”，如下图：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image015.jpg" alt="image015"></p>
<p>弹出“新建用户密钥生成向导”对话框，在“密钥类型”项选择“RSA”公钥加密算法，“密钥长度”选择为“2048”位密钥长度，如下图：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image016.png" alt="image016"></p>
<p>点击“下一步”，等待密钥生成</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image017.png" alt="image017"></p>
<p>继续下一步，在“密钥名称”中输入Key的文件名称，我这里为“key”；在“密码”处输入一个密码用于加密私钥，并再次输入密码确认，如下图：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image018.png" alt="image018"></p>
<p>点击“下一步”，密钥生成完毕（公钥格式选择SSH2-OpenSSH格式），这里显示的是公钥，我们可以复制公钥然后再保存，也可以直接保存公钥到文件，如下图。私钥这里不显示，可以在“用户密钥管理者”导出到文件：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image019.jpg" alt="image019"></p>
<p>点击“保存为文件”按钮，将公钥(Public key)保存到磁盘，文件名为“key.pub”，备用。</p>
<h3 id="二、上传公钥-Public-Key-到服务器："><a href="#二、上传公钥-Public-Key-到服务器：" class="headerlink" title="二、上传公钥(Public Key)到服务器："></a>二、上传公钥(Public Key)到服务器：</h3><p>​    使用到Xshell登录到服务器，进入到“/<a href="http://www.aiezu.com/tag/root">root</a>/.ssh/”目录，运行rz命令(如果没有rz命令，运行sudo apt-get install lrzsz安装)，将key.pub发送到服务器，然后运行如下命令，将公钥(Public Key)导入到“authorized_keys”文件：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> [root<span class="symbol">@localhost</span> ~]<span class="meta"># cd /root/.ssh/</span></span><br><span class="line"><span class="number">2.</span> [root<span class="symbol">@localhost</span> .ssh]<span class="meta"># rz</span></span><br><span class="line"><span class="number">3.</span> rz waiting <span class="keyword">to</span> receive.</span><br><span class="line"><span class="number">4.</span> [root<span class="symbol">@localhost</span> .ssh]<span class="meta"># cat me.pub &gt;&gt; authorized_keys</span></span><br><span class="line"><span class="number">5.</span> [root<span class="symbol">@localhost</span> .ssh]<span class="meta"># chmod 600 authorized_keys</span></span><br><span class="line"><span class="number">6.</span> [root<span class="symbol">@localhost</span> .ssh]<span class="meta"># ls</span></span><br><span class="line"><span class="number">7.</span> authorized_keys known_hosts me.pub</span><br><span class="line"><span class="number">8.</span> [root<span class="symbol">@localhost</span> .ssh]<span class="meta"># cat authorized_keys</span></span><br><span class="line"><span class="number">9.</span> ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA4VCOWFrARc1m3MfEAL50v2Z2siavO3Ijpr/LZ00EZah8EjfZhqjAc/agkljyXmNGpVDpRdtlYco8h3P5vegXOEgKcX74fDYm0vNdVABVD1XSD8ElNyLTCCNk7rZJbi3htJox3Q1n0vnMmB5d20d9occkAx4Ac94RWNS33EC5CszNTMgAIn+uZl0FlQklS1oSyWFahSTWyA6b33qG7Y5E4b6J/caObnPx6EgtBrgi97gXJHZWyYlGrpWmUuhPqs5XToRB08CVxAyzewtq1MXv0p+Po4L1pbHLRf+TSoZ5RSBZZjY4/JMAzdXHNtnAyO0j0VNGbBXKUcNSAHZ</span><br></pre></td></tr></table></figure>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image020.jpg" alt="image020"></p>
<h3 id="三、配置Xshell使用密钥认证方式登录到服务器："><a href="#三、配置Xshell使用密钥认证方式登录到服务器：" class="headerlink" title="三、配置Xshell使用密钥认证方式登录到服务器："></a>三、配置Xshell使用密钥认证方式登录到服务器：</h3><p>​    打开Xshell，点击“New”按钮，弹出“新建会话属性”对话框，在“连接”栏目中，输入刚刚配置好公钥(Public Key)的IP地址和端口，如下图所示：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image022.jpg" alt="image022"></p>
<p> <img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image024.jpg" alt="image024"></p>
<p>点击左侧的“用户身份验证”,切换到认证栏目，在“方法”选择“Public Key”认证，用户名输入“root”(公钥是放在root目录下的.ssh文件夹中)，在“用户密钥”中选择我们刚才生成的私钥“key”,“密码”中输入私钥的加密密码。</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image025.png" alt="image025"></p>
<p>点击确定，Xshell配置ssh免密码登录配置完成。</p>
<h3 id="附录：linux-ssh-keygen命令生成密钥："><a href="#附录：linux-ssh-keygen命令生成密钥：" class="headerlink" title="附录：linux ssh-keygen命令生成密钥："></a>附录：linux ssh-keygen命令生成密钥：</h3><p>其实，linux下的ssh-keygen下也可以生成密钥，在linux下输入ssh-keygen -t rsa，在提示下，输入密钥的名称(这里为key)和私钥加密密码,既完成密钥生成。生成的两个文件中，“key”为私钥，“key.pub”为公钥。如下图所示：</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image026.jpg" alt="image026"></p>
<h2 id="修改服务器默认登录端口-22-important防火墙也要修改"><a href="#修改服务器默认登录端口-22-important防火墙也要修改" class="headerlink" title="修改服务器默认登录端口(:22)(!important防火墙也要修改)"></a>修改服务器默认登录端口(:22)(!important防火墙也要修改)</h2><p>命令 <code>vi /etc/ssh/sshd_config 找到Port 22</code></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image028.jpg" alt="image028"></p>
<p>修改为大于1024（0-65536）（因为0-1024通常是系统进程占用的端口）比如说4000</p>
<p>移动到最后一行，添加一行 <code>AllowUsers lifengjun</code>（个人感觉加了这条命令之后root变成了未注册，谨慎！！！）</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image030.jpg" alt="image030"></p>
<p>保存退出</p>
<p>命令<code>sudo service ssh restart</code>重启ssh服务</p>
<p>此时新建一个本地shell，再次登录就会失败</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image031.png" alt="image031"></p>
<p>此时想用xshell登录服务器的4000端口就需要重新配置</p>
<p>新建会话属性</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image032.png" alt="image032"></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image033.png" alt="image033"></p>
<p>方法public key或者keyword都是可以的，当然public key前提是你配置过免密码登录</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image035.jpg" alt="image035"></p>
<p>然后如果是阿里云的话不要忘记配置安全组打开4000端口</p>
<p>回到xshell新建会话</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image036.png" alt="image036"></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image037.png" alt="image037"></p>
<p>最终可以登录进入4000端口</p>
<h2 id="配置iptables和Fail2Ban增强安全防护"><a href="#配置iptables和Fail2Ban增强安全防护" class="headerlink" title="配置iptables和Fail2Ban增强安全防护"></a>配置iptables和Fail2Ban增强安全防护</h2><p>准备：</p>
<p>命令 <code>sudo apt-get update</code></p>
<p>命令<code>sudo apt-get upgrade</code></p>
<p>命令 <code>sudo vi /etc/iptables.up.rules</code>新建文件</p>
<p>编辑如下文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*filter</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># allow all connections</span></span><br><span class="line"></span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># allow out traffic</span></span><br><span class="line"></span><br><span class="line">-A OUTPUT -j ACCEPT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># allow http https</span></span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># allow ssh port login</span></span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># ping</span></span><br><span class="line"></span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># log denied calls</span></span><br><span class="line"></span><br><span class="line">-A INPUT -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 5/min -j LOG --log-prefix <span class="string">&quot;iptables denied:&quot;</span> --log-level 7</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># drop incoming sensitive connections</span></span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --<span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp --dport 80 -i eht0 -m state --state NEW -m recent --update --second 60 --hitcount 150 -j DROP</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment">#reject all other inbound</span></span><br><span class="line"></span><br><span class="line">-A INPUT -j REJECT</span><br><span class="line"></span><br><span class="line">-A FORWARD -j REJECT</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>命令 <code>sudo iptables-restore &lt; /etc/iptables.up.rules</code></p>
<p>命令 <code>sudo ufw enable</code>激活防火墙i</p>
<p>命令 <code>sudo ufw status</code>查看是否激活</p>
<p>打印出Status: active 证明防火墙已经被激活</p>
<p>配置防火墙路径设置开机自动启动</p>
<p>命令 <code>sudo vi /etc/network/if-up.d/iptables</code></p>
<p>编辑脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">\<span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">iptables-restore /etc/iptables.up.rules</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>命令<code>sudo chmod +x /etc/network/if-up.d/iptables</code></p>
<p>Fail2ban</p>
<p>命令<code>sudo apt-get install fail2ban</code></p>
<p>打开配置文件</p>
<p>命令<code>sudo vi /etc/fail2ban/jail.conf</code></p>
<p>查看状态</p>
<p>命令<code>sudo service fail2ban status</code></p>
<p>开启/停止<code>sudo service fail2ban start/stop</code></p>
<h2 id="搭建服务器的Node-js环境"><a href="#搭建服务器的Node-js环境" class="headerlink" title="搭建服务器的Node.js环境"></a>搭建服务器的Node.js环境</h2><p>同样给出阿里云一键安装及部署上线教程<a href="https://help.aliyun.com/document_detail/50775.html?spm=5176.doc43244.6.715.DHu5FY">https://help.aliyun.com/document_detail/50775.html?spm=5176.doc43244.6.715.DHu5FY</a></p>
<p>下面是手装教程</p>
<p>命令<code>sudo apt-get install vim</code></p>
<p>命令<code>sudo apt-get install open</code></p>
<p>命令<code>sudo apt-get install ssl</code></p>
<p>命令<code>sudo apt-get install build-essential</code></p>
<p>命令<code>sudo apt-get install libssl-dev</code></p>
<p>命令<code>sudo apt-get install wget</code></p>
<p>命令<code>sudo apt-get install curl</code></p>
<p>命令<code>sudo apt-get install git</code></p>
<p>以上为安装依赖</p>
<p>安装nvm</p>
<p>命令<code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</code></p>
<p>来自<a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></p>
<p>将nvm加入环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>安装node.js 8.9.4</p>
<p>命令<code>nvm install v 8.9.4</code></p>
<p>制定版本</p>
<p>命令<code>nvm use v 8.9.4</code></p>
<p>命令<code>nvm alias default v8.9.4</code></p>
<p>查看Node的版本</p>
<p>命令<code>node -v</code></p>
<p>打印出v8.9.4</p>
<p>通过指定使用淘宝的镜像进行下载npm</p>
<p>命令 <code>npm --registry=https://registry.npm.taobao.org install -g npm</code></p>
<p>查看版本</p>
<p>命令<code>npm -v</code></p>
<p>增加系统文件结构数目？？</p>
<p>命令<code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl –p</code></p>
<p>安装cnpm(网络太慢才使用)</p>
<p>命令<code>npm --registry=https://registry.npm.taobao.org install -g cnpm</code></p>
<p>查看版本</p>
<p>命令<code>cnpm -v</code></p>
<p>工具包安装（i是install的缩写）</p>
<p><code>npm i pm2 webpack gulp grunt-cli -g</code></p>
<p>在根目录下新建一个文件server.js</p>
<p>键入</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = require(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="keyword">function</span> (<span class="params">req, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">       response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;content-Type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">       response.end(<span class="string">&#x27;Hello world\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Server running at 8081 port&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>命令<code>sudo vi /etc/iptables.up.rules</code></p>
<p>暂时添加配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">443</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">80</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">8081</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>重新载入配置</p>
<p>命令<code>sudo iptables-restore &lt; /etc/iptables.up.rules</code></p>
<p>命令 <code>node server.js</code>启动</p>
<p>如果用ip地址访问要关闭ssl证书服务</p>
<p>命令<code>vi /ect/nginx/nginx.conf</code></p>
<p>找到ssl on后在前面输入一个#以注释，然后保存退出</p>
<p>在服务器上输入<a href="http://youip:8081">http://youip:8081</a>即可访问</p>
<p>使用pm2让将nodejs跑起来（pm2：node部署和进程管理工具）</p>
<p>Pm2 常用命令：<a href="https://www.douban.com/note/314200231/">https://www.douban.com/note/314200231/</a><br> 安装全局</p>
<p>命令<code>npm install pm2 -g</code></p>
<p>启动服务</p>
<p>命令<code>pm2 start xxx.js</code></p>
<p>列出服务器的服务</p>
<p>命令<code>pm2 list</code></p>
<p>查看详细信息</p>
<p>命令<code>pm2 show name</code></p>
<p>查看服务器实时信息</p>
<p>命令<code>pm2 logs</code></p>
<p>配置nginx反向代理nodejs端口</p>
<p>准备工作：移除apache服务</p>
<p>命令<code>sudo service apache2 stop</code></p>
<p>命令<code>sudo service apache stop</code></p>
<p>命令<code>udate-rc.d -f apache2 remove</code></p>
<p>命令<code>sudo apt-get remove apache2</code></p>
<p>测试首先关闭ssl证书服务</p>
<p>命令<code>vi /ect/nginx/nginx.conf</code></p>
<p>找到ssl on后在前面输入一个#以注释，然后保存退出</p>
<p>进入nginx配置下的目录</p>
<p>命令<code>cd /ect/nginx/conf.d</code></p>
<p>创建新的文件</p>
<p>命令<code>sudo vi lifengjun-xin-8081.conf</code></p>
<p>输入一下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream lifengjun&#123;</span><br><span class="line"></span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"></span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        server_name 47.94.157.241;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">                proxy_set_header X-Forward-For &amp;proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">                proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                proxy_pass http://lifengjun;</span><br><span class="line"></span><br><span class="line">                proxy_redirect off;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>命令<code>nginx -s reload</code>重启服务器</p>
<p>在浏览器中输入你的ip，前提是你用pm2启用了server.js的服务</p>
<p>然后就可以看到Hello World从而实现了nginx反向代理node.js端口</p>
<p>补充</p>
<p>nginx.conf 中有一项</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image038.png" alt="image038"></p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image039.png" alt="image039"></p>
<p>拿掉注释后reload</p>
<p><img src="/2019/02/07/ubuntu14.04.5%20LTS%E4%B8%8B%E5%AE%89%E8%A3%85LMNP%E7%8E%AF%E5%A2%83/image040.png" alt="image040"></p>
<p>隐藏nginx版本</p>
<h2 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h2><p>浏览器打开<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/</a></p>
<p>按照里面的步骤安装</p>
<p>命令<code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv0C49F3730359A14518585931BC711F9BA15703C6</code></p>
<p>命令<code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></p>
<p>(ubuntu14.04)命令<code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></p>
<p>命令<code>sudo apt-get update</code></p>
<p>命令<code>sudo apt-get install -y mongodb-org</code></p>
<p>开启MongoDB</p>
<p>命令<code>sudo service mongod start</code></p>
<p>停止MongoDB</p>
<p>命令<code>sudo service mongod stop</code></p>
<p>重启MongoDB</p>
<p>命令<code>sudo service mongod restart</code></p>
<p>判断是否开启成功（查看日志）</p>
<p>命令<code>cat /var/log/mongodb/mongod/log</code></p>
<p>或者输入</p>
<p>命令<code>mongo</code></p>
<p>查看是否有版本打印</p>
<p>若连接失败，需要更改防火墙允许端口</p>
<p>命令<code>sudo vi /etc/iptables.up.rules</code></p>
<p>编辑输入</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mongodb connect</span></span><br><span class="line"></span><br><span class="line">-A INPUT -s <span class="number">127.0</span>.<span class="number">0.1</span> -p tcp --destination-port <span class="number">27017</span> -m <span class="keyword">state</span> --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A OUTPUT -d <span class="number">127.0</span>.<span class="number">0.1</span> -p tcp --source-port <span class="number">27017</span> -m <span class="keyword">state</span> --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<p>命令<code>sudo iptables-restore &lt; /etc/iptables.up.rules</code>重载</p>
<p>命令<code>mongo</code>启动</p>
<p>如何更改MongoDB默认端口</p>
<p>命令<code>sudo vi /ect/mongod.conf</code></p>
<p>找到port更改即可，然后防火墙再更改端口，重新载入防火墙配置</p>
<p>重启Mongodb</p>
<p>命令<code>sudo service mongod restart</code></p>
<p>开启服务默认端口为27017</p>
<p>如果使用别的端口登录如（18888，阿里云记得添加安全组）</p>
<p>命令为 <code>mongo --port 18888</code></p>
<p>往线上MongoDB导入单表数据或数据库</p>
<p>首先用xftp将压缩打包好的数据传输到根目录下</p>
<p>命令<code>mongorestore -p 22 -d indust-app ./indust-app-backup</code></p>
<p>查看数据</p>
<p>命令<code>mongo</code></p>
<p>命令<code>use indust-app</code></p>
<p>命令<code>show table</code></p>
<p>命令<code>db.creations.find(&#123;&#125;)</code></p>
<p>看到数据导入成功</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>LMNP</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime Text 3的配置日志</title>
    <url>/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>由于某种原因我重新安装了sublime text 3，然后忘记了之前配置的一堆插件</p>
<p>今天写下来备忘.!important只介绍windows下的配置</p>
<span id="more"></span>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.首先去 <a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3 </a>下载最新版的sublime text 3，如果你翻墙或者使用迅雷会员速度会快一些，否则要有些耐心…或者我可以分享我的百度云地址 链接：<a href="http://pan.baidu.com/s/1qX9Zipe">http://pan.baidu.com/s/1qX9Zipe </a>密码：voeo</p>
<p>2.下载完成后直接安装</p>
<p>3.打开sublime text 3</p>
<p>4.快捷键<code>ctrl + ~</code>（Esc下面那个）打开控制台，复制以下代码以安装package control</p>
<p><a href="https://packagecontrol.io/installation">https://packagecontrol.io/installation</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">&#x27;6f4c264a24d933ce70df5dedcf1dcaee&#x27;</span> + <span class="string">&#x27;ebe013ee18cced0ef93d5f746d80ef60&#x27;</span>; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%20&#x27;</span>)).<span class="keyword">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="keyword">open</span>(os.path.<span class="keyword">join</span>( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).<span class="keyword">write</span>(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure>
<p>如果出现什么<del>XJB</del></p>
<p>There are no packages available for installation</p>
<p>首先你可以上百度寻找方案，大概有两种，但是我试了很久都不行，我的解决方案是使用手机流量下载（事实证明后来耗费了很多流量），或者是换一个网络，原因你直接百度可以知道，不作过多赘述</p>
<p>5.快捷键<code>cirl + shift + p</code>打开命令面板,输入<code>install</code></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/01.png" alt="01"></p>
<p>选择 <code>Package Control:Install Package</code></p>
<p>等待…</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/02.png" alt="02"></p>
<p>弹出</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/03.png" alt="03"></p>
<p>表示加载完成，输入插件名称，即可开始自动下载安装插件</p>
<hr>
<p>下面安装插件的列表</p>
<h2 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h2><p>前端自动补全工具，非常强，比如在html格式下输入!，然后按tab 效果如下：</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/04.png" alt="04"></p>
<p>如果出现下述问题</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/05.png" alt="05"></p>
<p>解决方案来源： <a href="http://blog.initm.com/sublime-text/">http://blog.initm.com/sublime-text/</a></p>
<ul>
<li><p>\1. 去gihub下载 PyV8,连接地址：<a href="https://github.com/emmetio/pyv8-binaries#readme">https://github.com/emmetio/pyv8-binaries#readme</a></p>
</li>
<li><p>\2. 然后找到你的Sublime_text_3的packages的安装包路径</p>
<ol>
<li><p>a.如果你是windows系统：解压文件至Packages\PyV8文件夹内<code>Preferences &gt; Browser Packages</code>，重启解决。</p>
</li>
<li><p>b.如果你是</p>
<p>linux/ubuntu</p>
<p>,找到相应的路径，根据我在unbuntu14.04下面，解决如下：</p>
<ul>
<li>（1）在当前用户中使用命令:<code>ll</code></li>
<li>（2）你会发现一个<code>.config</code>的隐藏文件夹</li>
<li>（3）然后依次进去找到sublime_text</li>
<li>（4）Packages创建PyV8文件夹，把刚才下载的文件解压进去，重启解决</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>转载请注明：梦回起点-獨行的个人博客 » <a href="http://blog.initm.com/sublime-text/">解决Sublime提示 Sublime Text Error while loading PyV8 binary:exit code 1 Try to manually install Pyv8 form https://github.com/emetio/pyv8-binaries</a></p>
<p>同样给出我的百度云链接：<a href="http://pan.baidu.com/s/1miocS44">http://pan.baidu.com/s/1miocS44</a> 密码：an9l</p>
<h2 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h2><p>用于快捷键打开指定浏览器，有的人问为什么不用DreamWeaver或者Webstorm自带的查看效果，但是大佬说始终会有差异、兼容性的问题blablabla</p>
<p>安装好以后点击工具栏的<code>preferences &gt; package setting &gt; side bar &gt; Key Building-User</code>，键入以下代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="comment">/*&#123; &quot;keys&quot;: [&quot;alt+f12&quot;], &quot;command&quot;: &quot;side_bar_open_in_browser&quot;, &quot;args&quot;:&#123;&quot;paths&quot;:[], &quot;type&quot;:&quot;production&quot;, &quot;browser&quot;:&quot;&quot;&#125; &#125;,*/</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ctrl+shift+c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy_path&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">//chrome </span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;f1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;side_bar_files_open_with&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C://Program Files (x86)//Google//Chrome//Application//chrome.exe&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span><span class="string">&quot;.*&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//firefox </span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;f2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;side_bar_files_open_with&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E://软件//Firefox//firefox.exe&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span><span class="string">&quot;.*&quot;</span>  <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ie </span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;f3&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;side_bar_files_open_with&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C://Program Files//Internet Explorer//iexplore.exe&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span><span class="string">&quot;.*&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line">          </span><br></pre></td></tr></table></figure>
<p>其中application是浏览器路径，keys是快捷键设置</p>
<h2 id="view-in-browser-同样相似功能的插件"><a href="#view-in-browser-同样相似功能的插件" class="headerlink" title="view in browser (同样相似功能的插件)"></a>view in browser (同样相似功能的插件)</h2><p>于<code>key bindings</code>键入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ie </span></span><br><span class="line"><span class="comment">/* &#123; &quot;keys&quot;: [&quot;f12&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;, &quot;extensions&quot;: &quot;.*&quot; &#125; &#125;, */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//chorme </span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;f1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;side_bar_files_open_with&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span> <span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//microsoft edge </span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;f2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open_in_browser&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/06.png" alt="06"></p>
<p>注意json的格式有个外面有个[]，上处未添加</p>
<p>PS:我不清楚两者有什么差异或者不同，实在不行就把两个都安上吧，然后自己设置自己惯用的浏览器，我一般是用chrome，不行用的浏览器就用//注释掉，一般默认地址都是这样，但是不排除有的童鞋的浏览器地址比较奇葩，这就需要自己设置，右键点击浏览器，属性，然后把目标的内容复制过去，记得/要写成//转义</p>
<h2 id="colorpicker-取色器"><a href="#colorpicker-取色器" class="headerlink" title="colorpicker 取色器"></a>colorpicker 取色器</h2><p>默认快捷键<code>cirl + shift + c</code></p>
<p>如果发生冲突可以百度怎么修改</p>
<p>PS如果按照我这个流程你可以把上面那个<code>sibebaremhancements</code>中的<code>&#123; &quot;keys&quot;: [&quot;ctrl+shift+c&quot;], &quot;command&quot;: &quot;copy_path&quot; &#125;</code>,注释或者更改快捷键，虽然我不知道他是干嘛的，不过没有太大影响</p>
<h2 id="colorhighlighter"><a href="#colorhighlighter" class="headerlink" title="colorhighlighter"></a>colorhighlighter</h2><p>直接安装，效果图如下</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/07.png" alt="07"></p>
<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>用于代码检验，配置非常麻烦，不推荐使用，不过可以治好强迫症</p>
<p>初步配置node.js，我主要是为了检测代码</p>
<p>在sublime text 3 中使用eslint：</p>
<p>1.下载node.js <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>2.下载Gitbash <a href="https://lifengjun.xin/summary/sublimeText3/Gitbash%20%20https://git-for-windows.github.io/">Gitbash https://git-for-windows.github.io/</a></p>
<p>3.Gitbash 分别输入 <code>node -v</code> 和 <code>npm -v</code>检测版本，或者输入<code>node</code>，回车，再输入<code>1+2</code>，反馈是不是<code>3</code>，若是则安装成功</p>
<p>4.在Gitbash 中输入<code>npm install eslint -g</code>进行全局安装</p>
<p>5.如果时初次安装，务必输入<code>npm init</code>进行一个（用户？）初始化（网上很多教程缺省了这一步导致安装不成功），反正内容我全都点了回车</p>
<p>ps我安装了一个<code>npm install gulp-eslint@3.0.1</code> 不知道有没有用，还复制了别人一段代码到<code>.eslintrc</code>这个文件，应该是用来判断的，这串代码都烂大街了，这是我复制的那一段，感谢博主@Evan_Gu!<a href="http://blog.csdn.net/gdp12315_gu/article/details/53994029">http://blog.csdn.net/gdp12315_gu/article/details/53994029</a></p>
<p>6.输入一个<code>eslint --init</code>创造一个初始化文件</p>
<p>选项：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> a popular style guide</span><br><span class="line">Standard</span><br><span class="line">JavaScript</span><br></pre></td></tr></table></figure>
<p>建议配置如上</p>
<p>7.在sublime text 中<code>cirl + p</code>输入<code>package install</code> 安装 SublimeLinter 和 SublimeLinter</p>
<p>8.将代码<a href="http://www.jianshu.com/p/e826e13c67ec">http://www.jianshu.com/p/e826e13c67ec</a>复制到<code>Preferences-&gt;Package Settings-&gt;SublimeLinter-&gt;Settings - User</code>中，注意务必将地址修改为含有eslint.cmd的文档中</p>
<p>9.重启sublime text 3，若有以下效果则证明安装成功</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/09.png" alt="09"></p>
<p>效果图大概是这样子，不过还要自己进一步配置，除此之外还有jslint、sublimelinter..其他检验插件</p>
<p>sublimelinter、jshint、csshint的配置见下（未经检验，只是告诉自己有这样的链接）<a href="https://gaohaoyang.github.io/2015/03/26/sublimeLinter/">https://gaohaoyang.github.io/2015/03/26/sublimeLinter/</a></p>
<h2 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h2><p>这个插件可以让你在Sublime中直接使用终端打开你的项目文件夹</p>
<p>快捷键是<code>ctrl + shift + t</code></p>
<p>在Windows下默认打开的是Windows PowerShell，可配置为原生CMD，打开<code>preference–&gt;Package Settings–&gt;Terminal–&gt;Terminal Settings-users</code>复制以下代码，保存</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;terminal&quot;</span>: <span class="string">&quot;C:\\WINDOWS\\system32\\cmd.exe&quot;</span>,</span><br><span class="line">    <span class="regexp">//</span><span class="string">&quot;terminal&quot;</span>: <span class="string">&quot;C:\\Program Files\\cmder\\Cmder.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parameters&quot;</span>: [<span class="string">&quot;/START&quot;</span>, <span class="string">&quot;%CWD%&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="autofilename"><a href="#autofilename" class="headerlink" title="autofilename"></a>autofilename</h2><p>用于地址提示</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/10.png" alt="10"></p>
<h2 id="Edit-Line-Reindent"><a href="#Edit-Line-Reindent" class="headerlink" title="Edit - Line - Reindent"></a>Edit - Line - Reindent</h2><p>sublime-text 3自带的代码自动排版</p>
<p>只不过是没有设置快捷键</p>
<p>在<code>key-binding</code>中输入以下代码即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;shift+tab&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reindent&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;single_line&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中keys为快捷键设置</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/11.png" alt="11"></p>
<p>本来排版是这样的</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/12.png" alt="12"></p>
<p>后来就自动排版了，非常方便</p>
<p>补充：快速注释配置，在<code>key-binding</code>输入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ctrl+shift+x&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;toggle_comment&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;block&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h2><p>类似于代码匹配，可以匹配括号，引号等符号内的范围。</p>
<p>直接安装，效果图如下</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/12.png" alt="12"></p>
<h2 id="jsformat"><a href="#jsformat" class="headerlink" title="jsformat"></a>jsformat</h2><p>js代码规范</p>
<h2 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h2><p>sftp/ftp登录远程服务器</p>
<p><code>Install Package</code>安装<code>sftp</code></p>
<p>配置信息如下:</p>
<p>其中，路径是服务器的绝对路径</p>
<p>Sftp/ftp是有没有ssl证书，即https/http</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/13.png" alt="13"></p>
<h2 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a>DocBlockr</h2><p>注释插件，能够在JS生成优美的注释，包括函数名、参数、返回值等，并以多行显示</p>
<p>使用方法，在函数上输入<code>/**</code></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/14.png" alt="14"></p>
<p>然后按下<code>Tab</code>，效果如下</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/15.png" alt="15"></p>
<h2 id="advancedNewFile"><a href="#advancedNewFile" class="headerlink" title="advancedNewFile"></a>advancedNewFile</h2><p>用于快速创建文件</p>
<p>从前创建一个文件可以通过<code>ctrl + n</code>来新建一个文件，然后<code>ctrl + s</code>进行保存，安装了该插件后就可以使用快捷键<code>ctrl + alt + n</code>，sublime Text底部就会出现一个输入框</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/16.png" alt="16"></p>
<p>输入新文件名以创造新文件</p>
<h2 id="WakaTime"><a href="#WakaTime" class="headerlink" title="WakaTime"></a>WakaTime</h2><p>用于查看自己在某个项目上码代码的时间</p>
<p>进入官网 <a href="https://wakatime.com/">https://wakatime.com/</a>, 注册登录之后, 在右上角进入用户设置界面.</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/17.png" alt="17"></p>
<p>找到api key</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/18.png" alt="18"></p>
<p>第一次安装, 需要输入api key，将其复制进入并回车</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/19.png" alt="19"></p>
<p>修改api key 可以在</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Preferences &gt; <span class="keyword">Package</span> <span class="title">settings &gt; WakaTime &gt; Settings – Default</span></span><br></pre></td></tr></table></figure>
<p>然后可以使用快捷键 ctrll + shift + p 输入<code>waka</code></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/20.png" alt="20"></p>
<p>进入官网查看自己的耕码时间</p>
<h2 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a>SublimeTmpl</h2><p>用于快速生成文件模板</p>
<p>快捷键如下</p>
<ul>
<li><p>ctrl+alt+h</p>
<p>html</p>
</li>
<li><p>ctrl+alt+j</p>
<p>javascript</p>
</li>
<li><p>ctrl+alt+c</p>
<p>css</p>
</li>
<li><p>ctrl+alt+p</p>
<p>php</p>
</li>
<li><p>ctrl+alt+r</p>
<p>ruby</p>
</li>
<li><p>ctrl+alt+shift+p</p>
<p>python</p>
</li>
</ul>
<h2 id="CSScomb-CSS"><a href="#CSScomb-CSS" class="headerlink" title="CSScomb CSS"></a>CSScomb CSS</h2><p>用于美化与规范css的排版</p>
<p>默认快捷键为<code>ctrl + shift + c</code></p>
<p>修改快捷键的方式为<code>Preferences &gt; Package settings &gt; CSScomb CSS &gt; Settings – Key Binding – Default</code>因为与colorpicker冲突，我的修改为<code>ctrl + alt + c</code></p>
<h2 id="ClickableURLs"><a href="#ClickableURLs" class="headerlink" title="ClickableURLs"></a>ClickableURLs</h2><p>使用小插件ClickableURLs可以让文件中的URL能够点击。</p>
<p>为了绑定鼠标点击可以打开，<code>Preferences &gt; Package Settings &gt; Clickable URLs &gt; Mouse Bindings - User</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// firefox</span></span><br><span class="line">    <span class="comment">// &quot;clickable_urls_browser&quot;: &quot;\&quot;c:\\program files\\mozilla firefox\\firefox.exe\&quot; %s &amp;&quot;,</span></span><br><span class="line">    <span class="comment">//chrome</span></span><br><span class="line">    <span class="string">&quot;clickable_urls_browser&quot;</span>: <span class="string">&quot;<span class="subst">\&quot;</span>C:<span class="subst">\\</span>Program Files (x86)<span class="subst">\\</span>Google<span class="subst">\\</span>Chrome<span class="subst">\\</span>Application<span class="subst">\&quot;</span> %s &amp;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>快速打开网站的方法，右键点击文本中的url，第一栏有个open</p>
<h2 id="AutoPrefixer"><a href="#AutoPrefixer" class="headerlink" title="AutoPrefixer"></a>AutoPrefixer</h2><p>写 CSS可自动添加<code>-webkit</code> 等私有词缀，<code>Ctrl + Alt + X</code>触发。</p>
<h2 id="Sublimerge-Pro"><a href="#Sublimerge-Pro" class="headerlink" title="Sublimerge Pro"></a>Sublimerge Pro</h2><p>用于文件比对，查找不同。以下来自百度经验</p>
<p>把要比对文件拖拉到Sublime Text中。 再把要比对的两文件选取起来，再按鼠标右键选择<code>Sublimerge &gt; Compare Select Files</code></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/21.png" alt="21"></p>
<p>接着就会开始进行比对，当有差异时，则会将文字进行高亮</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/22.png" alt="22"></p>
<p>当有新增或删除的，也会在左边的行数列中显示，因此有了这个比对插件后，当下回在写网页时，忘了修改那些时，不妨可用这只插件来作辅助。</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/23.png" alt="23"></p>
<h2 id="SyncedSideBar"><a href="#SyncedSideBar" class="headerlink" title="SyncedSideBar"></a>SyncedSideBar</h2><p>每次使用<code>ctrl + p</code>打开文件的时候，改文件的位置都会在sidebar上面体现</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/24.png" alt="24"></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/25.png" alt="25"></p>
<h2 id="AlignMent"><a href="#AlignMent" class="headerlink" title="AlignMent"></a>AlignMent</h2><p>在<code>key-binding</code>设置</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;keys&quot;</span>: [<span class="string">&quot;ctrl+alt+f&quot;</span>], <span class="string">&quot;command&quot;</span>: <span class="string">&quot;alignment&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>快捷键为<code>ctrl + alt + f</code></p>
<p>并且在<code>Preferences-&gt;Package Settings-&gt;alignmemt-&gt;setting - User</code>输入以下代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // <span class="keyword">If</span> the indent <span class="keyword">level</span> <span class="keyword">of</span> a multi-<span class="type">line</span> selection should be aligned</span><br><span class="line">    &quot;align_indent&quot;: <span class="keyword">true</span>,</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">If</span> indentation <span class="keyword">is</span> done via tabs, <span class="keyword">set</span> this <span class="keyword">to</span> <span class="keyword">true</span> <span class="keyword">to</span> <span class="keyword">also</span> align</span><br><span class="line">    // mid-<span class="type">line</span> characters via tabs. This may cause alignment issues <span class="keyword">when</span></span><br><span class="line">    // viewing the file <span class="keyword">in</span> an editor <span class="keyword">with</span> different tab width settings. This</span><br><span class="line">    // will <span class="keyword">also</span> cause multi-<span class="type">character</span> operators <span class="keyword">to</span> be left-aligned <span class="keyword">to</span> the</span><br><span class="line">    // first <span class="type">character</span> <span class="keyword">in</span> the <span class="keyword">operator</span> <span class="keyword">instead</span> <span class="keyword">of</span> the <span class="type">character</span> <span class="keyword">from</span> the</span><br><span class="line">    // &quot;alignment_chars&quot; setting.</span><br><span class="line">    &quot;mid_line_tabs&quot;: <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line">    // The mid-<span class="type">line</span> characters <span class="keyword">to</span> align <span class="keyword">in</span> a multi-<span class="type">line</span> selection, changing</span><br><span class="line">    // this <span class="keyword">to</span> an empty <span class="keyword">array</span> will <span class="keyword">disable</span> mid-<span class="type">line</span> alignment</span><br><span class="line">    &quot;alignment_chars&quot;: [&quot;//&quot;],</span><br><span class="line"></span><br><span class="line">    // <span class="keyword">If</span> the <span class="keyword">following</span> <span class="type">character</span> <span class="keyword">is</span> matched <span class="keyword">for</span> alignment, <span class="keyword">insert</span> a space</span><br><span class="line">    // <span class="keyword">before</span> it <span class="keyword">in</span> the final alignment</span><br><span class="line">    &quot;alignment_space_chars&quot;: [&quot;//&quot;],</span><br><span class="line"></span><br><span class="line">    // The characters <span class="keyword">to</span> align along <span class="keyword">with</span> &quot;alignment_chars&quot;</span><br><span class="line">    // <span class="keyword">For</span> instance <span class="keyword">if</span> the = <span class="keyword">is</span> <span class="keyword">to</span> be aligned, there are a number <span class="keyword">of</span></span><br><span class="line">    // symbols that can be combined <span class="keyword">with</span> the = <span class="keyword">to</span> make an <span class="keyword">operator</span>, <span class="keyword">and</span> <span class="keyword">all</span></span><br><span class="line">    // <span class="keyword">of</span> those must be kept next <span class="keyword">to</span> the = <span class="keyword">for</span> the <span class="keyword">operator</span> <span class="keyword">to</span> be parsed</span><br><span class="line">    &quot;alignment_prefix_chars&quot;: [</span><br><span class="line">    &quot;+&quot;, &quot;-&quot;, &quot;&amp;&quot;, &quot;|&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;!&quot;, &quot;~&quot;, &quot;%&quot;, &quot;/&quot;, &quot;*&quot;, &quot;.&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>相当于将<code>setting - Default</code>中的”=”改成”//“</p>
<p>效果如下：</p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/26.png" alt="26"></p>
<p>补充一个知识点，在<code>preference-&gt;Browsers Packages中</code></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/00.png" alt="00"></p>
<p><img src="/2019/02/06/SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97/00-1.png" alt="00(2019-02-06-SublimeText3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97\00-1.png)"></p>
<p>可以看到你的sublime所安装的过的插件，可以用于重装时恢复插件</p>
<p>嗯，暂时是这些，更多实用的配置还在探索中…..</p>
]]></content>
      <categories>
        <category>development tool</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome浏览器有哪些优秀的扩展程序？</title>
    <url>/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image001.jpg" alt="image001"></p>
<p>Chrome浏览器作为目前最好用的浏览器之一，在全球市场上拥有绝对的占有率，这是截止至2017年7月的数据</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image002.png" alt="image002"></p>
<p>不仅如此，chrome网上应用店还拥有大量可扩展程序，用于丰富浏览器的功能。</p>
<p>wo在各论坛摸爬滚打了好些天，加上之前的使用经验，总结安利一波个人觉得比较有用的插件，有兴趣的童鞋可以看看（求安利~），然后希望大家可以在chrome浏览器中愉快地玩（zhuang）耍（bi）。</p>
<span id="more"></span>
<h2 id="x-highlight"><a href="#x-highlight" class="headerlink" title="x-highlight"></a>x-highlight</h2><p>“double click and highlight text.”</p>
<p>推一款霍爷爷开发的x-highlight，地址是：<a href="https://github.com/huoguangjin/x-highlight">https://github.com/huoguangjin/x-highlight</a></p>
<p>效果如下图：双击选中元素可以在全文中标记出现的地方，并且右边还有slidebar可以显示位置，可以方便看代码，目前还有一些bug和体验不佳的地方有待改进</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image000.png" alt="image000"></p>
<h2 id="Infinity新标签页"><a href="#Infinity新标签页" class="headerlink" title="Infinity新标签页"></a>Infinity新标签页</h2><p>“Infinity新标签页，基于Chrome的云应用服务，让你更优雅、轻松地使用Chrome。”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image005.jpg" alt="image005"></p>
<h2 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h2><p>“Replace new tab page with a personal dashboard featuring to-do, weather, and inspiration.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image010.jpg" alt="image010"></p>
<p>再来一发</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image012.jpg" alt="image012"></p>
<h2 id="Speed-Dial（喵喵喵，快速拨号-）"><a href="#Speed-Dial（喵喵喵，快速拨号-）" class="headerlink" title="Speed Dial（喵喵喵，快速拨号?）"></a>Speed Dial（喵喵喵，快速拨号?）</h2><p>“New Tab Page Replacement with 3D Speed Dial and predefined images, sync and organize your bookmarks, groups, and most visited”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image014.jpg" alt="image014"></p>
<p>有一个不错的功能就是可以看到自己网站的访问次数</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image016.jpg" alt="image016"></p>
<p>当然还有其他很棒的功能</p>
<h2 id="Chrono下载管理器"><a href="#Chrono下载管理器" class="headerlink" title="Chrono下载管理器"></a>Chrono下载管理器</h2><p>“做Chrome浏览器中最好的下载管理器”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image017.png" alt="image017"></p>
<p>好吧其实主要chrome自带的下载管理器不是特别user friendly</p>
<h2 id="Neater-bookmarks"><a href="#Neater-bookmarks" class="headerlink" title="Neater bookmarks"></a>Neater bookmarks</h2><p>“灵巧实用的弹出书签”  </p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image018.png" alt="image018"></p>
<h2 id="One-Tab"><a href="#One-Tab" class="headerlink" title="One Tab"></a>One Tab</h2><p>“节省高达95％的内存，并减轻标签页混乱现象”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image019.png" alt="image019"></p>
<p>可以在标签页不用的时候收起</p>
<h2 id="Diigo-Web-Collector-Capture-and-Annotate"><a href="#Diigo-Web-Collector-Capture-and-Annotate" class="headerlink" title="Diigo Web Collector - Capture and Annotate"></a>Diigo Web Collector - Capture and Annotate</h2><p>“Bookmark, Archive, Screenshot &amp; Markup - All-In-One Web Collector, must-have research tool”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image021.png" alt="image021"></p>
<h2 id="PDF-Viewer"><a href="#PDF-Viewer" class="headerlink" title="PDF Viewer"></a>PDF Viewer</h2><p>“Uses HTML5 to display PDF files directly in the browser.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image024.jpg" alt="image024"></p>
<p>可用chrome打开PDF文件</p>
<h2 id="TinEye-Reverse-Image-Search"><a href="#TinEye-Reverse-Image-Search" class="headerlink" title="TinEye Reverse Image Search"></a>TinEye Reverse Image Search</h2><p>“This is the official TinEye Chrome extension. Find out where an image came from, how it’s used, or find higher resolution versions.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image026.jpg" alt="image026"></p>
<p>可以输入图片的URL或者直接上传图片对该图片实现反向搜索</p>
<h2 id="Imagus"><a href="#Imagus" class="headerlink" title="Imagus"></a>Imagus</h2><p>“Enlarge thumbnails, and show images/videos from links with a mouse hover.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image028.jpg" alt="image028"></p>
<p>默认设置图片上按住ctrl，可以放大缩略图，显示原图，<code>ctrl + s</code>下载该图片到本地，<code>ctrl + c</code>复制图片的URL。</p>
<h2 id="捕捉网页截图-FireShot的"><a href="#捕捉网页截图-FireShot的" class="headerlink" title="捕捉网页截图 - FireShot的"></a>捕捉网页截图 - FireShot的</h2><p>“捕捉网页截图，编辑并将它们保存为PDF，JPEG，GIF，PNG或BMP；上传，打印，在Photoshop中打开，复制到剪贴板或电子邮件”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image029.png" alt="image029"></p>
<p>奇怪的名字，不知道是不是乱码了，功能如上</p>
<h2 id="网页截图-注释-amp-录屏"><a href="#网页截图-注释-amp-录屏" class="headerlink" title="网页截图:注释&amp;录屏"></a>网页截图:注释&amp;录屏</h2><p>“录屏，捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享注释。支持PNG和链接”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image030.png" alt="image030"></p>
<p>继续，功能如上图</p>
<h2 id="LastPass-Free-Password-Manager"><a href="#LastPass-Free-Password-Manager" class="headerlink" title="LastPass: Free Password Manager"></a>LastPass: Free Password Manager</h2><p>“LastPass,屡获殊荣的密码管理器,保存你的密码,让你安全访问任何计算机和移动设备。”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image031.png" alt="image031"></p>
<p>可以保存你网页的密码</p>
<h2 id="visualping"><a href="#visualping" class="headerlink" title="visualping"></a>visualping</h2><p>“Visualping is a simple service for monitoring websites for changes. You’ll receive an email notification when it detects any change in the content of the page.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image032.png" alt="image032"></p>
<p>你可以挂起visualping服务，监视网络变化并发送至你的邮箱</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image033.png" alt="image033"></p>
<p>也可以直接在浏览器中监视网页变化，最高频率1s一次，据说可以用来淘宝or京东双十一抢货</p>
<h2 id="Web-Developer"><a href="#Web-Developer" class="headerlink" title="Web Developer"></a>Web Developer</h2><p>“Adds a toolbar button with various web developer tools.”  </p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image034.png" alt="image034"></p>
<p>其实这个算一个开发者工具，为什么我放在这里是因为这个插件也有一些比较好的功能，比如展示密码</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image036.png" alt="image036"></p>
<p>然后display passwords</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image037.png" alt="image037"></p>
<p>不过这个插件更倾向于开发者用，嗯</p>
<h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p>“The Hacker’s Browser. Vimium provides keyboard shortcuts for navigation and control in the spirit of Vim.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image038.png" alt="image038"></p>
<p>直接来一发F键，释放双手，简直就是装逼神器233333</p>
<h2 id="Google翻译"><a href="#Google翻译" class="headerlink" title="Google翻译"></a>Google翻译</h2><p>浏览网页时可轻松查看翻译版本。由Google翻译小组提供。</p>
<p>-全局-</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image040.png" alt="image040"></p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image042.jpg" alt="image042"></p>
<p>-局部-</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image043.png" alt="image043"></p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image044.png" alt="image044"></p>
<p>语音还挺好听的，嗯</p>
<h2 id="chaZD"><a href="#chaZD" class="headerlink" title="chaZD"></a>chaZD</h2><p>“分组排序扩展并轻易切换。”  </p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image046.png" alt="image046"></p>
<h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p>“ChaZD 查字典，简洁易用的英汉字典扩展程序，支持划词哦:)”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image045.png" alt="image045"></p>
<h2 id="Window-Resizer"><a href="#Window-Resizer" class="headerlink" title="Window Resizer"></a>Window Resizer</h2><p>“Resize the browser window to emulate various screen resolutions.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image048.png" alt="image048"></p>
<p>可以将浏览器适配到一定的宽高</p>
<h2 id="Eye-Dropper"><a href="#Eye-Dropper" class="headerlink" title="Eye Dropper"></a>Eye Dropper</h2><p>“Eye Dropper is open source extension which allows you to pick colors from web pages, color picker and your personal color history.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image049.png" alt="image049"></p>
<p>取色器，可以把喜欢的颜色记录下来</p>
<h2 id="Syntaxtic"><a href="#Syntaxtic" class="headerlink" title="Syntaxtic!"></a>Syntaxtic!</h2><p>“Performs syntax highlighting on files visited in the browser based on their extension”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image050.png" alt="image050"></p>
<p>一款语法高亮工具</p>
<h2 id="Code-Highlight"><a href="#Code-Highlight" class="headerlink" title="Code Highlight"></a>Code Highlight</h2><p>“Highlights syntax in code examples on blogs, forums and in fact on any web pages”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image052.png" alt="image052"></p>
<p>一款代码高亮工具</p>
<h2 id="IE-Tab"><a href="#IE-Tab" class="headerlink" title="IE Tab"></a>IE Tab</h2><p>“Highlights syntax in code examples on blogs, forums and in fact on any web pages”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image054.png" alt="image054"></p>
<p>可以测试网页在IE不同版本上打开的效果，另外还有一个用途就是访问网银。</p>
<h2 id="Firebug-Lite-for-Google-Chrome™"><a href="#Firebug-Lite-for-Google-Chrome™" class="headerlink" title="Firebug Lite for Google Chrome™"></a>Firebug Lite for Google Chrome™</h2><p>“Firebug Lite for Google Chrome, supported by the Firebug Working Group.”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image056.png" alt="image056"></p>
<p>firefox开发者工具</p>
<h2 id="Postman（应用）"><a href="#Postman（应用）" class="headerlink" title="Postman（应用）"></a>Postman（应用）</h2><p>“Postman makes API development faster, easier, and better. The free app is used by more than 3.5 million developers and 30,000…”</p>
<p><img src="/2019/02/06/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%A7%80%E7%9A%84%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%EF%BC%9F/image058.png" alt="image058"></p>
<p>接口调试工具</p>
<p>Oh,差点忘了，因为那个众所周知，并不是所有的童鞋都能够访问chrome应用商店，出于这一点考虑，wo已经把上面安利的扩展打包然后放在百度云里，地址是：<a href="http://pan.baidu.com/s/1qYt3S5I">http://pan.baidu.com/s/1qYt3S5I</a> 密码：<code>9z35</code></p>
<ul>
<li><p>使用方法：</p>
</li>
<li><p>直接下载zip解压缩</p>
</li>
<li><p>把ctx文件拖入chrome安装插件即可</p>
</li>
<li><p>解决Chrome插件安装时出现的“程序包无效”问题</p>
</li>
<li><p><a href="https://jingyan.baidu.com/article/0f5fb099cbe5486d8334ea2c.html">https://jingyan.baidu.com/article/0f5fb099cbe5486d8334ea2c.html</a></p>
</li>
</ul>
<p>还有可能出现的一个问题是要在插件目录下的的metadata下加个”_”来着我记不大清了</p>
<p>总之出现问题可以动手百度锻炼自己解决问题的能力喵喵猫</p>
]]></content>
      <categories>
        <category>development tool</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>extension</tag>
      </tags>
  </entry>
</search>
